// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"gopkg.in/guregu/null.v4"
)

// Information about the price charged to a shop every plan period.
type AppPricingDetails interface {
	IsAppPricingDetails()
}

// Services and features purchased once by the store.
type AppPurchase interface {
	IsAppPurchase()
}

// A discount application involved in order editing that might be newly added or have new changes applied.
type CalculatedDiscountApplication interface {
	IsCalculatedDiscountApplication()
}

// The main embed of a comment event.
type CommentEventEmbed interface {
	IsCommentEventEmbed()
}

// The subject line of a comment event.
type CommentEventSubject interface {
	IsCommentEventSubject()
}

// Represents events preceding a customer order, such as shop sessions.
type CustomerMoment interface {
	IsCustomerMoment()
}

// All possible instruments for CustomerPaymentMethods.
type CustomerPaymentInstrument interface {
	IsCustomerPaymentInstrument()
}

// The criteria (weight or price) that the field must meet based on the operator.
type DeliveryConditionCriteria interface {
	IsDeliveryConditionCriteria()
}

// Rate provided by a rate definition or a participant.
type DeliveryRateProvider interface {
	IsDeliveryRateProvider()
}

// Discount applications capture the intentions of a discount source at
// the time of application on an order's line items or shipping lines.
type DiscountApplication interface {
	IsDiscountApplication()
}

// An automatic discount.
type DiscountAutomatic interface {
	IsDiscountAutomatic()
}

// A code discount.
type DiscountCode interface {
	IsDiscountCode()
}

// The prerequisite quantity required for the discount to be applicable.
type DiscountCustomerBuysValue interface {
	IsDiscountCustomerBuysValue()
}

// The value of the discount and how it will be applied.
type DiscountCustomerGetsValue interface {
	IsDiscountCustomerGetsValue()
}

// The selection of customers who can use this discount.
type DiscountCustomerSelection interface {
	IsDiscountCustomerSelection()
}

// The type of discount that will be applied. Currently, only percentage off is supported.
type DiscountEffect interface {
	IsDiscountEffect()
}

// Entitled or prerequisite items on a discount. An item could be either collection or product or product_variant.
type DiscountItems interface {
	IsDiscountItems()
}

// The minimum subtotal or quantity requirements for the discount.
type DiscountMinimumRequirement interface {
	IsDiscountMinimumRequirement()
}

// The selection of shipping countries to which this discount applies.
type DiscountShippingDestinationSelection interface {
	IsDiscountShippingDestinationSelection()
}

// Represents an error in the input of a mutation.
type DisplayableError interface {
	IsDisplayableError()
}

// Events chronicle resource activities such as the creation of an article, the fulfillment of an order, or the
// addition of a product.
type Event interface {
	IsEvent()
}

// Connector to event records on a compatible host.
type HasEvents interface {
	IsHasEvents()
}

// Localization extensions associated with the specified resource. For example, the tax id for government invoice.
type HasLocalizationExtensions interface {
	IsHasLocalizationExtensions()
}

// Localization extensions associated with the specified resource. For example, the tax id for government invoice.
type HasLocalizationExtensionsForDraftOrders interface {
	IsHasLocalizationExtensionsForDraftOrders()
}

// Represents information about the metafields associated to the specified resource.
type HasMetafields interface {
	IsHasMetafields()
}

// Published translations associated with the resource.
type HasPublishedTranslations interface {
	IsHasPublishedTranslations()
}

// Interoperability metadata for types that directly correspond to a REST Admin API resource.
// For example, on the Product type, LegacyInteroperability returns metadata for the corresponding [Product object](https://help.shopify.com/api/reference/products/product) in the REST Admin API.
type LegacyInteroperability interface {
	IsLegacyInteroperability()
}

// Represents a media interface.
type Media interface {
	IsMedia()
}

// A default cursor for use in pagination.
// The default cursor can be used for next and previous navigation.
type Navigable interface {
	IsNavigable()
}

// An object with an ID to support global identification.
type Node interface {
	IsNode()
}

// Online Store preview URL of the object.
type OnlineStorePreviewable interface {
	IsOnlineStorePreviewable()
}

// A change that has been applied to an order.
type OrderStagedChange interface {
	IsOrderStagedChange()
}

// The value of the price rule.
type PriceRuleValue interface {
	IsPriceRuleValue()
}

// The value of the pricing object.
type PricingValue interface {
	IsPricingValue()
}

// Represents a resource that can be published to a channel.
// A publishable resource can be either a Product or Collection.
type Publishable interface {
	IsPublishable()
}

// Represents the billing frequency associated to the selling plan (for example, bill every week, or bill every
// three months). The selling plan billing policy and associated records (selling plan groups, selling plans, pricing
// policies, and delivery policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
// We recommend backing up these records if you need to restore them later.
type SellingPlanBillingPolicy interface {
	IsSellingPlanBillingPolicy()
}

// Represents the delivery frequency associated to the selling plan (for example, deliver every month, or deliver
// every other week). The selling plan delivery policy and associated records (selling plan groups, selling plans,
// pricing policies, and billing policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
// We recommend backing up these records if you need to restore them later.
type SellingPlanDeliveryPolicy interface {
	IsSellingPlanDeliveryPolicy()
}

// Represents the type of pricing associated to the selling plan (for example, a $10 or 20% discount that is set
// for a limited period or that is fixed for the duration of the subscription). Selling plan pricing policies and
// associated records (selling plan groups, selling plans, billing policy, and delivery policy) are deleted 48
// hours after a merchant uninstalls their subscriptions app. We recommend backing up these records if you need
// to restore them later.
type SellingPlanPricingPolicy interface {
	IsSellingPlanPricingPolicy()
}

// Represents a selling plan pricing policy adjustment value type.
type SellingPlanPricingPolicyAdjustmentValue interface {
	IsSellingPlanPricingPolicyAdjustmentValue()
}

// Represents selling plan pricing policy common fields.
type SellingPlanPricingPolicyBase interface {
	IsSellingPlanPricingPolicyBase()
}

// The charge descriptors for a payments account.
type ShopifyPaymentsChargeStatementDescriptor interface {
	IsShopifyPaymentsChargeStatementDescriptor()
}

// Describes the delivery method to use to get the physical goods to the customer.
type SubscriptionDeliveryMethod interface {
	IsSubscriptionDeliveryMethod()
}

// Subscription draft discount types.
type SubscriptionDiscount interface {
	IsSubscriptionDiscount()
}

// The value of the discount and how it will be applied.
type SubscriptionDiscountValue interface {
	IsSubscriptionDiscountValue()
}

// The result of the query to fetch shipping options for the subscription contract.
type SubscriptionShippingOptionResult interface {
	IsSubscriptionShippingOptionResult()
}

// Information about the payment instrument used for this transaction.
type TenderTransactionDetails interface {
	IsTenderTransactionDetails()
}

// Endpoint where webhooks will be delivered.
type WebhookSubscriptionEndpoint interface {
	IsWebhookSubscriptionEndpoint()
}

// Represents the access scope permission that is applicable to a merchant's shop, such as `read_orders`.
type AccessScope struct {
	// Description of the access scopes enabled on an api permission.
	Description null.String `json:"description,omitempty"`
	// A human-friendly string for an access scope.
	Handle null.String `json:"handle,omitempty"`
}

// Whether all items in the cart are entitled to the discount.
type AllDiscountItems struct {
	// Whether all items are selected. The value is hardcoded to `true`.
	AllItems bool `json:"allItems,omitempty"`
}

func (AllDiscountItems) IsDiscountItems() {}

// A version of the API.
type APIVersion struct {
	// The human-readable name of the version.
	DisplayName null.String `json:"displayName,omitempty"`
	// The unique identifier of an ApiVersion. All supported API versions have a date-based (YYYY-MM) or `unstable` handle.
	Handle null.String `json:"handle,omitempty"`
	// Whether the version is supported by Shopify.
	Supported bool `json:"supported,omitempty"`
}

// A Shopify application.
type App struct {
	// A unique application API identifier.
	APIKey null.String `json:"apiKey,omitempty"`
	// App store page URL of the app.
	AppStoreAppURL *null.String `json:"appStoreAppUrl,omitempty"`
	// App store page URL of the developer who created the app.
	AppStoreDeveloperURL *null.String `json:"appStoreDeveloperUrl,omitempty"`
	// Banner image for the app.
	Banner *Image `json:"banner,omitempty"`
	// Description of the app.
	Description *null.String `json:"description,omitempty"`
	// App's developer name.
	DeveloperName *null.String `json:"developerName,omitempty"`
	// Website of the developer who created the app.
	DeveloperURL null.String `json:"developerUrl,omitempty"`
	// Whether the app uses the Embedded App SDK.
	Embedded bool `json:"embedded,omitempty"`
	// Requirements that must be met before the app can be installed.
	FailedRequirements []*FailedRequirement `json:"failedRequirements,omitempty"`
	// List of app features.
	Features []null.String `json:"features,omitempty"`
	// Feedback from this app about the store.
	Feedback *AppFeedback `json:"feedback,omitempty"`
	// Handle of the app.
	Handle *null.String `json:"handle,omitempty"`
	// Icon that represents the app.
	Icon *Image `json:"icon,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Webpage where you can install the app.
	InstallURL *null.String `json:"installUrl,omitempty"`
	// Corresponding AppInstallation for this shop and App.
	// Returns null if the App is not installed.
	Installation *AppInstallation `json:"installation,omitempty"`
	// Webpage that the app starts in.
	LaunchURL null.String `json:"launchUrl,omitempty"`
	// Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.
	NavigationItems []*NavigationItem `json:"navigationItems,omitempty"`
	// Detailed information about the app pricing.
	PricingDetails *null.String `json:"pricingDetails,omitempty"`
	// Summary of the app pricing details.
	PricingDetailsSummary null.String `json:"pricingDetailsSummary,omitempty"`
	// Link to app privacy policy.
	PrivacyPolicyURL *null.String `json:"privacyPolicyUrl,omitempty"`
	// Whether the app is published.
	Published bool `json:"published,omitempty"`
	// Screenshots of the app.
	Screenshots []*Image `json:"screenshots,omitempty"`
	// Whether the app was developed by Shopify.
	ShopifyDeveloped bool `json:"shopifyDeveloped,omitempty"`
	// Name of the app.
	Title null.String `json:"title,omitempty"`
	// Message that appears when the app is uninstalled. For example:
	// By removing this app, you will no longer be able to publish products to MySocialSite or view this app in your Shopify admin. You can re-enable this channel at any time.
	UninstallMessage null.String `json:"uninstallMessage,omitempty"`
	// Webpage where you can uninstall the app.
	UninstallURL *null.String `json:"uninstallUrl,omitempty"`
}

func (App) IsNode() {}

// An auto-generated type for paginating through multiple Apps.
type AppConnection struct {
	// A list of edges.
	Edges []*AppEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// App credits can be applied by the merchant towards future app purchases, subscriptions, or usage records in Shopify.
type AppCredit struct {
	// The amount that can be used towards future app purchases in Shopify.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// The date and time when the app credit was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The description of the app credit.
	Description null.String `json:"description,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Whether the app credit is a test transaction.
	Test bool `json:"test,omitempty"`
}

func (AppCredit) IsNode() {}

// An auto-generated type for paginating through multiple AppCredits.
type AppCreditConnection struct {
	// A list of edges.
	Edges []*AppCreditEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `appCreditCreate` mutation.
type AppCreditCreatePayload struct {
	// The newly created app credit.
	AppCredit *AppCredit `json:"appCredit,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one AppCredit and a cursor during pagination.
type AppCreditEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of AppCreditEdge.
	Node *AppCredit `json:"node,omitempty"`
}

// An auto-generated type which holds one App and a cursor during pagination.
type AppEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of AppEdge.
	Node *App `json:"node,omitempty"`
}

// Reports the status of shops and their resources and displays this information
// within Shopify admin. AppFeedback is used to notify merchants about steps they need to take
// to set up an app on their store.
type AppFeedback struct {
	// The application associated to the feedback.
	App *App `json:"app,omitempty"`
	// A link to where merchants can resolve errors.
	Link *Link `json:"link,omitempty"`
	// The feedback message presented to the merchant.
	Messages []*UserError `json:"messages,omitempty"`
}

// Represents an installed application on a shop.
type AppInstallation struct {
	// Access scopes granted to an app by a merchant during installation.
	AccessScopes []*AccessScope `json:"accessScopes,omitempty"`
	// Active subscriptions charged to a shop on a recurring basis.
	ActiveSubscriptions []*AppSubscription `json:"activeSubscriptions,omitempty"`
	// All subscriptions created for a shop.
	AllSubscriptions *AppSubscriptionConnection `json:"allSubscriptions,omitempty"`
	// Application which is installed.
	App *App `json:"app,omitempty"`
	// Channel associated with the installed application.
	Channel *Channel `json:"channel,omitempty"`
	// Credits that can be used towards future app purchases.
	Credits *AppCreditConnection `json:"credits,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Url used to launch the app.
	LaunchURL null.String `json:"launchUrl,omitempty"`
	// One-time purchases to a shop.
	OneTimePurchases *AppPurchaseOneTimeConnection `json:"oneTimePurchases,omitempty"`
	// Publication associated with the installed application.
	Publication *Publication `json:"publication,omitempty"`
	// Subscriptions charge to a shop on a recurring basis.
	Subscriptions []*AppSubscription `json:"subscriptions,omitempty"`
	// Webpage where you can uninstall the app.
	UninstallURL *null.String `json:"uninstallUrl,omitempty"`
}

func (AppInstallation) IsNode() {}

// An auto-generated type for paginating through multiple AppInstallations.
type AppInstallationConnection struct {
	// A list of edges.
	Edges []*AppInstallationEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one AppInstallation and a cursor during pagination.
type AppInstallationEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of AppInstallationEdge.
	Node *AppInstallation `json:"node,omitempty"`
}

// Defines the pricing model for the app subscription.
type AppPlanInput struct {
	// Usage based billing pricing details.
	AppUsagePricingDetails *AppUsagePricingInput `json:"appUsagePricingDetails,omitempty"`
	// Recurring based billing pricing details.
	AppRecurringPricingDetails *AppRecurringPricingInput `json:"appRecurringPricingDetails,omitempty"`
}

// Defines the app plan the merchant is subscribed to.
type AppPlanV2 struct {
	// Defines the pricing model for the app subscription.
	PricingDetails AppPricingDetails `json:"pricingDetails,omitempty"`
}

// Services and features purchased once by a store.
type AppPurchaseOneTime struct {
	// The date and time when the app purchase was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The name of the app purchase.
	Name null.String `json:"name,omitempty"`
	// The amount to be charged to the store for the app purchase.
	Price *MoneyV2 `json:"price,omitempty"`
	// The status of the app purchase. Possible values include pending, active, declined and cancelled.
	Status AppPurchaseStatus `json:"status,omitempty"`
	// Whether the app purchase is a test transaction.
	Test bool `json:"test,omitempty"`
}

func (AppPurchaseOneTime) IsAppPurchase() {}
func (AppPurchaseOneTime) IsNode()        {}

// An auto-generated type for paginating through multiple AppPurchaseOneTimes.
type AppPurchaseOneTimeConnection struct {
	// A list of edges.
	Edges []*AppPurchaseOneTimeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `appPurchaseOneTimeCreate` mutation.
type AppPurchaseOneTimeCreatePayload struct {
	// The newly created app one-time purchase.
	AppPurchaseOneTime *AppPurchaseOneTime `json:"appPurchaseOneTime,omitempty"`
	// The URL where the merchant can approve or decline the app one-time purchase.
	ConfirmationURL *null.String `json:"confirmationUrl,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one AppPurchaseOneTime and a cursor during pagination.
type AppPurchaseOneTimeEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of AppPurchaseOneTimeEdge.
	Node *AppPurchaseOneTime `json:"node,omitempty"`
}

// Price charged every interval.
type AppRecurringPricing struct {
	// Specifies the number of days in a billing cycle of the app subscription.
	Interval AppPricingInterval `json:"interval,omitempty"`
	// The amount to be charged to the store every billing interval.
	Price *MoneyV2 `json:"price,omitempty"`
}

func (AppRecurringPricing) IsAppPricingDetails() {}

// Allows an app to charge per billing interval.
type AppRecurringPricingInput struct {
	// Specifies the billing frequency of the app subscription.
	Interval *AppPricingInterval `json:"interval,omitempty"`
	// The amount to be charged to the store every billing interval. The only permitted currency code is USD.
	Price *MoneyInput `json:"price,omitempty"`
}

// Provides users access to services and/or features for a duration of time.
type AppSubscription struct {
	// The date and time when the app subscription was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The date and time when the current app subscription period ends.
	CurrentPeriodEnd *null.String `json:"currentPeriodEnd,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Attaches a plan to an app subscription.
	LineItems []*AppSubscriptionLineItem `json:"lineItems,omitempty"`
	// The name of the app subscription.
	Name null.String `json:"name,omitempty"`
	// The URL where the merchant is redirected after approving the app subscription.
	ReturnURL null.String `json:"returnUrl,omitempty"`
	// The status of the app subscription. Possible values include pending, active, declined,
	//          expired, frozen, and cancelled.
	Status AppSubscriptionStatus `json:"status,omitempty"`
	// Specifies whether the app subscription is a test transaction.
	Test bool `json:"test,omitempty"`
	// The number of days of the free trial.
	TrialDays int `json:"trialDays,omitempty"`
}

func (AppSubscription) IsNode() {}

// Return type for `appSubscriptionCancel` mutation.
type AppSubscriptionCancelPayload struct {
	// The cancelled app subscription.
	AppSubscription *AppSubscription `json:"appSubscription,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple AppSubscriptions.
type AppSubscriptionConnection struct {
	// A list of edges.
	Edges []*AppSubscriptionEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `appSubscriptionCreate` mutation.
type AppSubscriptionCreatePayload struct {
	// The newly created app subscription.
	AppSubscription *AppSubscription `json:"appSubscription,omitempty"`
	// The URL where the merchant approves or declines an app subscription.
	ConfirmationURL *null.String `json:"confirmationUrl,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one AppSubscription and a cursor during pagination.
type AppSubscriptionEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of AppSubscriptionEdge.
	Node *AppSubscription `json:"node,omitempty"`
}

// Attaches a plan to an app subscription.
type AppSubscriptionLineItem struct {
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Defines the pricing model for the app subscription.
	Plan *AppPlanV2 `json:"plan,omitempty"`
	// Lists the store's usage for a usage pricing plan.
	UsageRecords *AppUsageRecordConnection `json:"usageRecords,omitempty"`
}

// Allows an app to add more than one plan to an app subscription.
type AppSubscriptionLineItemInput struct {
	// Defines the pricing model for the app subscription.
	Plan *AppPlanInput `json:"plan,omitempty"`
}

// Return type for `appSubscriptionLineItemUpdate` mutation.
type AppSubscriptionLineItemUpdatePayload struct {
	// The updated app subscription.
	AppSubscription *AppSubscription `json:"appSubscription,omitempty"`
	// The URL where the merchant approves or declines the updated app subscription line item.
	ConfirmationURL *null.String `json:"confirmationUrl,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Defines the usage pricing model for the app subscription.
type AppUsagePricing struct {
	// The total usage records for interval.
	BalanceUsed *MoneyV2 `json:"balanceUsed,omitempty"`
	// The limit a store can be charged for usage based pricing.
	CappedAmount *MoneyV2 `json:"cappedAmount,omitempty"`
	// Specifies the interval which usage records are applied.
	Interval AppPricingInterval `json:"interval,omitempty"`
	// The terms and conditions for app usage pricing.
	Terms null.String `json:"terms,omitempty"`
}

func (AppUsagePricing) IsAppPricingDetails() {}

// Allows an app to charge a store for usage.
type AppUsagePricingInput struct {
	// The limit a customer can be charged for usage based pricing.
	CappedAmount *MoneyInput `json:"cappedAmount,omitempty"`
	// The terms and conditions for app usage.
	Terms null.String `json:"terms,omitempty"`
}

// Store usage for app subscriptions with usage pricing.
type AppUsageRecord struct {
	// The date and time when the usage record was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The description of the app usage record.
	Description null.String `json:"description,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The price of the usage record. The only permitted currency code is USD.
	Price *MoneyV2 `json:"price,omitempty"`
	// Defines the usage pricing plan the merchant is subscribed to.
	SubscriptionLineItem *AppSubscriptionLineItem `json:"subscriptionLineItem,omitempty"`
}

func (AppUsageRecord) IsNode() {}

// An auto-generated type for paginating through multiple AppUsageRecords.
type AppUsageRecordConnection struct {
	// A list of edges.
	Edges []*AppUsageRecordEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `appUsageRecordCreate` mutation.
type AppUsageRecordCreatePayload struct {
	// The newly created app usage record.
	AppUsageRecord *AppUsageRecord `json:"appUsageRecord,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one AppUsageRecord and a cursor during pagination.
type AppUsageRecordEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of AppUsageRecordEdge.
	Node *AppUsageRecord `json:"node,omitempty"`
}

// Represents a generic custom attribute.
type Attribute struct {
	// Key or name of the attribute.
	Key null.String `json:"key,omitempty"`
	// Value of the attribute.
	Value *null.String `json:"value,omitempty"`
}

// Specifies the input fields required for an attribute.
type AttributeInput struct {
	// Key or name of the attribute.
	Key null.String `json:"key,omitempty"`
	// Value of the attribute.
	Value null.String `json:"value,omitempty"`
}

// Automatic discount applications capture the intentions of a discount that was automatically applied.
type AutomaticDiscountApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod,omitempty"`
	// An ordered index that can be used to identify the discount application and indicate the precedence
	// of the discount application for calculations.
	Index int `json:"index,omitempty"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection,omitempty"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType,omitempty"`
	// The title of the discount application.
	Title null.String `json:"title,omitempty"`
	// The value of the discount application.
	Value PricingValue `json:"value,omitempty"`
}

func (AutomaticDiscountApplication) IsDiscountApplication() {}

// Basic events chronicle resource activities such as the creation of an article, the fulfillment of an order, or
// the addition of a product.
type BasicEvent struct {
	// The name of the app that created the event. Returns null when the event originates from the Shopify admin.
	AppTitle *null.String `json:"appTitle,omitempty"`
	// Whether the event was created by an app.
	AttributeToApp bool `json:"attributeToApp,omitempty"`
	// Whether the event was caused by an admin user.
	AttributeToUser bool `json:"attributeToUser,omitempty"`
	// The date and time when the event was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// Whether the event is critical.
	CriticalAlert bool `json:"criticalAlert,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Human readable text that describes the event.
	Message null.String `json:"message,omitempty"`
}

func (BasicEvent) IsNode()  {}
func (BasicEvent) IsEvent() {}

// Represents an error that happens during the execution of a billing attempt mutation.
type BillingAttemptUserError struct {
	// Error code to uniquely identify the error.
	Code *BillingAttemptUserErrorCode `json:"code,omitempty"`
	// Path to the input field which caused the error.
	Field []null.String `json:"field,omitempty"`
	// The error message.
	Message null.String `json:"message,omitempty"`
}

func (BillingAttemptUserError) IsDisplayableError() {}

// An asynchronous long-running operation to fetch data in bulk.
//
// Bulk operations are created using the `bulkOperationRunQuery` mutation. After they are created,
// clients should poll the `status` field for updates. When `COMPLETED`, the `url` field contains
// a link to the data in [JSONL](http://jsonlines.org/) format.
//
// See the [bulk operations guide](https://help.shopify.com/api/guides/bulk-operations) for more details.
type BulkOperation struct {
	// When the bulk operation was successfully completed.
	CompletedAt *null.String `json:"completedAt,omitempty"`
	// When the bulk operation was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// Error code for failed operations.
	ErrorCode *BulkOperationErrorCode `json:"errorCode,omitempty"`
	// File size in bytes of the file in the `url` field.
	FileSize *null.String `json:"fileSize,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The running count of all objects processed.
	// For example, when fetching all products and their variants, this field counts both products and variants.
	// This field can be used to track operation progress.
	ObjectCount null.String `json:"objectCount,omitempty"`
	// URL to partial/incomplete response data (in [JSONL](http://jsonlines.org/) format) returned by a failed operation.
	// Expires **one week** after the operation fails. Returns `null` when there's no data available.
	PartialDataURL *null.String `json:"partialDataUrl,omitempty"`
	// GraphQL query document specified in `bulkOperationRunQuery`.
	Query null.String `json:"query,omitempty"`
	// The running count of all objects processed at the root of the query.
	// For example, when fetching all products and their variants, this field counts only products.
	// This field can be used to track operation progress.
	RootObjectCount null.String `json:"rootObjectCount,omitempty"`
	// Status of the bulk operation.
	Status BulkOperationStatus `json:"status,omitempty"`
	// URL to the response data in [JSONL](http://jsonlines.org/) format.
	// Expires **one week** after the operation completes.
	URL *null.String `json:"url,omitempty"`
}

func (BulkOperation) IsNode() {}

// Return type for `bulkOperationCancel` mutation.
type BulkOperationCancelPayload struct {
	// The bulk operation to be canceled.
	BulkOperation *BulkOperation `json:"bulkOperation,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `bulkOperationRunQuery` mutation.
type BulkOperationRunQueryPayload struct {
	// The newly created bulk operation.
	BulkOperation *BulkOperation `json:"bulkOperation,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Discount code applications capture the intentions of a discount code at
// the time that it is applied onto an order.
type CalculatedAutomaticDiscountApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod,omitempty"`
	// The level at which the discount was applied.
	AppliedTo DiscountApplicationLevel `json:"appliedTo,omitempty"`
	// The description of discount application. Indicates the reason why the discount was applied.
	Description *null.String `json:"description,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection,omitempty"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType,omitempty"`
	// The value of the discount application.
	Value PricingValue `json:"value,omitempty"`
}

func (CalculatedAutomaticDiscountApplication) IsCalculatedDiscountApplication() {}

// An amount discounting the line that has been allocated by an associated discount application.
type CalculatedDiscountAllocation struct {
	// The money amount allocated by the discount application in shop and presentment currencies.
	AllocatedAmountSet *MoneyBag `json:"allocatedAmountSet,omitempty"`
	// The discount that the allocated amount originated from.
	DiscountApplication CalculatedDiscountApplication `json:"discountApplication,omitempty"`
}

// An auto-generated type for paginating through multiple CalculatedDiscountApplications.
type CalculatedDiscountApplicationConnection struct {
	// A list of edges.
	Edges []*CalculatedDiscountApplicationEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CalculatedDiscountApplication and a cursor during pagination.
type CalculatedDiscountApplicationEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of CalculatedDiscountApplicationEdge.
	Node CalculatedDiscountApplication `json:"node,omitempty"`
}

// Discount code applications capture the intentions of a discount code at
// the time that it is applied onto an order.
type CalculatedDiscountCodeApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod,omitempty"`
	// The level at which the discount was applied.
	AppliedTo DiscountApplicationLevel `json:"appliedTo,omitempty"`
	// The string identifying the discount code that was used at the time of application.
	Code null.String `json:"code,omitempty"`
	// The description of discount application. Indicates the reason why the discount was applied.
	Description *null.String `json:"description,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection,omitempty"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType,omitempty"`
	// The value of the discount application.
	Value PricingValue `json:"value,omitempty"`
}

func (CalculatedDiscountCodeApplication) IsCalculatedDiscountApplication() {}

// The computed properties for a draft order.
type CalculatedDraftOrder struct {
	// Order-level discount applied to the draft order.
	AppliedDiscount *DraftOrderAppliedDiscount `json:"appliedDiscount,omitempty"`
	// The available shipping rates for the draft order. Requires a customer with a valid shipping address and at least one line item.
	AvailableShippingRates []*ShippingRate `json:"availableShippingRates,omitempty"`
	// Customer who will be sent an invoice for the draft order, if there is one.
	Customer *Customer `json:"customer,omitempty"`
	// Line items in the draft order with their computed properties.
	LineItems []*CalculatedDraftOrderLineItem `json:"lineItems,omitempty"`
	// Line item that contains the shipping costs.
	ShippingLine *ShippingLine `json:"shippingLine,omitempty"`
	// Subtotal of the line items and their discounts (does not contain shipping charges or shipping discounts, or taxes).
	SubtotalPrice null.String `json:"subtotalPrice,omitempty"`
	// Total amount of taxes charged for each line item and shipping line.
	TaxLines []*TaxLine `json:"taxLines,omitempty"`
	// Total amount of the draft order (includes taxes, shipping charges, and discounts).
	TotalPrice null.String `json:"totalPrice,omitempty"`
	// Total shipping charge for the draft order.
	TotalShippingPrice null.String `json:"totalShippingPrice,omitempty"`
	// Total amount of taxes for the draft order.
	TotalTax null.String `json:"totalTax,omitempty"`
}

// The computed line items for a draft order.
type CalculatedDraftOrderLineItem struct {
	// Discount applied to the line item.
	AppliedDiscount *DraftOrderAppliedDiscount `json:"appliedDiscount,omitempty"`
	// Indicates if this is a product variant line item, or a custom line item.
	Custom bool `json:"custom,omitempty"`
	// List of additional information (metafields) about the line item.
	CustomAttributes []*Attribute `json:"customAttributes,omitempty"`
	// Total price with discounts applied.
	DiscountedTotal *MoneyV2 `json:"discountedTotal,omitempty"`
	// Unit price with discounts applied.
	DiscountedUnitPrice *MoneyV2 `json:"discountedUnitPrice,omitempty"`
	// Name of the service provider who fulfilled the order.
	//
	// Valid values are either **manual** or the name of the provider.
	// For example, **amazon**, **shipwire**.
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty"`
	// Image associated with the draft order line item.
	Image *Image `json:"image,omitempty"`
	// Indicates whether the line item represents the puchase of a gift card.
	IsGiftCard bool `json:"isGiftCard,omitempty"`
	// Name of the product.
	Name null.String `json:"name,omitempty"`
	// Total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
	OriginalTotal *MoneyV2 `json:"originalTotal,omitempty"`
	// Variant price without any discounts applied.
	OriginalUnitPrice *MoneyV2 `json:"originalUnitPrice,omitempty"`
	// Product associated with the draft order line item.
	Product *Product `json:"product,omitempty"`
	// Number of variant items requested in the draft order.
	Quantity int `json:"quantity,omitempty"`
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping,omitempty"`
	// Variant SKU number.
	Sku *null.String `json:"sku,omitempty"`
	// Whether the variant is taxable.
	Taxable bool `json:"taxable,omitempty"`
	// Title of the product or variant (this field only applies to custom line items).
	Title null.String `json:"title,omitempty"`
	// Total value of the discount.
	TotalDiscount *MoneyV2 `json:"totalDiscount,omitempty"`
	// Variant associated with the draft order line item.
	Variant *ProductVariant `json:"variant,omitempty"`
	// Name of the variant.
	VariantTitle *null.String `json:"variantTitle,omitempty"`
	// Name of the vendor who made the variant.
	Vendor *null.String `json:"vendor,omitempty"`
	// Weight unit and value for a draft order line item.
	Weight *Weight `json:"weight,omitempty"`
}

// A line item involved in order editing that may be newly added or have new changes applied.
type CalculatedLineItem struct {
	// The discounts that have been allocated onto the line item by discount applications.
	CalculatedDiscountAllocations []*CalculatedDiscountAllocation `json:"calculatedDiscountAllocations,omitempty"`
	// List of additional information (metafields) about the line item.
	CustomAttributes []*Attribute `json:"customAttributes,omitempty"`
	// The discounts that have been allocated onto the line item by discount applications.
	DiscountAllocations []*DiscountAllocation `json:"discountAllocations,omitempty"`
	// The total line price after discounts are applied in shop and presentment currencies.
	DiscountedUnitPriceSet *MoneyBag `json:"discountedUnitPriceSet,omitempty"`
	// The total number of items that can be edited.
	EditableQuantity int `json:"editableQuantity,omitempty"`
	// The editable quantity prior to any changes made in the current edit.
	EditableQuantityBeforeChanges int `json:"editableQuantityBeforeChanges,omitempty"`
	// The total price of editable lines in shop and presentment currencies.
	EditableSubtotalSet *MoneyBag `json:"editableSubtotalSet,omitempty"`
	// Whether the calculated line item has a staged discount.
	HasStagedLineItemDiscount bool `json:"hasStagedLineItemDiscount,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The Image object associated to the line item's variant.
	Image *Image `json:"image,omitempty"`
	// Variant price without any discounts applied in shop and presentment currencies.
	OriginalUnitPriceSet *MoneyBag `json:"originalUnitPriceSet,omitempty"`
	// The total number of items.
	Quantity int `json:"quantity,omitempty"`
	// Whether the line item can be restocked or not.
	Restockable bool `json:"restockable,omitempty"`
	// Whether the changes on the line item will result in a restock.
	Restocking bool `json:"restocking,omitempty"`
	// Variant SKU number.
	Sku *null.String `json:"sku,omitempty"`
	// A list of changes that affect this line item.
	StagedChanges []OrderStagedChange `json:"stagedChanges,omitempty"`
	// Title of the product or variant.
	Title null.String `json:"title,omitempty"`
	// The total price of uneditable lines in shop and presentment currencies.
	UneditableSubtotalSet *MoneyBag `json:"uneditableSubtotalSet,omitempty"`
	// The product variant associated with this line item. Will be null for custom line items and items whose
	// variant has been deleted.
	Variant *ProductVariant `json:"variant,omitempty"`
	// Name of the variant.
	VariantTitle *null.String `json:"variantTitle,omitempty"`
}

// An auto-generated type for paginating through multiple CalculatedLineItems.
type CalculatedLineItemConnection struct {
	// A list of edges.
	Edges []*CalculatedLineItemEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CalculatedLineItem and a cursor during pagination.
type CalculatedLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of CalculatedLineItemEdge.
	Node *CalculatedLineItem `json:"node,omitempty"`
}

// Manual discount applications capture the intentions of a discount that was manually created for an order.
type CalculatedManualDiscountApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod,omitempty"`
	// The level at which the discount was applied.
	AppliedTo DiscountApplicationLevel `json:"appliedTo,omitempty"`
	// The description of discount application. Indicates the reason why the discount was applied.
	Description *null.String `json:"description,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection,omitempty"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType,omitempty"`
	// The value of the discount application.
	Value PricingValue `json:"value,omitempty"`
}

func (CalculatedManualDiscountApplication) IsCalculatedDiscountApplication() {}

// An order with edits applied but not saved.
type CalculatedOrder struct {
	// Returns only the new discount applications being added to the order.
	AddedDiscountApplications *CalculatedDiscountApplicationConnection `json:"addedDiscountApplications,omitempty"`
	// Returns only the new line items being added to the order.
	AddedLineItems *CalculatedLineItemConnection `json:"addedLineItems,omitempty"`
	// Amount of the order-level discount (does not contain any line item discounts) in shop and presentment currencies.
	CartDiscountAmountSet *MoneyBag `json:"cartDiscountAmountSet,omitempty"`
	// Will be true when the changes have been applied to the order.
	Committed bool `json:"committed,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Returns all items on the order that existed before starting the edit.
	// will include any changes that have been made.
	LineItems *CalculatedLineItemConnection `json:"lineItems,omitempty"`
	// The HTML of the customer notification for the order edit.
	NotificationPreviewHTML *null.String `json:"notificationPreviewHtml,omitempty"`
	// The customer notification title.
	NotificationPreviewTitle null.String `json:"notificationPreviewTitle,omitempty"`
	// The order with changes applied.
	Order *Order `json:"order,omitempty"`
	// The order without any changes applied.
	OriginalOrder *Order `json:"originalOrder,omitempty"`
	// List of changes made on the order.
	StagedChanges *OrderStagedChangeConnection `json:"stagedChanges,omitempty"`
	// The sum of the quantities for the line items that contribute to the order's subtotal.
	SubtotalLineItemsQuantity int `json:"subtotalLineItemsQuantity,omitempty"`
	// Subtotal of the line items and their discounts (does not contain shipping costs, shipping discounts) in shop and presentment currencies.
	SubtotalPriceSet *MoneyBag `json:"subtotalPriceSet,omitempty"`
	// Taxes charged for the line item.
	TaxLines []*TaxLine `json:"taxLines,omitempty"`
	// Total price of the order less the total amount received from the customer in shop and presentment currencies.
	TotalOutstandingSet *MoneyBag `json:"totalOutstandingSet,omitempty"`
	// Total amount of the order (includes taxes and discounts) in shop and presentment currencies.
	TotalPriceSet *MoneyBag `json:"totalPriceSet,omitempty"`
}

func (CalculatedOrder) IsNode() {}

// Discount code applications capture the intentions of a discount code at
// the time that it is applied onto an order.
type CalculatedScriptDiscountApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod,omitempty"`
	// The level at which the discount was applied.
	AppliedTo DiscountApplicationLevel `json:"appliedTo,omitempty"`
	// The description of discount application. Indicates the reason why the discount was applied.
	Description *null.String `json:"description,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection,omitempty"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType,omitempty"`
	// The value of the discount application.
	Value PricingValue `json:"value,omitempty"`
}

func (CalculatedScriptDiscountApplication) IsCalculatedDiscountApplication() {}

// A channel represents an app where you sell a group of products and collections.
// A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
type Channel struct {
	// Underlying app used by the channel.
	App *App `json:"app,omitempty"`
	// The collection publications for the list of collections published to the channel.
	CollectionPublicationsV3 *ResourcePublicationConnection `json:"collectionPublicationsV3,omitempty"`
	// The list of collections published to the channel.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// Unique identifier for the channel.
	Handle null.String `json:"handle,omitempty"`
	// Whether the collection is available to the channel.
	HasCollection bool `json:"hasCollection,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Name of the channel.
	Name null.String `json:"name,omitempty"`
	// Menu items for the channel, which also appear as submenu items in left navigation sidebar in the Shopify admin.
	NavigationItems []*NavigationItem `json:"navigationItems,omitempty"`
	// Home page for the channel.
	OverviewPath *null.String `json:"overviewPath,omitempty"`
	// The product publications for the products published to the channel.
	ProductPublications *ProductPublicationConnection `json:"productPublications,omitempty"`
	// The product publications for the list of products published to the channel.
	ProductPublicationsV3 *ResourcePublicationConnection `json:"productPublicationsV3,omitempty"`
	// The list of products published to the channel.
	Products *ProductConnection `json:"products,omitempty"`
	// Whether or not this channel supports future publishing.
	SupportsFuturePublishing bool `json:"supportsFuturePublishing,omitempty"`
}

func (Channel) IsNode() {}

// An auto-generated type for paginating through multiple Channels.
type ChannelConnection struct {
	// A list of edges.
	Edges []*ChannelEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one Channel and a cursor during pagination.
type ChannelEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of ChannelEdge.
	Node *Channel `json:"node,omitempty"`
}

// Represents a collection of products.
type Collection struct {
	// The number of publications a resource is published to without feedback errors.
	AvailablePublicationCount int `json:"availablePublicationCount,omitempty"`
	// The stripped description of the collection, in a single line with HTML tags removed.
	Description null.String `json:"description,omitempty"`
	// The description of the collection, complete with HTML formatting.
	DescriptionHTML null.String `json:"descriptionHtml,omitempty"`
	// Information about the collection that's provided through resource feedback.
	Feedback *ResourceFeedback `json:"feedback,omitempty"`
	// A unique human-friendly string for the collection. Automatically generated from the collection's title.
	Handle null.String `json:"handle,omitempty"`
	// Whether the collection includes a product.
	HasProduct bool `json:"hasProduct,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The image associated with the collection.
	Image *Image `json:"image,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// The metafield associated with the resource.
	Metafield *Metafield `json:"metafield,omitempty"`
	// A paginated list of metafields associated with the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// Returns a private metafield found by namespace and key.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// List of private metafields.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The products that are included in the collection.
	Products *ProductConnection `json:"products,omitempty"`
	// The number of products included in the collection.
	ProductsCount int `json:"productsCount,omitempty"`
	// The number of publications a resource is published on.
	PublicationCount int `json:"publicationCount,omitempty"`
	// The channels where the collection is published.
	Publications *CollectionPublicationConnection `json:"publications,omitempty"`
	// Check to see whether the resource is published to a given channel.
	PublishedOnChannel bool `json:"publishedOnChannel,omitempty"`
	// Check to see whether the resource is published to the calling app's channel.
	PublishedOnCurrentChannel bool `json:"publishedOnCurrentChannel,omitempty"`
	// Check to see whether the resource is published to the calling app's publication.
	PublishedOnCurrentPublication bool `json:"publishedOnCurrentPublication,omitempty"`
	// Check to see whether the resource is published to a given publication.
	PublishedOnPublication bool `json:"publishedOnPublication,omitempty"`
	// The list of resources that are published to a publication.
	ResourcePublications *ResourcePublicationConnection `json:"resourcePublications,omitempty"`
	// The list of resources that are either published or staged to be published to a publication.
	ResourcePublicationsV2 *ResourcePublicationV2Connection `json:"resourcePublicationsV2,omitempty"`
	// The rules used to assign products to the collection. This applies only to smart collections.
	RuleSet *CollectionRuleSet `json:"ruleSet,omitempty"`
	// SEO information for the collection.
	Seo *Seo `json:"seo,omitempty"`
	// The order in which the collection's products are sorted.
	SortOrder CollectionSortOrder `json:"sortOrder,omitempty"`
	// The storefront ID of the collection.
	StorefrontID null.String `json:"storefrontId,omitempty"`
	// The theme template used when viewing this collection in a store.
	TemplateSuffix *null.String `json:"templateSuffix,omitempty"`
	// The title of the collection.
	Title null.String `json:"title,omitempty"`
	// The translations associated with the resource.
	Translations []*PublishedTranslation `json:"translations,omitempty"`
	// The list of channels that the resource is not published to.
	UnpublishedChannels *ChannelConnection `json:"unpublishedChannels,omitempty"`
	// The list of publications that the resource is not published to.
	UnpublishedPublications *PublicationConnection `json:"unpublishedPublications,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the collection was last modified.
	UpdatedAt null.String `json:"updatedAt,omitempty"`
}

func (Collection) IsHasMetafields()            {}
func (Collection) IsNode()                     {}
func (Collection) IsPublishable()              {}
func (Collection) IsHasPublishedTranslations() {}

// Return type for `collectionAddProducts` mutation.
type CollectionAddProductsPayload struct {
	// The updated collection.
	Collection *Collection `json:"collection,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple Collections.
type CollectionConnection struct {
	// A list of edges.
	Edges []*CollectionEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `collectionCreate` mutation.
type CollectionCreatePayload struct {
	// The collection that has been created.
	Collection *Collection `json:"collection,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Specifies the collection to delete.
type CollectionDeleteInput struct {
	// The ID of the collection to be deleted.
	ID null.String `json:"id,omitempty"`
}

// Return type for `collectionDelete` mutation.
type CollectionDeletePayload struct {
	// The ID of the collection that was deleted.
	DeletedCollectionID *null.String `json:"deletedCollectionId,omitempty"`
	// The shop associated with the collection.
	Shop *Shop `json:"shop,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Collection and a cursor during pagination.
type CollectionEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of CollectionEdge.
	Node *Collection `json:"node,omitempty"`
}

// Specifies the input fields required to create a collection.
type CollectionInput struct {
	// The description of the collection, in HTML format.
	DescriptionHTML *null.String `json:"descriptionHtml,omitempty"`
	// A unique human-friendly string for the collection. Automatically generated from the collection's title.
	Handle *null.String `json:"handle,omitempty"`
	// Specifies the collection to update or create a new collection if absent.
	ID *null.String `json:"id,omitempty"`
	// The image associated with the collection.
	Image *ImageInput `json:"image,omitempty"`
	// Initial list of collection products. Only valid with `productCreate` and without rules.
	Products []null.String `json:"products,omitempty"`
	// Initial list of collection publications. Only valid with `productCreate`. This argument is deprecated: Use PublishablePublish instead.
	Publications []*CollectionPublicationInput `json:"publications,omitempty"`
	// The private metafields to associated with this product.
	PrivateMetafields []*PrivateMetafieldInput `json:"privateMetafields,omitempty"`
	// The rules used to assign products to the collection.
	RuleSet *CollectionRuleSetInput `json:"ruleSet,omitempty"`
	// The theme template used when viewing the collection in a store.
	TemplateSuffix *null.String `json:"templateSuffix,omitempty"`
	// The order in which the collection's products are sorted.
	SortOrder *CollectionSortOrder `json:"sortOrder,omitempty"`
	// Required for creating a new collection.
	Title *null.String `json:"title,omitempty"`
	// The metafields to associate with this collection.
	Metafields []*MetafieldInput `json:"metafields,omitempty"`
	// SEO information for the collection.
	Seo *SEOInput `json:"seo,omitempty"`
	// Indicates whether a redirect is required after a new handle has been provided.
	// If true, then the old handle is redirected to the new one automatically.
	RedirectNewHandle *bool `json:"redirectNewHandle,omitempty"`
}

// Represents the publications where a collection is published.
type CollectionPublication struct {
	// The channel where the collection will be published.
	Channel *Channel `json:"channel,omitempty"`
	// The collection to be published on the publication.
	Collection *Collection `json:"collection,omitempty"`
	// Whether the publication is published or not.
	IsPublished bool `json:"isPublished,omitempty"`
	// The publication where the collection will be published.
	Publication *Publication `json:"publication,omitempty"`
	// The date that the publication was or is going to be published.
	PublishDate null.String `json:"publishDate,omitempty"`
}

// An auto-generated type for paginating through multiple CollectionPublications.
type CollectionPublicationConnection struct {
	// A list of edges.
	Edges []*CollectionPublicationEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CollectionPublication and a cursor during pagination.
type CollectionPublicationEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of CollectionPublicationEdge.
	Node *CollectionPublication `json:"node,omitempty"`
}

// Specifies the publications to which a collection will be published.
type CollectionPublicationInput struct {
	// The ID of the publication.
	PublicationID *null.String `json:"publicationId,omitempty"`
	// The ID of the channel. This argument is deprecated: Use publicationId instead.
	ChannelID *null.String `json:"channelId,omitempty"`
	// This argument is deprecated: Use publicationId instead.
	ChannelHandle *null.String `json:"channelHandle,omitempty"`
}

// Specifies a collection to publish and the sales channels to publish it to.
type CollectionPublishInput struct {
	// The collection to create or update publications for.
	ID null.String `json:"id,omitempty"`
	// The channels where the collection will be published.
	CollectionPublications []*CollectionPublicationInput `json:"collectionPublications,omitempty"`
}

// Return type for `collectionPublish` mutation.
type CollectionPublishPayload struct {
	// The published collection.
	Collection *Collection `json:"collection,omitempty"`
	// The channels where the collection has been published.
	CollectionPublications []*CollectionPublication `json:"collectionPublications,omitempty"`
	// The shop associated with the collection.
	Shop *Shop `json:"shop,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `collectionRemoveProducts` mutation.
type CollectionRemoveProductsPayload struct {
	// The asynchronous job removing the products.
	Job *Job `json:"job,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `collectionReorderProducts` mutation.
type CollectionReorderProductsPayload struct {
	// The asynchronous job reordering the products.
	Job *Job `json:"job,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Represents at rule that's used to assign products to a collection.
type CollectionRule struct {
	// The attribute that the rule focuses on (for example, `title` or `product_type`).
	Column CollectionRuleColumn `json:"column,omitempty"`
	// The value that the operator is applied to (for example, `Hats`).
	Condition null.String `json:"condition,omitempty"`
	// The type of operator that the rule is based on (for example, `equals`, `contains`, or `not_equals`).
	Relation CollectionRuleRelation `json:"relation,omitempty"`
}

// Collections may use rules to automatically include the matching products. This defines restrictions for a type of rule.
type CollectionRuleConditions struct {
	// Allowed relations of the rule.
	AllowedRelations []CollectionRuleRelation `json:"allowedRelations,omitempty"`
	// Most commonly used relation for this rule.
	DefaultRelation CollectionRuleRelation `json:"defaultRelation,omitempty"`
	// Type of the rule.
	RuleType CollectionRuleColumn `json:"ruleType,omitempty"`
}

// Specifies a rule to associate with a collection.
type CollectionRuleInput struct {
	// The attribute that the rule focuses on (for example, `title` or `product_type`).
	Column CollectionRuleColumn `json:"column,omitempty"`
	// The type of operator that the rule is based on (for example, `equals`, `contains`, or `not_equals`).
	Relation CollectionRuleRelation `json:"relation,omitempty"`
	// The value that the operator is applied to (for example, `Hats`).
	Condition null.String `json:"condition,omitempty"`
}

// The set of rules that are used to determine which products are included in the collection.
type CollectionRuleSet struct {
	// Whether products must match any or all of the rules to be included in the collection.
	// If true, then products must match one or more of the rules to be included in the collection.
	// If false, then products must match all of the rules to be included in the collection.
	AppliedDisjunctively bool `json:"appliedDisjunctively,omitempty"`
	// The rules used to assign products to the collection.
	Rules []*CollectionRule `json:"rules,omitempty"`
}

// Specifies a rule set for the collection.
type CollectionRuleSetInput struct {
	// Whether products must match any or all of the rules to be included in the collection.
	// If true, then products must match one or more of the rules to be included in the collection.
	// If false, then products must match all of the rules to be included in the collection.
	AppliedDisjunctively bool `json:"appliedDisjunctively,omitempty"`
	// The rules used to assign products to the collection.
	Rules []*CollectionRuleInput `json:"rules,omitempty"`
}

// Specifies the collection to unpublish and the sales channels to remove it from.
type CollectionUnpublishInput struct {
	// The collection to create or update publications for.
	ID null.String `json:"id,omitempty"`
	// The channels where the collection is published.
	CollectionPublications []*CollectionPublicationInput `json:"collectionPublications,omitempty"`
}

// Return type for `collectionUnpublish` mutation.
type CollectionUnpublishPayload struct {
	// The collection that has been unpublished.
	Collection *Collection `json:"collection,omitempty"`
	// The shop associated with the collection.
	Shop *Shop `json:"shop,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `collectionUpdate` mutation.
type CollectionUpdatePayload struct {
	// The updated collection.
	Collection *Collection `json:"collection,omitempty"`
	// The asynchronous job updating the products based on the new rule set.
	Job *Job `json:"job,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Comment events are generated by staff members of a shop.
// They are created when a staff member adds a comment to the timeline of an order, draft order, customer, or transfer.
type CommentEvent struct {
	// The name of the app that created the event. Returns null when the event originates from the Shopify admin.
	AppTitle *null.String `json:"appTitle,omitempty"`
	// The attachments associated with the comment event.
	Attachments []*CommentEventAttachment `json:"attachments,omitempty"`
	// Whether the event was created by an app.
	AttributeToApp bool `json:"attributeToApp,omitempty"`
	// Whether the event was caused by an admin user.
	AttributeToUser bool `json:"attributeToUser,omitempty"`
	// Whether the comment event can be deleted. If true, then the comment event can be deleted.
	CanDelete bool `json:"canDelete,omitempty"`
	// Whether the comment event can be edited. If true, then the comment event can be edited.
	CanEdit bool `json:"canEdit,omitempty"`
	// The date and time when the event was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// Whether the event is critical.
	CriticalAlert bool `json:"criticalAlert,omitempty"`
	// Whether the comment event has been edited. If true, then the comment event has been edited.
	Edited bool `json:"edited,omitempty"`
	// The references associated with the comment event.
	Embed CommentEventEmbed `json:"embed,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Human readable text that describes the event.
	Message null.String `json:"message,omitempty"`
	// The raw body of the comment event.
	RawMessage null.String `json:"rawMessage,omitempty"`
	// The subject of the comment event.
	Subject CommentEventSubject `json:"subject,omitempty"`
}

func (CommentEvent) IsNode()  {}
func (CommentEvent) IsEvent() {}

// A file attachment associated to a comment event.
type CommentEventAttachment struct {
	// The file extension of the comment event attachment, indicating the file format.
	FileExtension *null.String `json:"fileExtension,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The image attached to the comment event.
	Image *Image `json:"image,omitempty"`
	// The filename of the comment event attachment.
	Name null.String `json:"name,omitempty"`
	// The size of the attachment.
	Size int `json:"size,omitempty"`
	// The URL of the attachment.
	URL null.String `json:"url,omitempty"`
}

// Countries that have been defined in shipping zones for the shop.
type CountriesInShippingZones struct {
	// Countries that have been defined in shipping zones.
	CountryCodes []CountryCode `json:"countryCodes,omitempty"`
	// Whether 'Rest of World' has been defined in any shipping zones.
	IncludeRestOfWorld bool `json:"includeRestOfWorld,omitempty"`
}

// Holds the country specific harmonized system code and the country ISO code.
type CountryHarmonizedSystemCode struct {
	// Country ISO code.
	CountryCode CountryCode `json:"countryCode,omitempty"`
	// Country specific harmonized system code.
	HarmonizedSystemCode null.String `json:"harmonizedSystemCode,omitempty"`
}

// An auto-generated type for paginating through multiple CountryHarmonizedSystemCodes.
type CountryHarmonizedSystemCodeConnection struct {
	// A list of edges.
	Edges []*CountryHarmonizedSystemCodeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CountryHarmonizedSystemCode and a cursor during pagination.
type CountryHarmonizedSystemCodeEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of CountryHarmonizedSystemCodeEdge.
	Node *CountryHarmonizedSystemCode `json:"node,omitempty"`
}

// Holds the country specific harmonized system code and the country ISO code.
type CountryHarmonizedSystemCodeInput struct {
	// Country specific harmonized system code.
	HarmonizedSystemCode null.String `json:"harmonizedSystemCode,omitempty"`
	// Country ISO code.
	CountryCode CountryCode `json:"countryCode,omitempty"`
}

// Specifies the input fields required to create a media object.
type CreateMediaInput struct {
	// The original source of the media object. May be an external URL or signed upload URL.
	OriginalSource null.String `json:"originalSource,omitempty"`
	// The alt text associated to the media.
	Alt *null.String `json:"alt,omitempty"`
	// The media content type.
	MediaContentType MediaContentType `json:"mediaContentType,omitempty"`
}

// Currency formats.
type CurrencyFormats struct {
	// HTML without currency.
	MoneyFormat null.String `json:"moneyFormat,omitempty"`
	// Email without currency.
	MoneyInEmailsFormat null.String `json:"moneyInEmailsFormat,omitempty"`
	// HTML with currency.
	MoneyWithCurrencyFormat null.String `json:"moneyWithCurrencyFormat,omitempty"`
	// Email with currency.
	MoneyWithCurrencyInEmailsFormat null.String `json:"moneyWithCurrencyInEmailsFormat,omitempty"`
}

// Represents a currency setting.
type CurrencySetting struct {
	// The currency's ISO code.
	CurrencyCode CurrencyCode `json:"currencyCode,omitempty"`
	// The full name of the currency.
	CurrencyName null.String `json:"currencyName,omitempty"`
	// Flag describing whether the currency is enabled.
	Enabled bool `json:"enabled,omitempty"`
	// Date and time when the exchange rate for the currency was last modified.
	RateUpdatedAt *null.String `json:"rateUpdatedAt,omitempty"`
}

// An auto-generated type for paginating through multiple CurrencySettings.
type CurrencySettingConnection struct {
	// A list of edges.
	Edges []*CurrencySettingEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CurrencySetting and a cursor during pagination.
type CurrencySettingEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of CurrencySettingEdge.
	Node *CurrencySetting `json:"node,omitempty"`
}

// Represents information about a customer of the shop, such as the customer's contact details, their order
// history, and whether they've agreed to receive email marketing.
type Customer struct {
	// Whether the customer has agreed to receive marketing materials.
	AcceptsMarketing bool `json:"acceptsMarketing,omitempty"`
	// The date and time when the customer consented or objected to receiving marketing material by email.
	AcceptsMarketingUpdatedAt null.String `json:"acceptsMarketingUpdatedAt,omitempty"`
	// A list of addresses associated with the customer.
	Addresses []*MailingAddress `json:"addresses,omitempty"`
	// The average amount that the customer spent per order.
	AverageOrderAmount *null.String `json:"averageOrderAmount,omitempty"`
	// The average amount that the customer spent per order.
	AverageOrderAmountV2 *MoneyV2 `json:"averageOrderAmountV2,omitempty"`
	// Whether the merchant can delete the customer from their store.
	//
	// A customer can be deleted from a store only if they have not yet made an order. After a customer makes an
	// order, they can't be deleted from a store.
	CanDelete bool `json:"canDelete,omitempty"`
	// The date and time when the customer was added to the store.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The default address associated with the customer.
	DefaultAddress *MailingAddress `json:"defaultAddress,omitempty"`
	// The full name of the customer, based on the values for first_name and last_name. If the first_name and
	// last_name are not available, then this falls back to the customer's email address, and if that is not available, the customer's phone number.
	DisplayName null.String `json:"displayName,omitempty"`
	// The customer's email address.
	Email *null.String `json:"email,omitempty"`
	// A list of events associated with the customer.
	Events *EventConnection `json:"events,omitempty"`
	// The customer's first name.
	FirstName *null.String `json:"firstName,omitempty"`
	// Whether the customer has a note associated with them.
	HasNote bool `json:"hasNote,omitempty"`
	// Whether the merchant has added timeline comments about the customer on the customer's page.
	HasTimelineComment bool `json:"hasTimelineComment,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The image associated with the customer.
	Image *Image `json:"image,omitempty"`
	// The customer's last name.
	LastName *null.String `json:"lastName,omitempty"`
	// The customer's last order.
	LastOrder *Order `json:"lastOrder,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// The amount of time since the customer was first added to the store.
	//
	// Example: 'about 12 years'.
	LifetimeDuration null.String `json:"lifetimeDuration,omitempty"`
	// The customer's locale.
	Locale null.String `json:"locale,omitempty"`
	// The marketing subscription opt-in level (as described by the M3AAWG best practices guideline) that the
	// customer gave when they consented to receive marketing material by email.
	//
	// If the customer does not accept email marketing, then this property will be null.
	MarketingOptInLevel *CustomerMarketingOptInLevel `json:"marketingOptInLevel,omitempty"`
	// The metafield associated with the resource.
	Metafield *Metafield `json:"metafield,omitempty"`
	// A paginated list of metafields associated with the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// A unique identifier for the customer that's used with Multipass login.
	MultipassIdentifier *null.String `json:"multipassIdentifier,omitempty"`
	// A note about the customer.
	Note *null.String `json:"note,omitempty"`
	// A list of the customer's orders.
	Orders *OrderConnection `json:"orders,omitempty"`
	// The number of orders that the customer has made at the store in their lifetime.
	OrdersCount null.String `json:"ordersCount,omitempty"`
	// A list of the customer's payment methods.
	PaymentMethods *CustomerPaymentMethodConnection `json:"paymentMethods,omitempty"`
	// The customer's phone number.
	Phone *null.String `json:"phone,omitempty"`
	// Returns a private metafield found by namespace and key.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// List of private metafields.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// Possible subscriber states of a customer defined by their subscription contracts.
	ProductSubscriberStatus CustomerProductSubscriberStatus `json:"productSubscriberStatus,omitempty"`
	// The state of the customer's account with the shop.
	State CustomerState `json:"state,omitempty"`
	// A list of the customer's subscription contracts.
	SubscriptionContracts *SubscriptionContractConnection `json:"subscriptionContracts,omitempty"`
	// A comma separated list of tags that have been added to the customer.
	Tags []null.String `json:"tags,omitempty"`
	// Whether the customer is exempt from being charged taxes on their orders.
	TaxExempt bool `json:"taxExempt,omitempty"`
	// The list of tax exemptions applied to the customer.
	TaxExemptions []TaxExemption `json:"taxExemptions,omitempty"`
	// The total amount that the customer has spent on orders in their lifetime.
	TotalSpent null.String `json:"totalSpent,omitempty"`
	// The total amount that the customer has spent on orders in their lifetime.
	TotalSpentV2 *MoneyV2 `json:"totalSpentV2,omitempty"`
	// The date and time when the customer was last updated.
	UpdatedAt null.String `json:"updatedAt,omitempty"`
	// Whether the email address is formatted correctly. This does not
	// guarantee that the email address actually exists.
	ValidEmailAddress bool `json:"validEmailAddress,omitempty"`
	// Whether the customer has verified their email address. Defaults to `true` if the customer is created through the Shopify admin or API.
	VerifiedEmail bool `json:"verifiedEmail,omitempty"`
}

func (Customer) IsCommentEventEmbed()      {}
func (Customer) IsNode()                   {}
func (Customer) IsCommentEventSubject()    {}
func (Customer) IsHasMetafields()          {}
func (Customer) IsLegacyInteroperability() {}
func (Customer) IsHasEvents()              {}

// Return type for `customerAddTaxExemptions` mutation.
type CustomerAddTaxExemptionsPayload struct {
	// The updated customer.
	Customer *Customer `json:"customer,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple Customers.
type CustomerConnection struct {
	// A list of edges.
	Edges []*CustomerEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `customerCreate` mutation.
type CustomerCreatePayload struct {
	// The created customer.
	Customer *Customer `json:"customer,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Represents a card instrument for customer payment method.
type CustomerCreditCard struct {
	// The billing address of the card.
	BillingAddress *CustomerCreditCardBillingAddress `json:"billingAddress,omitempty"`
	// The brand of the card.
	Brand null.String `json:"brand,omitempty"`
	// Whether the card is about to expire.
	ExpiresSoon bool `json:"expiresSoon,omitempty"`
	// The expiry month of the card.
	ExpiryMonth int `json:"expiryMonth,omitempty"`
	// The expiry year of the card.
	ExpiryYear int `json:"expiryYear,omitempty"`
	// The card's BIN number.
	FirstDigits *null.String `json:"firstDigits,omitempty"`
	// The payment method can be revoked if there are no active subscription contracts.
	IsRevocable bool `json:"isRevocable,omitempty"`
	// The last 4 digits of the card.
	LastDigits null.String `json:"lastDigits,omitempty"`
	// The masked card number with only the last 4 digits displayed.
	MaskedNumber null.String `json:"maskedNumber,omitempty"`
	// The name of the card holder.
	Name null.String `json:"name,omitempty"`
}

func (CustomerCreditCard) IsCustomerPaymentInstrument() {}

// The billing address of a credit card payment instrument.
type CustomerCreditCardBillingAddress struct {
	// The first line of the address. Typically the street address or PO Box number.
	Address1 *null.String `json:"address1,omitempty"`
	// The name of the city, district, village, or town.
	City *null.String `json:"city,omitempty"`
	// The name of the country.
	Country *null.String `json:"country,omitempty"`
	// The two-letter code for the country of the address.
	// For example, US.
	CountryCode *CountryCode `json:"countryCode,omitempty"`
	// The region of the address, such as the province, state, or district.
	Province *null.String `json:"province,omitempty"`
	// The two-letter code for the region.
	// For example, ON.
	ProvinceCode *null.String `json:"provinceCode,omitempty"`
	// The zip or postal code of the address.
	Zip *null.String `json:"zip,omitempty"`
}

// Specifies the customer to delete.
type CustomerDeleteInput struct {
	// The ID of the customer to delete.
	ID null.String `json:"id,omitempty"`
}

// Return type for `customerDelete` mutation.
type CustomerDeletePayload struct {
	// ID of the deleted customer.
	DeletedCustomerID *null.String `json:"deletedCustomerId,omitempty"`
	// Shop of the deleted customer.
	Shop *Shop `json:"shop,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Customer and a cursor during pagination.
type CustomerEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of CustomerEdge.
	Node *Customer `json:"node,omitempty"`
}

// Return type for `customerGenerateAccountActivationUrl` mutation.
type CustomerGenerateAccountActivationURLPayload struct {
	// The newly generated account activation URL.
	AccountActivationURL *null.String `json:"accountActivationUrl,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Provides the fields and values to use when creating or updating a customer.
type CustomerInput struct {
	// Whether the customer has consented to receive marketing material via email.
	AcceptsMarketing *bool `json:"acceptsMarketing,omitempty"`
	// The date and time when the customer consented or objected to receiving marketing material by email. Set
	// whenever the customer consents or objects to marketing material.
	AcceptsMarketingUpdatedAt *null.String `json:"acceptsMarketingUpdatedAt,omitempty"`
	// An input that specifies addresses for a customer.
	Addresses []*MailingAddressInput `json:"addresses,omitempty"`
	// The unique email address of the customer.
	Email *null.String `json:"email,omitempty"`
	// The customer's first name.
	FirstName *null.String `json:"firstName,omitempty"`
	// Specifies the customer to update, or creates a new customer if one doesn't exist.
	ID *null.String `json:"id,omitempty"`
	// The customer's last name.
	LastName *null.String `json:"lastName,omitempty"`
	// The customer's locale.
	Locale *null.String `json:"locale,omitempty"`
	// The marketing subscription opt-in level (as described by the M3AAWG best practices guideline) that was
	// enabled when the customer consented to receiving marketing material by email.
	MarketingOptInLevel *CustomerMarketingOptInLevel `json:"marketingOptInLevel,omitempty"`
	// Attaches additional metadata to the customer.
	Metafields []*MetafieldInput `json:"metafields,omitempty"`
	// A note about the customer.
	Note *null.String `json:"note,omitempty"`
	// The unique phone number for the customer.
	Phone *null.String `json:"phone,omitempty"`
	// The private metafields to associated with this product.
	PrivateMetafields []*PrivateMetafieldInput `json:"privateMetafields,omitempty"`
	// A comma separated list of tags that have been added to the customer.
	Tags []null.String `json:"tags,omitempty"`
	// Whether the customer is exempt from paying taxes on their order.
	TaxExempt *bool `json:"taxExempt,omitempty"`
	// The list of tax exemptions to apply to the customer.
	TaxExemptions []TaxExemption `json:"taxExemptions,omitempty"`
}

// Represents a customer's activity on a shop's online store.
type CustomerJourney struct {
	// The position of the current order within the customer's order history.
	CustomerOrderIndex int `json:"customerOrderIndex,omitempty"`
	// The amount of days between first session and order creation date. First session represents first session since the last order, or first session within the 30 day attribution window, if more than 30 days has passed since the last order.
	DaysToConversion int `json:"daysToConversion,omitempty"`
	// The customer's first session going into the shop.
	FirstVisit *CustomerVisit `json:"firstVisit,omitempty"`
	// The last session before an order is made.
	LastVisit *CustomerVisit `json:"lastVisit,omitempty"`
	// Events preceding a customer order, such as shop sessions.
	Moments []CustomerMoment `json:"moments,omitempty"`
}

// Represents a customer's activity on a shop's online store.
type CustomerJourneySummary struct {
	// The position of the current order within the customer's order history. Test orders aren't included.
	CustomerOrderIndex *int `json:"customerOrderIndex,omitempty"`
	// The number of days between the first session and the order creation date. The first session represents the first session since the last order, or the first session within the 30 day attribution window, if more than 30 days have passed since the last order.
	DaysToConversion *int `json:"daysToConversion,omitempty"`
	// The customer's first session going into the shop.
	FirstVisit *CustomerVisit `json:"firstVisit,omitempty"`
	// The last session before an order is made.
	LastVisit *CustomerVisit `json:"lastVisit,omitempty"`
	// The events preceding a customer order, such as shop sessions.
	Moments *CustomerMomentConnection `json:"moments,omitempty"`
	// The total number of customer moments associated with this order. Returns null if the order is still in the process of being attributed.
	MomentsCount *int `json:"momentsCount,omitempty"`
	// Whether or not the attributed sessions for the order have been created yet.
	Ready bool `json:"ready,omitempty"`
}

// An auto-generated type for paginating through multiple CustomerMoments.
type CustomerMomentConnection struct {
	// A list of edges.
	Edges []*CustomerMomentEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one CustomerMoment and a cursor during pagination.
type CustomerMomentEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of CustomerMomentEdge.
	Node CustomerMoment `json:"node,omitempty"`
}

// A customer's payment method.
type CustomerPaymentMethod struct {
	// The customer to whom the payment method belongs.
	Customer *Customer `json:"customer,omitempty"`
	// The ID of this payment method.
	ID null.String `json:"id,omitempty"`
	// The instrument for this payment method.
	Instrument CustomerPaymentInstrument `json:"instrument,omitempty"`
	// The time that the payment method was revoked.
	RevokedAt *null.String `json:"revokedAt,omitempty"`
	// List Subscription Contracts.
	SubscriptionContracts *SubscriptionContractConnection `json:"subscriptionContracts,omitempty"`
}

func (CustomerPaymentMethod) IsNode() {}

// An auto-generated type for paginating through multiple CustomerPaymentMethods.
type CustomerPaymentMethodConnection struct {
	// A list of edges.
	Edges []*CustomerPaymentMethodEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `customerPaymentMethodCreditCardCreate` mutation.
type CustomerPaymentMethodCreditCardCreatePayload struct {
	// The customer payment method.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `customerPaymentMethodCreditCardUpdate` mutation.
type CustomerPaymentMethodCreditCardUpdatePayload struct {
	// The customer payment method.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one CustomerPaymentMethod and a cursor during pagination.
type CustomerPaymentMethodEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of CustomerPaymentMethodEdge.
	Node *CustomerPaymentMethod `json:"node,omitempty"`
}

// Return type for `customerPaymentMethodRemoteCreditCardCreate` mutation.
type CustomerPaymentMethodRemoteCreditCardCreatePayload struct {
	// The customer payment method.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*CustomerPaymentMethodUserError `json:"userErrors,omitempty"`
}

// Return type for `customerPaymentMethodRevoke` mutation.
type CustomerPaymentMethodRevokePayload struct {
	// The ID of the revoked customer payment method.
	RevokedCustomerPaymentMethodID *null.String `json:"revokedCustomerPaymentMethodId,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `customerPaymentMethodSendUpdateEmail` mutation.
type CustomerPaymentMethodSendUpdateEmailPayload struct {
	// The customer to whom an update payment method email was sent.
	Customer *Customer `json:"customer,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Represents an error in the input of a mutation.
type CustomerPaymentMethodUserError struct {
	// Error code to uniquely identify the error.
	Code *CustomerPaymentMethodUserErrorCode `json:"code,omitempty"`
	// Path to the input field which caused the error.
	Field []null.String `json:"field,omitempty"`
	// The error message.
	Message null.String `json:"message,omitempty"`
}

func (CustomerPaymentMethodUserError) IsDisplayableError() {}

// Return type for `customerRemoveTaxExemptions` mutation.
type CustomerRemoveTaxExemptionsPayload struct {
	// The updated customer.
	Customer *Customer `json:"customer,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `customerReplaceTaxExemptions` mutation.
type CustomerReplaceTaxExemptionsPayload struct {
	// The updated customer.
	Customer *Customer `json:"customer,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `customerUpdateDefaultAddress` mutation.
type CustomerUpdateDefaultAddressPayload struct {
	// The customer whose address was updated.
	Customer *Customer `json:"customer,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `customerUpdate` mutation.
type CustomerUpdatePayload struct {
	// The updated customer.
	Customer *Customer `json:"customer,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Information about a customer's session on a shop's online store.
type CustomerVisit struct {
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// URL of the first page the customer landed on for the session.
	LandingPage *null.String `json:"landingPage,omitempty"`
	// Landing page information with URL linked in HTML. For example, the first page the customer visited was store.myshopify.com/products/1.
	LandingPageHTML *null.String `json:"landingPageHtml,omitempty"`
	// Represent actions taken by an app, on behalf of a merchant,
	// to market Shopify resources such as products, collections, and discounts.
	MarketingEvent *MarketingEvent `json:"marketingEvent,omitempty"`
	// When the customer moment occurred.
	OccurredAt null.String `json:"occurredAt,omitempty"`
	// Marketing referral code from the link that the customer clicked to visit the store.
	// Supports the following URL attributes: _ref_, _source_, or _r_.
	// For example, if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.
	ReferralCode *null.String `json:"referralCode,omitempty"`
	// Referral information with URLs linked in HTML.
	ReferralInfoHTML null.String `json:"referralInfoHtml,omitempty"`
	// Webpage where the customer clicked a link that sent them to the online store.
	// For example, _https://randomblog.com/page1_ or _android-app://com.google.android.gm_.
	ReferrerURL *null.String `json:"referrerUrl,omitempty"`
	// Source from which the customer visited the store, such as a platform (Facebook, Google), email, direct,
	// a website domain, QR code, or unknown.
	Source null.String `json:"source,omitempty"`
	// Describes the source explicitly for first or last session.
	SourceDescription *null.String `json:"sourceDescription,omitempty"`
	// Type of marketing tactic.
	SourceType *MarketingTactic `json:"sourceType,omitempty"`
	// A set of UTM parameters gathered from the URL parameters of the referrer.
	UtmParameters *UTMParameters `json:"utmParameters,omitempty"`
}

func (CustomerVisit) IsCustomerMoment() {}
func (CustomerVisit) IsNode()           {}

// Deletion events chronicle the destruction of resources (e.g. products and collections).
// Once deleted, the deletion event is the only trace of the original's existence,
// as the resource itself has been removed and can no longer be accessed.
type DeletionEvent struct {
	// The date and time when the deletion event for the related resource was generated.
	OccurredAt null.String `json:"occurredAt,omitempty"`
	// The id of the resource that was deleted.
	SubjectID null.String `json:"subjectId,omitempty"`
	// The type of resource that was deleted.
	SubjectType DeletionEventSubjectType `json:"subjectType,omitempty"`
}

// An auto-generated type for paginating through multiple DeletionEvents.
type DeletionEventConnection struct {
	// A list of edges.
	Edges []*DeletionEventEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DeletionEvent and a cursor during pagination.
type DeletionEventEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of DeletionEventEdge.
	Node *DeletionEvent `json:"node,omitempty"`
}

// The service and the countries they are available for.
type DeliveryAvailableService struct {
	// The countries the service provider ships to.
	Countries *DeliveryCountryCodesOrRestOfWorld `json:"countries,omitempty"`
	// The name of the service.
	Name null.String `json:"name,omitempty"`
}

// Information about a carrier or service provider.
type DeliveryCarrierService struct {
	// Services offered for given destinations.
	AvailableServicesForCountries []*DeliveryAvailableService `json:"availableServicesForCountries,omitempty"`
	// The properly formatted name of the service provider, ready to display.
	FormattedName *null.String `json:"formattedName,omitempty"`
	// The logo of the service provider.
	Icon *Image `json:"icon,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The name of the service provider.
	Name *null.String `json:"name,omitempty"`
}

func (DeliveryCarrierService) IsNode() {}

// A carrier services and their set of shop locations that can be used.
type DeliveryCarrierServiceAndLocations struct {
	// The carrier service.
	CarrierService *DeliveryCarrierService `json:"carrierService,omitempty"`
	// The locations that support this carrier service.
	Locations []*Location `json:"locations,omitempty"`
}

// A condition that must pass for a method definition to be applied to an order.
type DeliveryCondition struct {
	// The criteria (weight or price) that the field must meet based on the operator.
	ConditionCriteria DeliveryConditionCriteria `json:"conditionCriteria,omitempty"`
	// The field to compare the criteria unit against, using the operator.
	Field DeliveryConditionField `json:"field,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The operator to compare the field and criteria.
	Operator DeliveryConditionOperator `json:"operator,omitempty"`
}

func (DeliveryCondition) IsNode() {}

// A country that is used to define a zone.
type DeliveryCountry struct {
	// The ISO 3166-1 alpha-2 country code of this country and a flag indicating Rest Of World.
	Code *DeliveryCountryCodeOrRestOfWorld `json:"code,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The name of the country.
	Name null.String `json:"name,omitempty"`
	// The regions associated with this country.
	Provinces []*DeliveryProvince `json:"provinces,omitempty"`
	// The name of the country, translated based on the user locale.
	TranslatedName null.String `json:"translatedName,omitempty"`
}

func (DeliveryCountry) IsNode() {}

// A country with the name of the zone.
type DeliveryCountryAndZone struct {
	// The country in the delivery zone.
	Country *DeliveryCountry `json:"country,omitempty"`
	// The name of the delivery zone.
	Zone null.String `json:"zone,omitempty"`
}

// The ISO 3166-1 alpha-2 country code and a flag indicating Rest Of World.
type DeliveryCountryCodeOrRestOfWorld struct {
	// The country code.
	CountryCode *CountryCode `json:"countryCode,omitempty"`
	// Indicates if 'Rest of World' is applied.
	RestOfWorld bool `json:"restOfWorld,omitempty"`
}

// A list of ISO 3166-1 alpha-2 country codes or the 'Rest of World'.
type DeliveryCountryCodesOrRestOfWorld struct {
	// List of applicable country codes.
	CountryCodes []CountryCode `json:"countryCodes,omitempty"`
	// Indicates if 'Rest of World' is applied.
	RestOfWorld bool `json:"restOfWorld,omitempty"`
}

// Input fields to specify a country.
type DeliveryCountryInput struct {
	// The country code of the country.
	Code *CountryCode `json:"code,omitempty"`
	// Use Rest of World as the country.
	RestOfWorld *bool `json:"restOfWorld,omitempty"`
	// The regions associated with this country.
	Provinces []*DeliveryProvinceInput `json:"provinces,omitempty"`
	// Associate all available provinces with this country.
	IncludeAllProvinces *bool `json:"includeAllProvinces,omitempty"`
}

// Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned.
type DeliveryLegacyModeBlocked struct {
	// Whether the shop can convert to full multi-location delivery profiles mode.
	Blocked bool `json:"blocked,omitempty"`
	// The reasons why the shop is blocked from converting to full multi-location delivery profiles mode.
	Reasons []DeliveryLegacyModeBlockedReason `json:"reasons,omitempty"`
}

// A location group is a collection of active locations that share zone and delivery methods across delivery profiles.
type DeliveryLocationGroup struct {
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// List of active locations that are part of this location group.
	Locations *LocationConnection `json:"locations,omitempty"`
}

func (DeliveryLocationGroup) IsNode() {}

// Links a location group and zone with the associated method definitions in a delivery profile.
type DeliveryLocationGroupZone struct {
	// The number of method definitions in this zone.
	MethodDefinitionCounts *DeliveryMethodDefinitionCounts `json:"methodDefinitionCounts,omitempty"`
	// The method definitions associated to a zone and location group in a delivery profile.
	MethodDefinitions *DeliveryMethodDefinitionConnection `json:"methodDefinitions,omitempty"`
	// The zone associated to a location group in a delivery profile.
	Zone *DeliveryZone `json:"zone,omitempty"`
}

// An auto-generated type for paginating through multiple DeliveryLocationGroupZones.
type DeliveryLocationGroupZoneConnection struct {
	// A list of edges.
	Edges []*DeliveryLocationGroupZoneEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DeliveryLocationGroupZone and a cursor during pagination.
type DeliveryLocationGroupZoneEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of DeliveryLocationGroupZoneEdge.
	Node *DeliveryLocationGroupZone `json:"node,omitempty"`
}

// Input fields for a delivery zone associated to a location group and profile.
type DeliveryLocationGroupZoneInput struct {
	// Globally unique identifier of the Zone.
	ID *null.String `json:"id,omitempty"`
	// The name of the zone.
	Name *null.String `json:"name,omitempty"`
	// Countries to associate with the zone.
	Countries []*DeliveryCountryInput `json:"countries,omitempty"`
	// Method definitions to create.
	MethodDefinitionsToCreate []*DeliveryMethodDefinitionInput `json:"methodDefinitionsToCreate,omitempty"`
	// Method definitions to update.
	MethodDefinitionsToUpdate []*DeliveryMethodDefinitionInput `json:"methodDefinitionsToUpdate,omitempty"`
}

// Delivery method.
type DeliveryMethod struct {
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The type of the delivery method.
	MethodType DeliveryMethodType `json:"methodType,omitempty"`
}

func (DeliveryMethod) IsNode() {}

// A method definition describes the delivery rate and the conditions that must be met for the method to be applied.
type DeliveryMethodDefinition struct {
	// Whether this method definition is active.
	Active bool `json:"active,omitempty"`
	// The description of the method definition.
	Description *null.String `json:"description,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The method conditions that must pass for this method definition to be applied to an order.
	MethodConditions []*DeliveryCondition `json:"methodConditions,omitempty"`
	// The name of the method definition.
	Name null.String `json:"name,omitempty"`
	// Provided rate for this method definition, from a rate definition or participant.
	RateProvider DeliveryRateProvider `json:"rateProvider,omitempty"`
}

func (DeliveryMethodDefinition) IsNode() {}

// An auto-generated type for paginating through multiple DeliveryMethodDefinitions.
type DeliveryMethodDefinitionConnection struct {
	// A list of edges.
	Edges []*DeliveryMethodDefinitionEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Then number of method definitions in a zone, separated into merchant-owned and participant definitions.
type DeliveryMethodDefinitionCounts struct {
	// The number of participant method definitions in the current zone.
	ParticipantDefinitionsCount int `json:"participantDefinitionsCount,omitempty"`
	// The number of merchant-defined method definitions in the current zone.
	RateDefinitionsCount int `json:"rateDefinitionsCount,omitempty"`
}

// An auto-generated type which holds one DeliveryMethodDefinition and a cursor during pagination.
type DeliveryMethodDefinitionEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of DeliveryMethodDefinitionEdge.
	Node *DeliveryMethodDefinition `json:"node,omitempty"`
}

// Input fields for a method definition.
type DeliveryMethodDefinitionInput struct {
	// Globally unique identifier of the method definition. Use only when updating a method definiton.
	ID *null.String `json:"id,omitempty"`
	// The name of the method definition.
	Name *null.String `json:"name,omitempty"`
	// The description of the method definition.
	Description *null.String `json:"description,omitempty"`
	// Whether or not to use this method definition during rate calculation.
	Active *bool `json:"active,omitempty"`
	// A rate definition to apply to the method definition.
	RateDefinition *DeliveryRateDefinitionInput `json:"rateDefinition,omitempty"`
	// A participant to apply to the method definition.
	Participant *DeliveryParticipantInput `json:"participant,omitempty"`
	// Weight conditions on the method definition.
	WeightConditionsToCreate []*DeliveryWeightConditionInput `json:"weightConditionsToCreate,omitempty"`
	// Price conditions on the method definition.
	PriceConditionsToCreate []*DeliveryPriceConditionInput `json:"priceConditionsToCreate,omitempty"`
	// Conditions on the method definition to update.
	ConditionsToUpdate []*DeliveryUpdateConditionInput `json:"conditionsToUpdate,omitempty"`
}

// A carrier-defined rate with possible merchant-defined fixed fee or percentage-of-rate fee.
type DeliveryParticipant struct {
	// Flag to indicate if new available services should be included.
	AdaptToNewServicesFlag bool `json:"adaptToNewServicesFlag,omitempty"`
	// Use this carrier service for this participant.
	CarrierService *DeliveryCarrierService `json:"carrierService,omitempty"`
	// The merchant-set fixed fee for this participant.
	FixedFee *MoneyV2 `json:"fixedFee,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Services offered by the participant and their active status.
	ParticipantServices []*DeliveryParticipantService `json:"participantServices,omitempty"`
	// The merchant-set percentage-of-rate fee for this participant.
	PercentageOfRateFee float64 `json:"percentageOfRateFee,omitempty"`
}

func (DeliveryParticipant) IsNode()                 {}
func (DeliveryParticipant) IsDeliveryRateProvider() {}

// Input fields for a participant.
type DeliveryParticipantInput struct {
	// Globally unique identifier of the participant.
	ID *null.String `json:"id,omitempty"`
	// Global identifier of the carrier service.
	CarrierServiceID *null.String `json:"carrierServiceId,omitempty"`
	// The merchant-set fixed fee for this participant.
	FixedFee *MoneyInput `json:"fixedFee,omitempty"`
	// The merchant-set percentage-of-rate fee for this participant.
	PercentageOfRateFee *float64 `json:"percentageOfRateFee,omitempty"`
	// Services offered by the participant and their active status.
	ParticipantServices []*DeliveryParticipantServiceInput `json:"participantServices,omitempty"`
	// Flag to indicate if new available services should be included.
	AdaptToNewServices *bool `json:"adaptToNewServices,omitempty"`
}

// A service provided by a participant.
type DeliveryParticipantService struct {
	// If the service is active or not.
	Active bool `json:"active,omitempty"`
	// Name of the service.
	Name null.String `json:"name,omitempty"`
}

// Input fields for a service provided by a participant.
type DeliveryParticipantServiceInput struct {
	// Name of the service.
	Name null.String `json:"name,omitempty"`
	// If the service is active or not.
	Active bool `json:"active,omitempty"`
}

// Input fields for the price-based conditions of a method definition.
type DeliveryPriceConditionInput struct {
	// The criteria for the price.
	Criteria *MoneyInput `json:"criteria,omitempty"`
	// The operator to use for comparison.
	Operator *DeliveryConditionOperator `json:"operator,omitempty"`
}

// How many product variants are in a profile. This count is capped at 500.
type DeliveryProductVariantsCount struct {
	// If the count has reached the cap of 500.
	Capped bool `json:"capped,omitempty"`
	// The product variant count.
	Count int `json:"count,omitempty"`
}

// A profile for multi-location, per-product delivery.
type DeliveryProfile struct {
	// The number of active shipping rates for the profile.
	ActiveMethodDefinitionsCount int `json:"activeMethodDefinitionsCount,omitempty"`
	// Whether this is the default profile.
	Default bool `json:"default,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Whether this shop has enabled legacy compatibility mode for delivery profiles.
	LegacyMode bool `json:"legacyMode,omitempty"`
	// The number of locations without rates defined.
	LocationsWithoutRatesCount int `json:"locationsWithoutRatesCount,omitempty"`
	// The name of the delivery profile.
	Name null.String `json:"name,omitempty"`
	// The number of active origin locations for the profile.
	OriginLocationCount int `json:"originLocationCount,omitempty"`
	// The number of product variants for this profile. The count for the default profile is not supported and will return -1.
	ProductVariantsCount int `json:"productVariantsCount,omitempty"`
	// How many product variants are in this profile.
	ProductVariantsCountV2 *DeliveryProductVariantsCount `json:"productVariantsCountV2,omitempty"`
	// The products and variants associated with this profile.
	ProfileItems *DeliveryProfileItemConnection `json:"profileItems,omitempty"`
	// The location groups and associated zones using this profile.
	ProfileLocationGroups []*DeliveryProfileLocationGroup `json:"profileLocationGroups,omitempty"`
	// Selling Plan Groups associated with the specified Delivery Profile.
	SellingPlanGroups *SellingPlanGroupConnection `json:"sellingPlanGroups,omitempty"`
	// List of locations that have not been assigned to a location group for this profile.
	UnassignedLocations []*Location `json:"unassignedLocations,omitempty"`
	// The number of countries with active rates to deliver to.
	ZoneCountryCount int `json:"zoneCountryCount,omitempty"`
}

func (DeliveryProfile) IsNode() {}

// An auto-generated type for paginating through multiple DeliveryProfiles.
type DeliveryProfileConnection struct {
	// A list of edges.
	Edges []*DeliveryProfileEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DeliveryProfile and a cursor during pagination.
type DeliveryProfileEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of DeliveryProfileEdge.
	Node *DeliveryProfile `json:"node,omitempty"`
}

// Input fields for a delivery profile.
type DeliveryProfileInput struct {
	// The name of the profile.
	Name *null.String `json:"name,omitempty"`
	// The location groups associated with the profile.
	ProfileLocationGroups []*DeliveryProfileLocationGroupInput `json:"profileLocationGroups,omitempty"`
	// The location groups to be created in the profile.
	LocationGroupsToCreate []*DeliveryProfileLocationGroupInput `json:"locationGroupsToCreate,omitempty"`
	// The location groups to be updated in the profile.
	LocationGroupsToUpdate []*DeliveryProfileLocationGroupInput `json:"locationGroupsToUpdate,omitempty"`
	// The location groups to be deleted in the profile.
	LocationGroupsToDelete []null.String `json:"locationGroupsToDelete,omitempty"`
	// The product variant ids to be associated with this profile.
	VariantsToAssociate []null.String `json:"variantsToAssociate,omitempty"`
	// The product variant ids to be dissociated from this profile and returned to the default profile.
	VariantsToDissociate []null.String `json:"variantsToDissociate,omitempty"`
	// Zones to delete.
	ZonesToDelete []null.String `json:"zonesToDelete,omitempty"`
	// Method definitions to delete.
	MethodDefinitionsToDelete []null.String `json:"methodDefinitionsToDelete,omitempty"`
	// Conditions to delete.
	ConditionsToDelete []null.String `json:"conditionsToDelete,omitempty"`
	// The selling plan groups to be associated with this profile.
	SellingPlanGroupsToAssociate []null.String `json:"sellingPlanGroupsToAssociate,omitempty"`
	// The selling plan groups to be dissociated with this profile.
	SellingPlanGroupsToDissociate []null.String `json:"sellingPlanGroupsToDissociate,omitempty"`
}

// A product and the subset of associated variants that are part of this delivery profile.
type DeliveryProfileItem struct {
	// A product associated with this profile.
	Product *Product `json:"product,omitempty"`
	// The product variants associated with this delivery profile.
	Variants *ProductVariantConnection `json:"variants,omitempty"`
}

// An auto-generated type for paginating through multiple DeliveryProfileItems.
type DeliveryProfileItemConnection struct {
	// A list of edges.
	Edges []*DeliveryProfileItemEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DeliveryProfileItem and a cursor during pagination.
type DeliveryProfileItemEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of DeliveryProfileItemEdge.
	Node *DeliveryProfileItem `json:"node,omitempty"`
}

// Links a location group with zones associated to a delivery profile.
type DeliveryProfileLocationGroup struct {
	// The countries already selected in any zone for the given location group and profile.
	CountriesInAnyZone []*DeliveryCountryAndZone `json:"countriesInAnyZone,omitempty"`
	// The location group associated to a delivery profile.
	LocationGroup *DeliveryLocationGroup `json:"locationGroup,omitempty"`
	// The applicable zones associated to a location group and delivery profile.
	LocationGroupZones *DeliveryLocationGroupZoneConnection `json:"locationGroupZones,omitempty"`
}

// Input fields for a delivery location group associated to a profile.
type DeliveryProfileLocationGroupInput struct {
	// Globally unique identifier of the LocationGroup.
	ID *null.String `json:"id,omitempty"`
	// The location ids of the locations to be moved to this location group.
	Locations []null.String `json:"locations,omitempty"`
	// Zones to create.
	ZonesToCreate []*DeliveryLocationGroupZoneInput `json:"zonesToCreate,omitempty"`
	// Zones to update.
	ZonesToUpdate []*DeliveryLocationGroupZoneInput `json:"zonesToUpdate,omitempty"`
}

// A region that is used to define a zone.
type DeliveryProvince struct {
	// The code of this region.
	Code null.String `json:"code,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The name of the region.
	Name null.String `json:"name,omitempty"`
	// The name of the region, translated based on the user locale.
	TranslatedName null.String `json:"translatedName,omitempty"`
}

func (DeliveryProvince) IsNode() {}

// The input fields to specify a region.
type DeliveryProvinceInput struct {
	// The code of the region.
	Code null.String `json:"code,omitempty"`
}

// The merchant-defined rate of the DeliveryMethodDefinition.
type DeliveryRateDefinition struct {
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The price of this rate.
	Price *MoneyV2 `json:"price,omitempty"`
}

func (DeliveryRateDefinition) IsNode()                 {}
func (DeliveryRateDefinition) IsDeliveryRateProvider() {}

// Input fields for a rate definition.
type DeliveryRateDefinitionInput struct {
	// Globally unique identifier of the rate definition.
	ID *null.String `json:"id,omitempty"`
	// The price of the rate definition.
	Price *MoneyInput `json:"price,omitempty"`
}

// Delivery shop-level settings.
type DeliverySetting struct {
	// Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned.
	LegacyModeBlocked *DeliveryLegacyModeBlocked `json:"legacyModeBlocked,omitempty"`
	// Enables legacy compatability mode for the multi-location delivery profiles feature.
	LegacyModeProfiles bool `json:"legacyModeProfiles,omitempty"`
}

// Input fields for shop-level delivery settings.
type DeliverySettingInput struct {
	// Enables legacy compatability mode for the multi-location delivery profiles feature.
	LegacyModeProfiles *bool `json:"legacyModeProfiles,omitempty"`
}

// Return type for `deliverySettingUpdate` mutation.
type DeliverySettingUpdatePayload struct {
	// The updated delivery shop level settings.
	Setting *DeliverySetting `json:"setting,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `deliveryShippingOriginAssign` mutation.
type DeliveryShippingOriginAssignPayload struct {
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Input fields for updating the conditions of a method definition.
type DeliveryUpdateConditionInput struct {
	// Globally unique identifier of the condition.
	ID null.String `json:"id,omitempty"`
	// The value of the criteria of the condition.
	Criteria *float64 `json:"criteria,omitempty"`
	// The unit of the criteria of the condition.
	CriteriaUnit *null.String `json:"criteriaUnit,omitempty"`
	// The field to use, either total_weight or total_price.
	Field *DeliveryConditionField `json:"field,omitempty"`
	// The operator to use for comparison.
	Operator *DeliveryConditionOperator `json:"operator,omitempty"`
}

// Input fields for the weight-based conditions of a method definition.
type DeliveryWeightConditionInput struct {
	// The criteria for the weight.
	Criteria *WeightInput `json:"criteria,omitempty"`
	// The operator to use for comparison.
	Operator *DeliveryConditionOperator `json:"operator,omitempty"`
}

// A zone is a geographical area that contains delivery methods within a delivery profile.
type DeliveryZone struct {
	// The list of countries within the zone.
	Countries []*DeliveryCountry `json:"countries,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The name of the zone.
	Name null.String `json:"name,omitempty"`
}

func (DeliveryZone) IsNode() {}

// An amount discounting the line that has been allocated by an associated discount application.
type DiscountAllocation struct {
	// Money amount allocated by the discount application.
	AllocatedAmount *MoneyV2 `json:"allocatedAmount,omitempty"`
	// Money amount allocated by the discount application in shop and presentment currencies.
	AllocatedAmountSet *MoneyBag `json:"allocatedAmountSet,omitempty"`
	// The discount of which this allocated amount originated from.
	DiscountApplication DiscountApplication `json:"discountApplication,omitempty"`
}

// The fixed amount value of a discount.
type DiscountAmount struct {
	// The value of the discount.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// If true, then the discount is applied to each of the entitled items. If false, then the amount is split across all of the entitled items.
	AppliesOnEachItem bool `json:"appliesOnEachItem,omitempty"`
}

func (DiscountAmount) IsDiscountCustomerGetsValue() {}

// Specifies the value of the discount and how it is applied.
type DiscountAmountInput struct {
	// The value of the discount.
	Amount *null.String `json:"amount,omitempty"`
	// If true, then the discount is applied to each of the entitled items. If false, then the amount is split across all of the entitled items.
	AppliesOnEachItem *bool `json:"appliesOnEachItem,omitempty"`
}

// An auto-generated type for paginating through multiple DiscountApplications.
type DiscountApplicationConnection struct {
	// A list of edges.
	Edges []*DiscountApplicationEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DiscountApplication and a cursor during pagination.
type DiscountApplicationEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of DiscountApplicationEdge.
	Node DiscountApplication `json:"node,omitempty"`
}

// Return type for `discountAutomaticActivate` mutation.
type DiscountAutomaticActivatePayload struct {
	// The activated automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// An automatic basic discount.
type DiscountAutomaticBasic struct {
	// The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
	AsyncUsageCount int `json:"asyncUsageCount,omitempty"`
	// The date and time when the discount was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGets `json:"customerGets,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *null.String `json:"endsAt,omitempty"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement DiscountMinimumRequirement `json:"minimumRequirement,omitempty"`
	// A short summary of the discount.
	ShortSummary null.String `json:"shortSummary,omitempty"`
	// The date and time when the discount starts.
	StartsAt null.String `json:"startsAt,omitempty"`
	// The status of the discount.
	Status DiscountStatus `json:"status,omitempty"`
	// A detailed summary of the discount.
	Summary null.String `json:"summary,omitempty"`
	// The title of the discount.
	Title null.String `json:"title,omitempty"`
	// The number of times that the discount has been used.
	UsageCount int `json:"usageCount,omitempty"`
}

func (DiscountAutomaticBasic) IsDiscountAutomatic() {}

// Return type for `discountAutomaticBasicCreate` mutation.
type DiscountAutomaticBasicCreatePayload struct {
	// The created automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// Specifies input field to create or update automatic basic discount.
type DiscountAutomaticBasicInput struct {
	// The title of the discount.
	Title *null.String `json:"title,omitempty"`
	// The date and time when the discount starts.
	StartsAt *null.String `json:"startsAt,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *null.String `json:"endsAt,omitempty"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement *DiscountMinimumRequirementInput `json:"minimumRequirement,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGetsInput `json:"customerGets,omitempty"`
}

// Return type for `discountAutomaticBasicUpdate` mutation.
type DiscountAutomaticBasicUpdatePayload struct {
	// The updated automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountAutomaticBulkDelete` mutation.
type DiscountAutomaticBulkDeletePayload struct {
	// The asynchronous job removing the automatic discounts.
	Job *Job `json:"job,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// An automatic BXGY discount.
type DiscountAutomaticBxgy struct {
	// The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
	AsyncUsageCount int `json:"asyncUsageCount,omitempty"`
	// The date and time when the discount was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
	CustomerBuys *DiscountCustomerBuys `json:"customerBuys,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGets `json:"customerGets,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *null.String `json:"endsAt,omitempty"`
	// The paginated list of events associated with the host subject.
	Events *EventConnection `json:"events,omitempty"`
	// A legacy unique identifier for the discount.
	ID null.String `json:"id,omitempty"`
	// The date and time when the discount starts.
	StartsAt null.String `json:"startsAt,omitempty"`
	// The status of the discount.
	Status DiscountStatus `json:"status,omitempty"`
	// A detailed summary of the discount.
	Summary null.String `json:"summary,omitempty"`
	// The title of the discount.
	Title null.String `json:"title,omitempty"`
	// The number of times that the discount has been used.
	UsageCount int `json:"usageCount,omitempty"`
	// The maximum number of times that the discount can be applied to an order.
	UsesPerOrderLimit *int `json:"usesPerOrderLimit,omitempty"`
}

func (DiscountAutomaticBxgy) IsDiscountAutomatic() {}
func (DiscountAutomaticBxgy) IsNode()              {}
func (DiscountAutomaticBxgy) IsHasEvents()         {}

// Return type for `discountAutomaticBxgyCreate` mutation.
type DiscountAutomaticBxgyCreatePayload struct {
	// The created automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// Specifies input field to create or update automatic bogo discount.
type DiscountAutomaticBxgyInput struct {
	// The date and time when the discount starts.
	StartsAt *null.String `json:"startsAt,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *null.String `json:"endsAt,omitempty"`
	// The title of the discount.
	Title *null.String `json:"title,omitempty"`
	// The maximum number of times that the discount can be applied to an order.
	UsesPerOrderLimit *null.String `json:"usesPerOrderLimit,omitempty"`
	// The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
	CustomerBuys *DiscountCustomerBuysInput `json:"customerBuys,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGetsInput `json:"customerGets,omitempty"`
}

// Return type for `discountAutomaticBxgyUpdate` mutation.
type DiscountAutomaticBxgyUpdatePayload struct {
	// The updated automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple DiscountAutomatics.
type DiscountAutomaticConnection struct {
	// A list of edges.
	Edges []*DiscountAutomaticEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `discountAutomaticDeactivate` mutation.
type DiscountAutomaticDeactivatePayload struct {
	// The deactivated automatic discount.
	AutomaticDiscountNode *DiscountAutomaticNode `json:"automaticDiscountNode,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountAutomaticDelete` mutation.
type DiscountAutomaticDeletePayload struct {
	// The deleted automatic discount ID.
	DeletedAutomaticDiscountID *null.String `json:"deletedAutomaticDiscountId,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one DiscountAutomatic and a cursor during pagination.
type DiscountAutomaticEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of DiscountAutomaticEdge.
	Node DiscountAutomatic `json:"node,omitempty"`
}

// An automatic discount wrapper node.
type DiscountAutomaticNode struct {
	// An automatic discount.
	AutomaticDiscount DiscountAutomatic `json:"automaticDiscount,omitempty"`
	// The paginated list of events associated with the host subject.
	Events *EventConnection `json:"events,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
}

func (DiscountAutomaticNode) IsNode()      {}
func (DiscountAutomaticNode) IsHasEvents() {}

// An auto-generated type for paginating through multiple DiscountAutomaticNodes.
type DiscountAutomaticNodeConnection struct {
	// A list of edges.
	Edges []*DiscountAutomaticNodeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DiscountAutomaticNode and a cursor during pagination.
type DiscountAutomaticNodeEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of DiscountAutomaticNodeEdge.
	Node *DiscountAutomaticNode `json:"node,omitempty"`
}

// Return type for `discountCodeActivate` mutation.
type DiscountCodeActivatePayload struct {
	// The activated code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// Discount code applications capture the intentions of a discount code at
// the time that it is applied onto an order.
type DiscountCodeApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod,omitempty"`
	// The string identifying the discount code that was used at the time of application.
	Code null.String `json:"code,omitempty"`
	// An ordered index that can be used to identify the discount application and indicate the precedence
	// of the discount application for calculations.
	Index int `json:"index,omitempty"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection,omitempty"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType,omitempty"`
	// The value of the discount application.
	Value PricingValue `json:"value,omitempty"`
}

func (DiscountCodeApplication) IsDiscountApplication() {}

// A basic code discount.
type DiscountCodeBasic struct {
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer bool `json:"appliesOncePerCustomer,omitempty"`
	// The number of times that the discount has been used.
	AsyncUsageCount int `json:"asyncUsageCount,omitempty"`
	// The number of redeem codes for the discount.
	CodeCount int `json:"codeCount,omitempty"`
	// A list of redeem codes for the discount.
	Codes *DiscountRedeemCodeConnection `json:"codes,omitempty"`
	// The date and time when the discount was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGets `json:"customerGets,omitempty"`
	// The customers that can use the discount.
	CustomerSelection DiscountCustomerSelection `json:"customerSelection,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *null.String `json:"endsAt,omitempty"`
	// Indicates whether there are any timeline comments on the discount.
	HasTimelineComment bool `json:"hasTimelineComment,omitempty"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement DiscountMinimumRequirement `json:"minimumRequirement,omitempty"`
	// The number of times a discount applies on recurring purchases (subscriptions).
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty"`
	// URLs that can be used to share the discount.
	ShareableUrls []*DiscountShareableURL `json:"shareableUrls,omitempty"`
	// A short summary of the discount.
	ShortSummary null.String `json:"shortSummary,omitempty"`
	// The date and time when the discount starts.
	StartsAt null.String `json:"startsAt,omitempty"`
	// The status of the discount.
	Status DiscountStatus `json:"status,omitempty"`
	// A detailed summary of the discount.
	Summary null.String `json:"summary,omitempty"`
	// The title of the discount.
	Title null.String `json:"title,omitempty"`
	// The total sales from orders where the discount was used.
	TotalSales *MoneyV2 `json:"totalSales,omitempty"`
	// The maximum number of times that the discount can be used.
	UsageLimit *int `json:"usageLimit,omitempty"`
}

func (DiscountCodeBasic) IsDiscountCode() {}

// Return type for `discountCodeBasicCreate` mutation.
type DiscountCodeBasicCreatePayload struct {
	// The created code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// Specifies input field to create or update code basic discount.
type DiscountCodeBasicInput struct {
	// The title of the discount.
	Title *null.String `json:"title,omitempty"`
	// The date and time when the discount starts.
	StartsAt *null.String `json:"startsAt,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *null.String `json:"endsAt,omitempty"`
	// The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
	UsageLimit *int `json:"usageLimit,omitempty"`
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer *bool `json:"appliesOncePerCustomer,omitempty"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement *DiscountMinimumRequirementInput `json:"minimumRequirement,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGetsInput `json:"customerGets,omitempty"`
	// The customers that can use the discount.
	CustomerSelection *DiscountCustomerSelectionInput `json:"customerSelection,omitempty"`
	// The code to use the discount.
	Code *null.String `json:"code,omitempty"`
	// The number of times a discount applies on recurring purchases (subscriptions).
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty"`
}

// Return type for `discountCodeBasicUpdate` mutation.
type DiscountCodeBasicUpdatePayload struct {
	// The updated code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountCodeBulkActivate` mutation.
type DiscountCodeBulkActivatePayload struct {
	// The asynchronous job that activates the code discounts.
	Job *Job `json:"job,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountCodeBulkDeactivate` mutation.
type DiscountCodeBulkDeactivatePayload struct {
	// The asynchronous job that deactivates the code discounts.
	Job *Job `json:"job,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountCodeBulkDelete` mutation.
type DiscountCodeBulkDeletePayload struct {
	// The asynchronous job that deletes the code discounts.
	Job *Job `json:"job,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// A BXGY code discount.
type DiscountCodeBxgy struct {
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer bool `json:"appliesOncePerCustomer,omitempty"`
	// The number of times that the discount has been used.
	AsyncUsageCount int `json:"asyncUsageCount,omitempty"`
	// The number of redeem codes for the discount.
	CodeCount int `json:"codeCount,omitempty"`
	// A list of redeem codes for the discount.
	Codes *DiscountRedeemCodeConnection `json:"codes,omitempty"`
	// The date and time when the discount was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
	CustomerBuys *DiscountCustomerBuys `json:"customerBuys,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGets `json:"customerGets,omitempty"`
	// The customers that can use the discount.
	CustomerSelection DiscountCustomerSelection `json:"customerSelection,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *null.String `json:"endsAt,omitempty"`
	// Indicates whether there are any timeline comments on the discount.
	HasTimelineComment bool `json:"hasTimelineComment,omitempty"`
	// URLs that can be used to share the discount.
	ShareableUrls []*DiscountShareableURL `json:"shareableUrls,omitempty"`
	// The date and time when the discount starts.
	StartsAt null.String `json:"startsAt,omitempty"`
	// The status of the discount.
	Status DiscountStatus `json:"status,omitempty"`
	// A detailed summary of the discount.
	Summary null.String `json:"summary,omitempty"`
	// The title of the discount.
	Title null.String `json:"title,omitempty"`
	// The total sales from orders where the discount was used.
	TotalSales *MoneyV2 `json:"totalSales,omitempty"`
	// The maximum number of times that the discount can be used.
	UsageLimit *int `json:"usageLimit,omitempty"`
	// The maximum number of times that the discount can be applied to an order.
	UsesPerOrderLimit *int `json:"usesPerOrderLimit,omitempty"`
}

func (DiscountCodeBxgy) IsDiscountCode() {}

// Return type for `discountCodeBxgyCreate` mutation.
type DiscountCodeBxgyCreatePayload struct {
	// The created code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// Specifies input field to create or update a BXGY code discount.
type DiscountCodeBxgyInput struct {
	// The title of the discount.
	Title *null.String `json:"title,omitempty"`
	// The date and time when the discount starts.
	StartsAt *null.String `json:"startsAt,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *null.String `json:"endsAt,omitempty"`
	// The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
	CustomerBuys *DiscountCustomerBuysInput `json:"customerBuys,omitempty"`
	// The qualifying items in an order, the quantity of each one, and the total value of the discount.
	CustomerGets *DiscountCustomerGetsInput `json:"customerGets,omitempty"`
	// The customers that can use the discount.
	CustomerSelection *DiscountCustomerSelectionInput `json:"customerSelection,omitempty"`
	// The code to use the discount.
	Code *null.String `json:"code,omitempty"`
	// The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
	UsageLimit *int `json:"usageLimit,omitempty"`
	// The maximum number of times that the discount can be applied to an order.
	UsesPerOrderLimit *int `json:"usesPerOrderLimit,omitempty"`
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer *bool `json:"appliesOncePerCustomer,omitempty"`
}

// Return type for `discountCodeBxgyUpdate` mutation.
type DiscountCodeBxgyUpdatePayload struct {
	// The updated code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountCodeDeactivate` mutation.
type DiscountCodeDeactivatePayload struct {
	// The deactivated code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// Return type for `discountCodeDelete` mutation.
type DiscountCodeDeletePayload struct {
	// The deleted code discount ID.
	DeletedCodeDiscountID *null.String `json:"deletedCodeDiscountId,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// A free shipping code discount.
type DiscountCodeFreeShipping struct {
	// Whether the discount applies on regular one-time-purchase shipping lines.
	AppliesOnOneTimePurchase bool `json:"appliesOnOneTimePurchase,omitempty"`
	// Whether the discount applies on subscription shipping lines.
	AppliesOnSubscription bool `json:"appliesOnSubscription,omitempty"`
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer bool `json:"appliesOncePerCustomer,omitempty"`
	// The number of times that the discount has been used.
	AsyncUsageCount int `json:"asyncUsageCount,omitempty"`
	// The number of redeem codes for the discount.
	CodeCount int `json:"codeCount,omitempty"`
	// A list of redeem codes for the discount.
	Codes *DiscountRedeemCodeConnection `json:"codes,omitempty"`
	// The date and time when the discount was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The customers that can use the discount.
	CustomerSelection DiscountCustomerSelection `json:"customerSelection,omitempty"`
	// A shipping destination that qualifies for the discount.
	DestinationSelection DiscountShippingDestinationSelection `json:"destinationSelection,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *null.String `json:"endsAt,omitempty"`
	// Indicates whether there are any timeline comments on the discount.
	HasTimelineComment bool `json:"hasTimelineComment,omitempty"`
	// The maximum shipping price amount accepted to qualify for the discount.
	MaximumShippingPrice *MoneyV2 `json:"maximumShippingPrice,omitempty"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement DiscountMinimumRequirement `json:"minimumRequirement,omitempty"`
	// The number of times a discount applies on recurring purchases (subscriptions).
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty"`
	// URLs that can be used to share the discount.
	ShareableUrls []*DiscountShareableURL `json:"shareableUrls,omitempty"`
	// A short summary of the discount.
	ShortSummary null.String `json:"shortSummary,omitempty"`
	// The date and time when the discount starts.
	StartsAt null.String `json:"startsAt,omitempty"`
	// The status of the discount.
	Status DiscountStatus `json:"status,omitempty"`
	// A detailed summary of the discount.
	Summary null.String `json:"summary,omitempty"`
	// The title of the discount.
	Title null.String `json:"title,omitempty"`
	// The total sales from orders where the discount was used.
	TotalSales *MoneyV2 `json:"totalSales,omitempty"`
	// The maximum number of times that the discount can be used.
	UsageLimit *int `json:"usageLimit,omitempty"`
}

func (DiscountCodeFreeShipping) IsDiscountCode() {}

// Return type for `discountCodeFreeShippingCreate` mutation.
type DiscountCodeFreeShippingCreatePayload struct {
	// The created code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// Specifies input field to create or update free shipping code discount.
type DiscountCodeFreeShippingInput struct {
	// The title of the discount.
	Title *null.String `json:"title,omitempty"`
	// The date and time when the discount starts.
	StartsAt *null.String `json:"startsAt,omitempty"`
	// The date and time when the discount ends. For open-ended discounts, use `null`.
	EndsAt *null.String `json:"endsAt,omitempty"`
	// The code to use the discount.
	Code *null.String `json:"code,omitempty"`
	// The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
	UsageLimit *int `json:"usageLimit,omitempty"`
	// Whether the discount can be applied only once per customer.
	AppliesOncePerCustomer *bool `json:"appliesOncePerCustomer,omitempty"`
	// The minimum subtotal or quantity that's required for the discount to be applied.
	MinimumRequirement *DiscountMinimumRequirementInput `json:"minimumRequirement,omitempty"`
	// The customers that can use the discount.
	CustomerSelection *DiscountCustomerSelectionInput `json:"customerSelection,omitempty"`
	// A list of destinations where the discount will apply.
	Destination *DiscountShippingDestinationSelectionInput `json:"destination,omitempty"`
	// The maximum shipping price that qualifies for the discount.
	MaximumShippingPrice *null.String `json:"maximumShippingPrice,omitempty"`
	// The number of times a discount applies on recurring purchases (subscriptions).
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty"`
	// Whether the discount applies on regular one-time-purchase items.
	AppliesOnOneTimePurchase *bool `json:"appliesOnOneTimePurchase,omitempty"`
	// Whether the discount applies on subscription items.
	AppliesOnSubscription *bool `json:"appliesOnSubscription,omitempty"`
}

// Return type for `discountCodeFreeShippingUpdate` mutation.
type DiscountCodeFreeShippingUpdatePayload struct {
	// The updated code discount.
	CodeDiscountNode *DiscountCodeNode `json:"codeDiscountNode,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// A code discount wrapper node.
type DiscountCodeNode struct {
	// A code discount.
	CodeDiscount DiscountCode `json:"codeDiscount,omitempty"`
	// The paginated list of events associated with the host subject.
	Events *EventConnection `json:"events,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
}

func (DiscountCodeNode) IsNode()      {}
func (DiscountCodeNode) IsHasEvents() {}

// An auto-generated type for paginating through multiple DiscountCodeNodes.
type DiscountCodeNodeConnection struct {
	// A list of edges.
	Edges []*DiscountCodeNodeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DiscountCodeNode and a cursor during pagination.
type DiscountCodeNodeEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of DiscountCodeNodeEdge.
	Node *DiscountCodeNode `json:"node,omitempty"`
}

// Return type for `discountCodeRedeemCodeBulkDelete` mutation.
type DiscountCodeRedeemCodeBulkDeletePayload struct {
	// The asynchronous job that deletes the discount redeem codes.
	Job *Job `json:"job,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*DiscountUserError `json:"userErrors,omitempty"`
}

// A list of collections that the discount can have as a prerequisite or entitlement.
type DiscountCollections struct {
	// A list of collections that the discount can have as a prerequisite or entitlement.
	Collections *CollectionConnection `json:"collections,omitempty"`
}

func (DiscountCollections) IsDiscountItems() {}

// Specifies the collections attached to a discount.
type DiscountCollectionsInput struct {
	// Specifies list of collection ids to add.
	Add []null.String `json:"add,omitempty"`
	// Specifies list of collection ids to remove.
	Remove []null.String `json:"remove,omitempty"`
}

// The shipping destination where the discount applies.
type DiscountCountries struct {
	// The codes for the countries where the discount can be used.
	Countries []CountryCode `json:"countries,omitempty"`
	// Whether the discount is applicable to countries that have not been defined in the shop's shipping zones.
	IncludeRestOfWorld bool `json:"includeRestOfWorld,omitempty"`
}

func (DiscountCountries) IsDiscountShippingDestinationSelection() {}

// Specifies a list of countries to add or remove from the free shipping discount.
type DiscountCountriesInput struct {
	// The country codes to add to the list of countries where the discount applies.
	Add []CountryCode `json:"add,omitempty"`
	// The country codes to remove from the list of countries where the discount applies.
	Remove []CountryCode `json:"remove,omitempty"`
	// Whether the discount code is applicable to countries that have not been defined in the shop's shipping zones.
	IncludeRestOfWorld *bool `json:"includeRestOfWorld,omitempty"`
}

// Whether the discount applies to all countries.
type DiscountCountryAll struct {
	// Always true when resolved to this type.
	AllCountries bool `json:"allCountries,omitempty"`
}

func (DiscountCountryAll) IsDiscountShippingDestinationSelection() {}

// Whether the discount applies to all customers.
type DiscountCustomerAll struct {
	// Always true when resolved to this type.
	AllCustomers bool `json:"allCustomers,omitempty"`
}

func (DiscountCustomerAll) IsDiscountCustomerSelection() {}

// The prerequisite items and prerequisite value.
type DiscountCustomerBuys struct {
	// The items required for the discount to be applicable.
	Items DiscountItems `json:"items,omitempty"`
	// The prerequisite value.
	Value DiscountCustomerBuysValue `json:"value,omitempty"`
}

// Specifies the prerequisite items and prerequisite quantity.
type DiscountCustomerBuysInput struct {
	// The quantity of prerequisite items.
	Value *DiscountCustomerBuysValueInput `json:"value,omitempty"`
	// The IDs of items that the customer buys. The items can be either collections or products.
	Items *DiscountItemsInput `json:"items,omitempty"`
}

// Specifies the prerequisite quantity for the discount.
type DiscountCustomerBuysValueInput struct {
	// The quantity of prerequisite items.
	Quantity *null.String `json:"quantity,omitempty"`
	// The prerequisite purchase amount required for the discount to be applicable.
	Amount *null.String `json:"amount,omitempty"`
}

// The qualifying items in an order, the quantity of each one, and the total value of the discount.
type DiscountCustomerGets struct {
	// Whether the discount applies on regular one-time-purchase items.
	AppliesOnOneTimePurchase bool `json:"appliesOnOneTimePurchase,omitempty"`
	// Whether the discount applies on subscription items.
	AppliesOnSubscription bool `json:"appliesOnSubscription,omitempty"`
	// The items to which the discount applies.
	Items DiscountItems `json:"items,omitempty"`
	// Entitled quantity and the discount value.
	Value DiscountCustomerGetsValue `json:"value,omitempty"`
}

// Specifies the items that will be discounted, the quantity of items that will be discounted, and the value of discount.
type DiscountCustomerGetsInput struct {
	// The quantity of items discounted and the discount value.
	Value *DiscountCustomerGetsValueInput `json:"value,omitempty"`
	// The IDs of the items that the customer gets. The items can be either collections or products.
	Items *DiscountItemsInput `json:"items,omitempty"`
	// Whether the discount applies on regular one-time-purchase items.
	AppliesOnOneTimePurchase *bool `json:"appliesOnOneTimePurchase,omitempty"`
	// Whether the discount applies on subscription items.
	AppliesOnSubscription *bool `json:"appliesOnSubscription,omitempty"`
}

// Specifies the quantity of items discounted and the discount value.
type DiscountCustomerGetsValueInput struct {
	// The quantity of the items that are discounted and the discount value.
	DiscountOnQuantity *DiscountOnQuantityInput `json:"discountOnQuantity,omitempty"`
	// The percentage value of the discount. Value must be between 0.00 - 1.00.
	Percentage *float64 `json:"percentage,omitempty"`
	// The value of the discount.
	DiscountAmount *DiscountAmountInput `json:"discountAmount,omitempty"`
}

// A list of customer saved searches that contain the customers to whom the discount applies.
type DiscountCustomerSavedSearches struct {
	// A list of customer saved searches that contain the customers who can use the discount.
	SavedSearches []*SavedSearch `json:"savedSearches,omitempty"`
}

func (DiscountCustomerSavedSearches) IsDiscountCustomerSelection() {}

// Specifies which customer saved searches to add to or remove from the discount.
type DiscountCustomerSavedSearchesInput struct {
	// A list of customer saved searches to add to the current list of customer saved searches.
	Add []null.String `json:"add,omitempty"`
	// A list of customer saved searches to remove from the current list of customer saved searches.
	Remove []null.String `json:"remove,omitempty"`
}

// Specifies the customers who can use this discount.
type DiscountCustomerSelectionInput struct {
	// Whether all customers can use this discount.
	All *bool `json:"all,omitempty"`
	// The list of customer IDs to add or remove from the list of customers.
	Customers *DiscountCustomersInput `json:"customers,omitempty"`
	// The list of customer saved search IDs to add or remove from the list of customer saved searches.
	CustomerSavedSearches *DiscountCustomerSavedSearchesInput `json:"customerSavedSearches,omitempty"`
}

// A list of customers to whom the discount applies.
type DiscountCustomers struct {
	// A list of the customers that can use the discount.
	Customers []*Customer `json:"customers,omitempty"`
}

func (DiscountCustomers) IsDiscountCustomerSelection() {}

// Specifies which customers to add to or remove from the discount.
type DiscountCustomersInput struct {
	// A list of customers to add to the current list of customers who can use the discount.
	Add []null.String `json:"add,omitempty"`
	// A list of customers to remove from the current list of customers who can use the discount.
	Remove []null.String `json:"remove,omitempty"`
}

// Specifies how the discount will be applied. Currently, only percentage off is supported.
type DiscountEffectInput struct {
	// The percentage value of the discount. Value must be between 0.00 - 1.00.
	Percentage *float64 `json:"percentage,omitempty"`
}

// Specifies the items attached to a discount.
type DiscountItemsInput struct {
	// The products and product variants that are attached to a discount.
	Products *DiscountProductsInput `json:"products,omitempty"`
	// The collections that are attached to a discount.
	Collections *DiscountCollectionsInput `json:"collections,omitempty"`
	// Whether all items should be selected.
	All *bool `json:"all,omitempty"`
}

// The minimum quantity of items required for the discount to apply.
type DiscountMinimumQuantity struct {
	// The minimum quantity of items that's required for the discount to be applied.
	GreaterThanOrEqualToQuantity null.String `json:"greaterThanOrEqualToQuantity,omitempty"`
}

func (DiscountMinimumQuantity) IsDiscountMinimumRequirement() {}

// Specifies the quantity minimum requirements for a discount.
type DiscountMinimumQuantityInput struct {
	// The minimum quantity of items that's required for the discount to be applied.
	GreaterThanOrEqualToQuantity *null.String `json:"greaterThanOrEqualToQuantity,omitempty"`
}

// Specifies the quantity or subtotal minimum requirements for a discount.
type DiscountMinimumRequirementInput struct {
	// The minimum required quantity.
	Quantity *DiscountMinimumQuantityInput `json:"quantity,omitempty"`
	// The minimum required subtotal.
	Subtotal *DiscountMinimumSubtotalInput `json:"subtotal,omitempty"`
}

// The minimum subtotal required for the discount to apply.
type DiscountMinimumSubtotal struct {
	// The minimum subtotal that's required for the discount to be applied.
	GreaterThanOrEqualToSubtotal *MoneyV2 `json:"greaterThanOrEqualToSubtotal,omitempty"`
}

func (DiscountMinimumSubtotal) IsDiscountMinimumRequirement() {}

// Specifies the subtotal minimum requirements for a discount.
type DiscountMinimumSubtotalInput struct {
	// The minimum subtotal that's required for the discount to be applied.
	GreaterThanOrEqualToSubtotal *null.String `json:"greaterThanOrEqualToSubtotal,omitempty"`
}

// The quantity of items discounted, the discount value, and how the discount will be applied.
type DiscountOnQuantity struct {
	// The discount's effect on qualifying items.
	Effect DiscountEffect `json:"effect,omitempty"`
	// The number of items being discounted.
	Quantity *DiscountQuantity `json:"quantity,omitempty"`
}

func (DiscountOnQuantity) IsDiscountCustomerGetsValue() {}

// Specifies the quantity of items discounted and the discount value.
type DiscountOnQuantityInput struct {
	// The quantity of items that are discounted.
	Quantity *null.String `json:"quantity,omitempty"`
	// The percentage value of the discount.
	Effect *DiscountEffectInput `json:"effect,omitempty"`
}

// The percentage value of the discount.
type DiscountPercentage struct {
	// The percentage value of the discount.
	Percentage float64 `json:"percentage,omitempty"`
}

func (DiscountPercentage) IsDiscountCustomerGetsValue() {}
func (DiscountPercentage) IsDiscountEffect()            {}

// The entitled or prerequisite products and product variants for a discount.
type DiscountProducts struct {
	// A list of product variants that the discount can have as a prerequisite or entitlement.
	ProductVariants *ProductVariantConnection `json:"productVariants,omitempty"`
	// A list of products that the discount can have as a prerequisite or entitlement.
	Products *ProductConnection `json:"products,omitempty"`
}

func (DiscountProducts) IsDiscountItems() {}

// Specifies the products and product variants attached to a discount.
type DiscountProductsInput struct {
	// Specifies list of product ids to add.
	ProductsToAdd []null.String `json:"productsToAdd,omitempty"`
	// Specifies list of product ids to remove.
	ProductsToRemove []null.String `json:"productsToRemove,omitempty"`
	// Specifies list of product variant ids to add.
	ProductVariantsToAdd []null.String `json:"productVariantsToAdd,omitempty"`
	// Specifies list of product variant ids to remove.
	ProductVariantsToRemove []null.String `json:"productVariantsToRemove,omitempty"`
}

// The prerequisite purchase amount required for the discount to be applicable.
type DiscountPurchaseAmount struct {
	// Decimal money amount.
	Amount null.String `json:"amount,omitempty"`
}

func (DiscountPurchaseAmount) IsDiscountCustomerBuysValue() {}

// The quantity of items in discount.
type DiscountQuantity struct {
	// The quantity of items.
	Quantity null.String `json:"quantity,omitempty"`
}

func (DiscountQuantity) IsDiscountCustomerBuysValue() {}

// A redeem code for a code discount.
type DiscountRedeemCode struct {
	// The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
	AsyncUsageCount int `json:"asyncUsageCount,omitempty"`
	// The code of a discount.
	Code null.String `json:"code,omitempty"`
	// The application that created the discount code.
	CreatedBy *App `json:"createdBy,omitempty"`
	// Globally unique identifier of the discount redeem code.
	ID null.String `json:"id,omitempty"`
}

// An auto-generated type for paginating through multiple DiscountRedeemCodes.
type DiscountRedeemCodeConnection struct {
	// A list of edges.
	Edges []*DiscountRedeemCodeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DiscountRedeemCode and a cursor during pagination.
type DiscountRedeemCodeEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of DiscountRedeemCodeEdge.
	Node *DiscountRedeemCode `json:"node,omitempty"`
}

// The shareable URL for the discount code.
type DiscountShareableURL struct {
	// The image URL of the item (product or collection) to which the discount applies.
	TargetItemImage *Image `json:"targetItemImage,omitempty"`
	// The type of page that's associated with the URL.
	TargetType DiscountShareableURLTargetType `json:"targetType,omitempty"`
	// The title of the page that's associated with the URL.
	Title null.String `json:"title,omitempty"`
	// The URL for the discount code.
	URL null.String `json:"url,omitempty"`
}

// Specifies the destinations where the free shipping discount will be applied.
type DiscountShippingDestinationSelectionInput struct {
	// Whether the discount code applies to all countries.
	All *bool `json:"all,omitempty"`
	// A list of countries where the discount code will apply.
	Countries *DiscountCountriesInput `json:"countries,omitempty"`
}

// An error that occurs during the execution of a discount mutation.
type DiscountUserError struct {
	// Error code to uniquely identify the error.
	Code *DiscountErrorCode `json:"code,omitempty"`
	// Extra information about this error.
	ExtraInfo *null.String `json:"extraInfo,omitempty"`
	// Path to the input field which caused the error.
	Field []null.String `json:"field,omitempty"`
	// The error message.
	Message null.String `json:"message,omitempty"`
}

func (DiscountUserError) IsDisplayableError() {}

// A unique string that represents the address of a Shopify store on the Internet.
type Domain struct {
	// The host name of the domain (eg: `example.com`).
	Host null.String `json:"host,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The localization of the domain, if it does not redirect.
	Localization *DomainLocalization `json:"localization,omitempty"`
	// Whether SSL is enabled or not.
	SslEnabled bool `json:"sslEnabled,omitempty"`
	// The URL of the domain (eg: `https://example.com`).
	URL null.String `json:"url,omitempty"`
}

func (Domain) IsNode() {}

// The country and language settings assigned to a domain.
type DomainLocalization struct {
	// The ISO codes for the domain’s alternate locales.
	AlternateLocales []null.String `json:"alternateLocales,omitempty"`
	// The ISO code for the country assigned to the domain, or "*" for a domain set to "Rest of world".
	Country *null.String `json:"country,omitempty"`
	// The ISO code for the domain’s default locale.
	DefaultLocale null.String `json:"defaultLocale,omitempty"`
}

// Returns unfulfilled line items grouped by their fulfillment service. Each draft fulfillment contains additional information, such as whether the fulfillment requires shipping and whether a shipping label can be printed for it.
type DraftFulfillment struct {
	// Whether a label can be purchased.
	AllowLabelPurchase bool `json:"allowLabelPurchase,omitempty"`
	// The line items (which might correspond to a variant) that are part of this draft fulfillment.
	LineItems []*LineItem `json:"lineItems,omitempty"`
	// Whether a fulfillment requires shipping.
	RequiresShipping bool `json:"requiresShipping,omitempty"`
	// The service responsible for fulfilling the fulfillment.
	Service *FulfillmentService `json:"service,omitempty"`
}

// Represents a draft order. Merchants can use draft orders to create orders on behalf of their customers.
type DraftOrder struct {
	// Order-level discount applied to the draft order.
	AppliedDiscount *DraftOrderAppliedDiscount `json:"appliedDiscount,omitempty"`
	// Billing address of the customer.
	BillingAddress *MailingAddress `json:"billingAddress,omitempty"`
	// Date and time when the draft order converted to a new order,
	// and the draft order's status changed to **Completed**.
	CompletedAt *null.String `json:"completedAt,omitempty"`
	// Date and time when the draft order was created in Shopify.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// Three letter code for the currency of the store at the time that the invoice is sent.
	CurrencyCode CurrencyCode `json:"currencyCode,omitempty"`
	// Custom information added to the draft order on behalf of your customer.
	CustomAttributes []*Attribute `json:"customAttributes,omitempty"`
	// Customer who will be sent an invoice for the draft order, if there is one.
	Customer *Customer `json:"customer,omitempty"`
	// Email address of the customer, which is used to send notifications to.
	Email *null.String `json:"email,omitempty"`
	// List of events associated with the draft order.
	Events *EventConnection `json:"events,omitempty"`
	// Whether the merchant has added timeline comments to the draft order.
	HasTimelineComment bool `json:"hasTimelineComment,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Date and time when the invoice was last emailed to the customer.
	InvoiceSentAt *null.String `json:"invoiceSentAt,omitempty"`
	// Link to the checkout, which is sent to your customer in the invoice email.
	InvoiceURL *null.String `json:"invoiceUrl,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// List of the line items in the draft order.
	LineItems *DraftOrderLineItemConnection `json:"lineItems,omitempty"`
	// List of localization extensions for the resource.
	LocalizationExtensions *LocalizationExtensionConnection `json:"localizationExtensions,omitempty"`
	// The metafield associated with the resource.
	Metafield *Metafield `json:"metafield,omitempty"`
	// A paginated list of metafields associated with the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// Unique identifier for the draft order, which is unique within the store. For example, _#D1223_.
	Name null.String `json:"name,omitempty"`
	// Text from an optional note attached to the draft order.
	Note2 *null.String `json:"note2,omitempty"`
	// Order that was created from this draft order.
	Order *Order `json:"order,omitempty"`
	// Returns a private metafield found by namespace and key.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// List of private metafields.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// Whether or not the Draft Order is ready and can be completed. Draft Orders
	//         may have asynchronous operations that can take time to finish.
	Ready bool `json:"ready,omitempty"`
	// Shipping mailing address of the customer.
	ShippingAddress *MailingAddress `json:"shippingAddress,omitempty"`
	// Line item that contains the shipping costs.
	ShippingLine *ShippingLine `json:"shippingLine,omitempty"`
	// Status of the draft order.
	Status DraftOrderStatus `json:"status,omitempty"`
	// Subtotal of the line items and their discounts (does not contain shipping charges or shipping discounts, or taxes).
	SubtotalPrice null.String `json:"subtotalPrice,omitempty"`
	// A comma separated list of tags that have been added to the draft order.
	Tags []null.String `json:"tags,omitempty"`
	// Whether the draft order is tax exempt.
	TaxExempt bool `json:"taxExempt,omitempty"`
	// Total amount of taxes charged for each line item and shipping line.
	TaxLines []*TaxLine `json:"taxLines,omitempty"`
	// Whether the line item prices include taxes.
	TaxesIncluded bool `json:"taxesIncluded,omitempty"`
	// Total amount of the draft order (includes taxes, shipping charges, and discounts).
	TotalPrice null.String `json:"totalPrice,omitempty"`
	// Total shipping charge for the draft order.
	TotalShippingPrice null.String `json:"totalShippingPrice,omitempty"`
	// Total amount of taxes for the draft order.
	TotalTax null.String `json:"totalTax,omitempty"`
	// Total weight (grams) of the draft order.
	TotalWeight null.String `json:"totalWeight,omitempty"`
	// Date and time when the draft order was last changed.
	// The format is YYYY-MM-DD HH:mm:ss (for example, 2016-02-05 17:04:01).
	UpdatedAt null.String `json:"updatedAt,omitempty"`
}

func (DraftOrder) IsCommentEventEmbed()                       {}
func (DraftOrder) IsNode()                                    {}
func (DraftOrder) IsHasMetafields()                           {}
func (DraftOrder) IsCommentEventSubject()                     {}
func (DraftOrder) IsLegacyInteroperability()                  {}
func (DraftOrder) IsHasEvents()                               {}
func (DraftOrder) IsHasLocalizationExtensionsForDraftOrders() {}

// The order-level discount applied to a draft order.
type DraftOrderAppliedDiscount struct {
	// Amount of the order-level discount that is applied to the draft order.
	Amount null.String `json:"amount,omitempty"`
	// Amount of money discounted.
	AmountV2 *MoneyV2 `json:"amountV2,omitempty"`
	// Description of the order-level discount.
	Description null.String `json:"description,omitempty"`
	// Name of the order-level discount.
	Title *null.String `json:"title,omitempty"`
	// Amount of the order level discount (when value_type is percentage,
	// the value in this field is the percentage discount).
	Value float64 `json:"value,omitempty"`
	// Type of the order-level discount.
	ValueType DraftOrderAppliedDiscountType `json:"valueType,omitempty"`
}

// The input fields for applying an order-level discount to a draft order.
type DraftOrderAppliedDiscountInput struct {
	// The applied amount of the discount.
	Amount *null.String `json:"amount,omitempty"`
	// Reason for the discount.
	Description *null.String `json:"description,omitempty"`
	// Title of the discount.
	Title *null.String `json:"title,omitempty"`
	// The value of the discount.
	// If the type of the discount is fixed amount, then this is a fixed dollar amount.
	// If the type is percentage, then this is the percentage.
	Value float64 `json:"value,omitempty"`
	// The type of discount.
	ValueType DraftOrderAppliedDiscountType `json:"valueType,omitempty"`
}

// Return type for `draftOrderCalculate` mutation.
type DraftOrderCalculatePayload struct {
	// The calculated properties for a draft order.
	CalculatedDraftOrder *CalculatedDraftOrder `json:"calculatedDraftOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `draftOrderComplete` mutation.
type DraftOrderCompletePayload struct {
	// The completed draft order.
	DraftOrder *DraftOrder `json:"draftOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple DraftOrders.
type DraftOrderConnection struct {
	// A list of edges.
	Edges []*DraftOrderEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `draftOrderCreate` mutation.
type DraftOrderCreatePayload struct {
	// The created draft order.
	DraftOrder *DraftOrder `json:"draftOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Specifies the draft order to delete by its ID.
type DraftOrderDeleteInput struct {
	// The ID of the draft order to delete.
	ID null.String `json:"id,omitempty"`
}

// Return type for `draftOrderDelete` mutation.
type DraftOrderDeletePayload struct {
	// The ID of the deleted draft order.
	DeletedID *null.String `json:"deletedId,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one DraftOrder and a cursor during pagination.
type DraftOrderEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of DraftOrderEdge.
	Node *DraftOrder `json:"node,omitempty"`
}

// The input fields used to create or update a draft order.
type DraftOrderInput struct {
	// The discount that will be applied to the draft order.
	// A draft order line item can have one discount. A draft order can also have one order-level discount.
	AppliedDiscount *DraftOrderAppliedDiscountInput `json:"appliedDiscount,omitempty"`
	// The mailing address associated with the payment method.
	BillingAddress *MailingAddressInput `json:"billingAddress,omitempty"`
	// Customer associated with the draft order.
	CustomerID *null.String `json:"customerId,omitempty"`
	// Extra information added to the customer.
	CustomAttributes []*AttributeInput `json:"customAttributes,omitempty"`
	// The customer's email address.
	Email *null.String `json:"email,omitempty"`
	// Product variant line item or custom line item associated to the draft order.
	// Each draft order must include at least one line item.
	LineItems []*DraftOrderLineItemInput `json:"lineItems,omitempty"`
	// Metafields attached to the draft order.
	Metafields []*MetafieldInput `json:"metafields,omitempty"`
	// The private metafields attached to the draft order.
	PrivateMetafields []*PrivateMetafieldInput `json:"privateMetafields,omitempty"`
	// The localization extensions attached to the draft order. For example, Tax IDs.
	LocalizationExtensions []*LocalizationExtensionInput `json:"localizationExtensions,omitempty"`
	// The text of an optional note that a shop owner can attach to the draft order.
	Note *null.String `json:"note,omitempty"`
	// The mailing address to where the order will be shipped.
	ShippingAddress *MailingAddressInput `json:"shippingAddress,omitempty"`
	// A shipping line object, which details the shipping method used.
	ShippingLine *ShippingLineInput `json:"shippingLine,omitempty"`
	// A comma separated list of tags that have been added to the draft order.
	Tags []null.String `json:"tags,omitempty"`
	// Whether or not taxes are exempt for the draft order.
	// If false, then Shopify will refer to the taxable field for each line item.
	// If a customer is applied to the draft order, then Shopify will use the customer's tax exempt field instead.
	TaxExempt *bool `json:"taxExempt,omitempty"`
	// Sent as part of a draft order object to load customer shipping information.
	UseCustomerDefaultAddress *bool `json:"useCustomerDefaultAddress,omitempty"`
}

// Return type for `draftOrderInvoicePreview` mutation.
type DraftOrderInvoicePreviewPayload struct {
	// HTML to preview the draft order invoice email.
	PreviewHTML *null.String `json:"previewHtml,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `draftOrderInvoiceSend` mutation.
type DraftOrderInvoiceSendPayload struct {
	// The draft order an invoice email is sent for.
	DraftOrder *DraftOrder `json:"draftOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Represents a line item included in a draft order.
type DraftOrderLineItem struct {
	// Discount which will be applied to the line item or the overall order.
	AppliedDiscount *DraftOrderAppliedDiscount `json:"appliedDiscount,omitempty"`
	// Whether this is a product variant line item, or a custom line item.
	// If set to true indicates a custom line item. If set to false indicates a product variant line item.
	Custom bool `json:"custom,omitempty"`
	// List of additional information (metafields) about the line item.
	CustomAttributes []*Attribute `json:"customAttributes,omitempty"`
	// Line item price after discounts are applied.
	DiscountedTotal null.String `json:"discountedTotal,omitempty"`
	// The `discountedTotal` divided by `quantity`, resulting in the value of the discount per unit.
	DiscountedUnitPrice null.String `json:"discountedUnitPrice,omitempty"`
	// Name of the service provider who fulfilled the order.
	//
	// Valid values are either **manual** or the name of the provider.
	// For example, **amazon**, **shipwire**.
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty"`
	// Weight in grams. Can only be specified if this is a custom line item.
	Grams *int `json:"grams,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Image associated with the draft order line item.
	Image *Image `json:"image,omitempty"`
	// Whether the line item represents the puchase of a gift card.
	IsGiftCard bool `json:"isGiftCard,omitempty"`
	// Name of the product.
	Name null.String `json:"name,omitempty"`
	// Total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
	OriginalTotal null.String `json:"originalTotal,omitempty"`
	// Variant price without any discounts applied.
	OriginalUnitPrice null.String `json:"originalUnitPrice,omitempty"`
	// The product corresponding to the line item’s product variant.
	Product *Product `json:"product,omitempty"`
	// Number of variant items requested in the draft order.
	Quantity int `json:"quantity,omitempty"`
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping,omitempty"`
	// Variant SKU number.
	Sku *null.String `json:"sku,omitempty"`
	// A list of tax line objects, each of which details the total taxes applicable to the order.
	TaxLines []*TaxLine `json:"taxLines,omitempty"`
	// Whether the variant is taxable.
	Taxable bool `json:"taxable,omitempty"`
	// Title of the product or variant (this field only applies to custom line items).
	Title null.String `json:"title,omitempty"`
	// Total value of the discount applied to the line item.
	TotalDiscount null.String `json:"totalDiscount,omitempty"`
	// Associated variant for the line item.
	Variant *ProductVariant `json:"variant,omitempty"`
	// Name of the variant.
	VariantTitle *null.String `json:"variantTitle,omitempty"`
	// Name of the vendor who made the variant.
	Vendor *null.String `json:"vendor,omitempty"`
	// Weight unit and value for a draft order line item.
	Weight *Weight `json:"weight,omitempty"`
}

func (DraftOrderLineItem) IsNode() {}

// An auto-generated type for paginating through multiple DraftOrderLineItems.
type DraftOrderLineItemConnection struct {
	// A list of edges.
	Edges []*DraftOrderLineItemEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one DraftOrderLineItem and a cursor during pagination.
type DraftOrderLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of DraftOrderLineItemEdge.
	Node *DraftOrderLineItem `json:"node,omitempty"`
}

// The input fields used to create a line item for a draft order.
type DraftOrderLineItemInput struct {
	// Discount which will be applied to the line item.
	AppliedDiscount *DraftOrderAppliedDiscountInput `json:"appliedDiscount,omitempty"`
	// Represents a generic custom attribute using a key value pair.
	CustomAttributes []*AttributeInput `json:"customAttributes,omitempty"`
	// Ignored when variant ID is provided. This argument is deprecated: Use `weight` instead.
	Grams *int `json:"grams,omitempty"`
	// Ignored when variant ID is provided.
	OriginalUnitPrice *null.String `json:"originalUnitPrice,omitempty"`
	// The number of products that were purchased.
	Quantity int `json:"quantity,omitempty"`
	// Ignored when variant ID is provided.
	RequiresShipping *bool `json:"requiresShipping,omitempty"`
	// Ignored when variant ID is provided.
	Sku *null.String `json:"sku,omitempty"`
	// Ignored when variant ID is provided.
	Taxable *bool `json:"taxable,omitempty"`
	// Ignored when variant ID is provided.
	Title *null.String `json:"title,omitempty"`
	// The ID of the product variant corresponding to the line item.
	// Null if custom line item. Required if product variant line item.
	VariantID *null.String `json:"variantId,omitempty"`
	// Specifies the weight unit and value inputs.
	// Ignored when variant ID is provided.
	Weight *WeightInput `json:"weight,omitempty"`
}

// Return type for `draftOrderUpdate` mutation.
type DraftOrderUpdatePayload struct {
	// The updated draft order.
	DraftOrder *DraftOrder `json:"draftOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Represents a single duty for a line item.
type Duty struct {
	// The ISO code of the country of origin of the line item.
	CountryCodeOfOrigin *CountryCode `json:"countryCodeOfOrigin,omitempty"`
	// The harmonized system code of the line item.
	HarmonizedSystemCode *null.String `json:"harmonizedSystemCode,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The price of the duty for the line item.
	Price *MoneyBag `json:"price,omitempty"`
	// The TaxLine objects connected to the duty for the line item.
	TaxLines []*TaxLine `json:"taxLines,omitempty"`
}

func (Duty) IsNode() {}

// The attribute editable information.
type EditableProperty struct {
	// Whether the attribute is locked for editing.
	Locked bool `json:"locked,omitempty"`
	// The reason the attribute is locked for editing.
	Reason *null.String `json:"reason,omitempty"`
}

// Specifies the fields for an email.
type EmailInput struct {
	// Specifies the email subject.
	Subject *null.String `json:"subject,omitempty"`
	// Specifies the email recipient.
	To *null.String `json:"to,omitempty"`
	// Specifies the email sender.
	From *null.String `json:"from,omitempty"`
	// Specifies the email body.
	Body *null.String `json:"body,omitempty"`
	// Specifies any bcc recipients for the email.
	Bcc []null.String `json:"bcc,omitempty"`
	// Specifies a custom message to include in the email.
	CustomMessage *null.String `json:"customMessage,omitempty"`
}

// Return type for `eventBridgeWebhookSubscriptionCreate` mutation.
type EventBridgeWebhookSubscriptionCreatePayload struct {
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
	// The webhook subscription that was created.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty"`
}

// Specifies the input fields for an EventBridge webhook subscription.
type EventBridgeWebhookSubscriptionInput struct {
	// ARN of the EventBridge event source.
	Arn *null.String `json:"arn,omitempty"`
	// The format in which the webhook subscription should send the data.
	Format *WebhookSubscriptionFormat `json:"format,omitempty"`
	// The list of fields to be included in the webhook subscription.
	IncludeFields []null.String `json:"includeFields,omitempty"`
	// The list of namespaces for any metafields that should be included in the webhook subscription.
	MetafieldNamespaces []null.String `json:"metafieldNamespaces,omitempty"`
}

// Return type for `eventBridgeWebhookSubscriptionUpdate` mutation.
type EventBridgeWebhookSubscriptionUpdatePayload struct {
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
	// The webhook subscription that was updated.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty"`
}

// An auto-generated type for paginating through multiple Events.
type EventConnection struct {
	// A list of edges.
	Edges []*EventEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one Event and a cursor during pagination.
type EventEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of EventEdge.
	Node Event `json:"node,omitempty"`
}

// Represents a video hosted outside of Shopify.
type ExternalVideo struct {
	// A word or phrase to share the nature or contents of a media.
	Alt *null.String `json:"alt,omitempty"`
	// The URL.
	EmbeddedURL null.String `json:"embeddedUrl,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The media content type.
	MediaContentType MediaContentType `json:"mediaContentType,omitempty"`
	// Any errors which have occurred on the media.
	MediaErrors []*MediaError `json:"mediaErrors,omitempty"`
	// The preview image for the media.
	Preview *MediaPreviewImage `json:"preview,omitempty"`
	// Current status of the media.
	Status MediaStatus `json:"status,omitempty"`
}

func (ExternalVideo) IsNode()  {}
func (ExternalVideo) IsMedia() {}

// Requirements that must be met before an app can be installed.
type FailedRequirement struct {
	// Action to be taken to resolve a failed requirement, including URL link.
	Action *NavigationItem `json:"action,omitempty"`
	// A concise set of copy strings to be displayed to merchants, to guide them in resolving problems your app
	// encounters when trying to make use of their Shop and its resources.
	Message null.String `json:"message,omitempty"`
}

// A filter option is one possible value in a search filter.
type FilterOption struct {
	// The filter option's label for display purposes.
	Label null.String `json:"label,omitempty"`
	// The filter option's value.
	Value null.String `json:"value,omitempty"`
}

// Return type for `flowTriggerReceive` mutation.
type FlowTriggerReceivePayload struct {
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Represents a fulfillment. In Shopify, a fulfillment represents a shipment of one or more items in an order. When an order has been completely fulfilled, it means that all the items that are included in the order have been sent to the customer. There can be more than one fulfillment for an order.
type Fulfillment struct {
	// The date and time when the fulfillment was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The date that this fulfillment was delivered.
	DeliveredAt *null.String `json:"deliveredAt,omitempty"`
	// Human readable display status for this fulfillment.
	DisplayStatus *FulfillmentDisplayStatus `json:"displayStatus,omitempty"`
	// The estimated date that this fulfillment will arrive.
	EstimatedDeliveryAt *null.String `json:"estimatedDeliveryAt,omitempty"`
	// The history of events associated with this fulfillment.
	Events *FulfillmentEventConnection `json:"events,omitempty"`
	// List of the fulfillment's line items.
	FulfillmentLineItems *FulfillmentLineItemConnection `json:"fulfillmentLineItems,omitempty"`
	// A list of fulfillment orders for the fulfillment.
	FulfillmentOrders *FulfillmentOrderConnection `json:"fulfillmentOrders,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The date and time when the fulfillment went into transit.
	InTransitAt *null.String `json:"inTransitAt,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// The location that the fulfillment was processed at.
	Location *Location `json:"location,omitempty"`
	// Human readable reference identifier for this fulfillment.
	Name null.String `json:"name,omitempty"`
	// The order for which the fulfillment was created.
	Order *Order `json:"order,omitempty"`
	// Whether any of the line items in the fulfillment require shipping.
	RequiresShipping bool `json:"requiresShipping,omitempty"`
	// Fulfillment service associated with the fulfillment.
	Service *FulfillmentService `json:"service,omitempty"`
	// The status of the fulfillment.
	Status FulfillmentStatus `json:"status,omitempty"`
	// Sum of all line item quantities for the fulfillment.
	TotalQuantity int `json:"totalQuantity,omitempty"`
	// Tracking information associated with the fulfillment,
	// such as the tracking company, tracking number, and tracking URL.
	TrackingInfo []*FulfillmentTrackingInfo `json:"trackingInfo,omitempty"`
	// The date and time when the fulfillment was last modified.
	UpdatedAt null.String `json:"updatedAt,omitempty"`
}

func (Fulfillment) IsLegacyInteroperability() {}
func (Fulfillment) IsNode()                   {}

// Return type for `fulfillmentCancel` mutation.
type FulfillmentCancelPayload struct {
	// The canceled fulfillment.
	Fulfillment *Fulfillment `json:"fulfillment,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple Fulfillments.
type FulfillmentConnection struct {
	// A list of edges.
	Edges []*FulfillmentEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `fulfillmentCreate` mutation.
type FulfillmentCreatePayload struct {
	// The created fulfillment.
	Fulfillment *Fulfillment `json:"fulfillment,omitempty"`
	// The order for which the fulfillment is created.
	Order *Order `json:"order,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentCreateV2` mutation.
type FulfillmentCreateV2Payload struct {
	// The created fulfillment.
	Fulfillment *Fulfillment `json:"fulfillment,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Fulfillment and a cursor during pagination.
type FulfillmentEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of FulfillmentEdge.
	Node *Fulfillment `json:"node,omitempty"`
}

// An event that describes a fulfillment at a time.
type FulfillmentEvent struct {
	// The time at which this fulfillment event happened.
	HappenedAt null.String `json:"happenedAt,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The status of this fulfillment event.
	Status FulfillmentEventStatus `json:"status,omitempty"`
}

func (FulfillmentEvent) IsNode() {}

// An auto-generated type for paginating through multiple FulfillmentEvents.
type FulfillmentEventConnection struct {
	// A list of edges.
	Edges []*FulfillmentEventEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one FulfillmentEvent and a cursor during pagination.
type FulfillmentEventEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of FulfillmentEventEdge.
	Node *FulfillmentEvent `json:"node,omitempty"`
}

// The input fields used to create a fulfillment.
type FulfillmentInput struct {
	// The ID of the order to be fulfilled.
	OrderID null.String `json:"orderId,omitempty"`
	// The line items to be fulfilled.
	LineItems []*FulfillmentLineItemInput `json:"lineItems,omitempty"`
	// Tracking numbers associated with the fulfillment.
	TrackingNumbers []null.String `json:"trackingNumbers,omitempty"`
	// The URLs to track the fulfillment.
	TrackingUrls []null.String `json:"trackingUrls,omitempty"`
	// The name of the tracking company.
	TrackingCompany *null.String `json:"trackingCompany,omitempty"`
	// Whether the customer is notified.
	// If set to true, a notification is sent when the fulfillment is created.
	NotifyCustomer *bool `json:"notifyCustomer,omitempty"`
	// A reference to the shipping method, such as `Free Shipping`.
	ShippingMethod *null.String `json:"shippingMethod,omitempty"`
	// The ID of the location from which the items will be fulfilled.
	LocationID null.String `json:"locationId,omitempty"`
}

// Represents a line item from an order that's included in a fulfillment.
type FulfillmentLineItem struct {
	// The total price after discounts are applied.
	DiscountedTotal null.String `json:"discountedTotal,omitempty"`
	// The total price after discounts are applied in shop and presentment currencies.
	DiscountedTotalSet *MoneyBag `json:"discountedTotalSet,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The associated order's line item.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The total price before discounts are applied.
	OriginalTotal null.String `json:"originalTotal,omitempty"`
	// The total price before discounts are applied in shop and presentment currencies.
	OriginalTotalSet *MoneyBag `json:"originalTotalSet,omitempty"`
	// Number of line items in the fulfillment.
	Quantity *int `json:"quantity,omitempty"`
}

func (FulfillmentLineItem) IsNode() {}

// An auto-generated type for paginating through multiple FulfillmentLineItems.
type FulfillmentLineItemConnection struct {
	// A list of edges.
	Edges []*FulfillmentLineItemEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.
type FulfillmentLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of FulfillmentLineItemEdge.
	Node *FulfillmentLineItem `json:"node,omitempty"`
}

// The input fields used to include a line item from an order in a fulfillment.
type FulfillmentLineItemInput struct {
	// The ID of the line item.
	ID null.String `json:"id,omitempty"`
	// The quantity of the line item to be fulfilled.
	Quantity *int `json:"quantity,omitempty"`
}

// Represents a fulfillment order. In Shopify, a fulfillment order represents a group of one or more items
// in an order that are to be fulfilled from the same location. There can be more than one fulfillment order
// for an order at a given location.
type FulfillmentOrder struct {
	// The fulfillment order's assigned location. This is the location expected to perform fulfillment.
	AssignedLocation *FulfillmentOrderAssignedLocation `json:"assignedLocation,omitempty"`
	// Delivery method of this fulfillment order.
	DeliveryMethod *DeliveryMethod `json:"deliveryMethod,omitempty"`
	// The destination where the items should be sent.
	Destination *FulfillmentOrderDestination `json:"destination,omitempty"`
	// The date and time at which the fulfillment order will be fulfillable.
	FulfillAt *null.String `json:"fulfillAt,omitempty"`
	// A list of fulfillments for the fulfillment order.
	Fulfillments *FulfillmentConnection `json:"fulfillments,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// A list of the fulfillment order's line items.
	LineItems *FulfillmentOrderLineItemConnection `json:"lineItems,omitempty"`
	// A list of locations that the fulfillment order can potentially move to.
	LocationsForMove *FulfillmentOrderLocationForMoveConnection `json:"locationsForMove,omitempty"`
	// A list of requests sent by the merchant to the fulfillment service for this fulfillment order.
	MerchantRequests *FulfillmentOrderMerchantRequestConnection `json:"merchantRequests,omitempty"`
	// The order that's associated with the fulfillment order.
	Order *Order `json:"order,omitempty"`
	// The request status of the fulfillment order.
	RequestStatus FulfillmentOrderRequestStatus `json:"requestStatus,omitempty"`
	// The status of the fulfillment order.
	Status FulfillmentOrderStatus `json:"status,omitempty"`
	// The actions that can be performed on this fulfillment order.
	SupportedActions []*FulfillmentOrderSupportedAction `json:"supportedActions,omitempty"`
}

func (FulfillmentOrder) IsNode() {}

// Return type for `fulfillmentOrderAcceptCancellationRequest` mutation.
type FulfillmentOrderAcceptCancellationRequestPayload struct {
	// The fulfillment order whose cancellation request was accepted.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderAcceptFulfillmentRequest` mutation.
type FulfillmentOrderAcceptFulfillmentRequestPayload struct {
	// The fulfillment order whose fulfillment request was accepted.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Represents the assigned location of a fulfillment order, which is a snapshot of the location
// at which the fulfillment order was created. The assigned location is expected to perform fulfillment.
type FulfillmentOrderAssignedLocation struct {
	// The first line of the address for the location.
	Address1 *null.String `json:"address1,omitempty"`
	// The second line of the address for the location.
	Address2 *null.String `json:"address2,omitempty"`
	// The city of the location.
	City *null.String `json:"city,omitempty"`
	// The two-letter country code of the location.
	CountryCode CountryCode `json:"countryCode,omitempty"`
	// The location where the fulfillment order was created. This can differ from the
	// `FulfillmentOrderAssignedLocation` if the location was updated since the fulfillment order
	// was closed.
	Location *Location `json:"location,omitempty"`
	// The name of the location.
	Name null.String `json:"name,omitempty"`
	// The phone number of the location.
	Phone *null.String `json:"phone,omitempty"`
	// The province of the location.
	Province *null.String `json:"province,omitempty"`
	// The ZIP code of the location.
	Zip *null.String `json:"zip,omitempty"`
}

// Return type for `fulfillmentOrderCancel` mutation.
type FulfillmentOrderCancelPayload struct {
	// The fulfillment order that was marked as canceled.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// The fulfillment order that was created to replace the canceled fulfillment order.
	ReplacementFulfillmentOrder *FulfillmentOrder `json:"replacementFulfillmentOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderClose` mutation.
type FulfillmentOrderClosePayload struct {
	// The fulfillment order that was marked as incomplete.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple FulfillmentOrders.
type FulfillmentOrderConnection struct {
	// A list of edges.
	Edges []*FulfillmentOrderEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Represents the destination where the items should be sent upon fulfillment.
type FulfillmentOrderDestination struct {
	// The first line of the address of the destination.
	Address1 *null.String `json:"address1,omitempty"`
	// The second line of the address of the destination.
	Address2 *null.String `json:"address2,omitempty"`
	// The city of the destination.
	City *null.String `json:"city,omitempty"`
	// The company of the destination.
	Company *null.String `json:"company,omitempty"`
	// The two-letter country code of the destination.
	CountryCode *CountryCode `json:"countryCode,omitempty"`
	// The email of the customer at the destination.
	Email *null.String `json:"email,omitempty"`
	// The first name of the customer at the destination.
	FirstName *null.String `json:"firstName,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The last name of the customer at the destination.
	LastName *null.String `json:"lastName,omitempty"`
	// The phone number of the customer at the destination.
	Phone *null.String `json:"phone,omitempty"`
	// The province of the destination.
	Province *null.String `json:"province,omitempty"`
	// The ZIP code of the destination.
	Zip *null.String `json:"zip,omitempty"`
}

func (FulfillmentOrderDestination) IsNode() {}

// An auto-generated type which holds one FulfillmentOrder and a cursor during pagination.
type FulfillmentOrderEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of FulfillmentOrderEdge.
	Node *FulfillmentOrder `json:"node,omitempty"`
}

// Represents a line item belonging to a fulfillment order.
type FulfillmentOrderLineItem struct {
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The associated order line item.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The number of units remaining to be fulfilled.
	RemainingQuantity int `json:"remainingQuantity,omitempty"`
	// The total number of units to be fulfilled.
	TotalQuantity int `json:"totalQuantity,omitempty"`
}

func (FulfillmentOrderLineItem) IsNode() {}

// An auto-generated type for paginating through multiple FulfillmentOrderLineItems.
type FulfillmentOrderLineItemConnection struct {
	// A list of edges.
	Edges []*FulfillmentOrderLineItemEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one FulfillmentOrderLineItem and a cursor during pagination.
type FulfillmentOrderLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of FulfillmentOrderLineItemEdge.
	Node *FulfillmentOrderLineItem `json:"node,omitempty"`
}

// The input fields used to include a line item from a fulfillment order.
type FulfillmentOrderLineItemInput struct {
	// The ID of the fulfillment order line item.
	ID null.String `json:"id,omitempty"`
	// The quantity of the fulfillment order line item.
	Quantity int `json:"quantity,omitempty"`
}

// The input fields used to include the line items of a specified fulfillment order that should be fulfilled.
type FulfillmentOrderLineItemsInput struct {
	// The ID of the fulfillment order.
	FulfillmentOrderID null.String `json:"fulfillmentOrderId,omitempty"`
	// The fulfillment order line items to be fulfilled.
	// If left blank, all line items of the fulfillment order will be fulfilled.
	FulfillmentOrderLineItems []*FulfillmentOrderLineItemInput `json:"fulfillmentOrderLineItems,omitempty"`
}

// A location that a fulfillment order can potentially move to.
type FulfillmentOrderLocationForMove struct {
	// The location being considered as the fulfillment order's new assigned location.
	Location *Location `json:"location,omitempty"`
	// A human-readable string with the reason why the fulfillment order, or some of its line items, can't be
	// moved to the location.
	Message *null.String `json:"message,omitempty"`
	// Whether the fulfillment order can be moved to the location.
	Movable bool `json:"movable,omitempty"`
}

// An auto-generated type for paginating through multiple FulfillmentOrderLocationForMoves.
type FulfillmentOrderLocationForMoveConnection struct {
	// A list of edges.
	Edges []*FulfillmentOrderLocationForMoveEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one FulfillmentOrderLocationForMove and a cursor during pagination.
type FulfillmentOrderLocationForMoveEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of FulfillmentOrderLocationForMoveEdge.
	Node *FulfillmentOrderLocationForMove `json:"node,omitempty"`
}

// Represents a request made by the merchant to a fulfillment service for a fulfillment order.
type FulfillmentOrderMerchantRequest struct {
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The kind of request made.
	Kind FulfillmentOrderMerchantRequestKind `json:"kind,omitempty"`
	// The optional message that the merchant included in the request.
	Message *null.String `json:"message,omitempty"`
	// Additional options requested by the merchant. These depend on the `kind` of the request.
	// For example, for a `FULFILLMENT_REQUEST`, one option is `notify_customer`, which indicates whether the
	// merchant intends to notify the customer upon fulfillment. The fulfillment service can then set
	// `notifyCustomer` when making calls to `FulfillmentCreateV2`.
	RequestOptions *null.String `json:"requestOptions,omitempty"`
	// The response from the fulfillment service.
	ResponseData *null.String `json:"responseData,omitempty"`
	// The timestamp when the request was made.
	SentAt null.String `json:"sentAt,omitempty"`
}

func (FulfillmentOrderMerchantRequest) IsNode() {}

// An auto-generated type for paginating through multiple FulfillmentOrderMerchantRequests.
type FulfillmentOrderMerchantRequestConnection struct {
	// A list of edges.
	Edges []*FulfillmentOrderMerchantRequestEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one FulfillmentOrderMerchantRequest and a cursor during pagination.
type FulfillmentOrderMerchantRequestEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of FulfillmentOrderMerchantRequestEdge.
	Node *FulfillmentOrderMerchantRequest `json:"node,omitempty"`
}

// Return type for `fulfillmentOrderMove` mutation.
type FulfillmentOrderMovePayload struct {
	// A new fulfillment order representing all items that were able to be moved to the new location.
	MovedFulfillmentOrder *FulfillmentOrder `json:"movedFulfillmentOrder,omitempty"`
	// The fulfillment order that was moved. On success, this fulfillment order will be closed.
	OriginalFulfillmentOrder *FulfillmentOrder `json:"originalFulfillmentOrder,omitempty"`
	// A new fulfillment order representing any items still assigned to the original location.
	// This is created if all line items on the original fulfillment order could not be moved to the new location
	// due to not being stocked there.
	RemainingFulfillmentOrder *FulfillmentOrder `json:"remainingFulfillmentOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderOpen` mutation.
type FulfillmentOrderOpenPayload struct {
	// The fulfillment order that was marked as open.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderRejectCancellationRequest` mutation.
type FulfillmentOrderRejectCancellationRequestPayload struct {
	// The fulfillment order whose cancellation request was rejected.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderRejectFulfillmentRequest` mutation.
type FulfillmentOrderRejectFulfillmentRequestPayload struct {
	// The fulfillment order whose fulfillment request was rejected.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderReschedule` mutation.
type FulfillmentOrderReschedulePayload struct {
	// The fulfillment order that was updated to the new fulfill at date.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*FulfillmentOrderRescheduleUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of FulfillmentOrderReschedule.
type FulfillmentOrderRescheduleUserError struct {
	// Error code to uniquely identify the error.
	Code *FulfillmentOrderRescheduleUserErrorCode `json:"code,omitempty"`
	// Path to the input field which caused the error.
	Field []null.String `json:"field,omitempty"`
	// The error message.
	Message null.String `json:"message,omitempty"`
}

func (FulfillmentOrderRescheduleUserError) IsDisplayableError() {}

// Return type for `fulfillmentOrderSubmitCancellationRequest` mutation.
type FulfillmentOrderSubmitCancellationRequestPayload struct {
	// The fulfillment order whose cancellation was requested.
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentOrderSubmitFulfillmentRequest` mutation.
type FulfillmentOrderSubmitFulfillmentRequestPayload struct {
	// The original fulfillment order intended to request fulfillment for.
	OriginalFulfillmentOrder *FulfillmentOrder `json:"originalFulfillmentOrder,omitempty"`
	// The fulfillment order that was submitted to the fulfillment service. This will be the same as
	// the original fulfillment order field. The exception to this is partial fulfillment requests or
	// fulfillment request for cancelled or incomplete fulfillment orders.
	SubmittedFulfillmentOrder *FulfillmentOrder `json:"submittedFulfillmentOrder,omitempty"`
	// This field will only be present for partial fulfillment requests. This will represent the new
	// fulfillment order with the remaining line items not submitted to the fulfillment service.
	UnsubmittedFulfillmentOrder *FulfillmentOrder `json:"unsubmittedFulfillmentOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Represents one of the methods that the fulfillment order supports.
type FulfillmentOrderSupportedAction struct {
	// The action value.
	Action FulfillmentOrderAction `json:"action,omitempty"`
	// The external URL to be used to initiate the fulfillment process outside Shopify.
	ExternalURL *null.String `json:"externalUrl,omitempty"`
}

// Represents a fulfillment service. A fulfillment service is a third-party service that prepares and ships orders on behalf of the store owner.
type FulfillmentService struct {
	// The callback URL the fulfillment service has registered for requests.
	CallbackURL *null.String `json:"callbackUrl,omitempty"`
	// Whether the fulfillment service has opted into fulfillment order based requests.
	FulfillmentOrdersOptIn bool `json:"fulfillmentOrdersOptIn,omitempty"`
	// Human-readable unique identifier for this fulfillment service.
	Handle null.String `json:"handle,omitempty"`
	// The ID of the fulfillment service.
	ID null.String `json:"id,omitempty"`
	// Whether the fulfillment service tracks product inventory and provides updates to Shopify.
	InventoryManagement bool `json:"inventoryManagement,omitempty"`
	// Location associated with the fulfillment service.
	Location *Location `json:"location,omitempty"`
	// Whether the fulfillment service supports local deliveries.
	ProductBased bool `json:"productBased,omitempty"`
	// The name of the fulfillment service as seen by merchants.
	ServiceName null.String `json:"serviceName,omitempty"`
	// Shipping methods associated with the fulfillment service provider.
	ShippingMethods []*ShippingMethod `json:"shippingMethods,omitempty"`
	// Type associated with the fulfillment service.
	Type FulfillmentServiceType `json:"type,omitempty"`
}

// Return type for `fulfillmentServiceCreate` mutation.
type FulfillmentServiceCreatePayload struct {
	// The created fulfillment service.
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentServiceDelete` mutation.
type FulfillmentServiceDeletePayload struct {
	// The ID of the deleted fulfillment service.
	DeletedID *null.String `json:"deletedId,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentServiceUpdate` mutation.
type FulfillmentServiceUpdatePayload struct {
	// The updated fulfillment service.
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Represents the tracking information for a fulfillment.
type FulfillmentTrackingInfo struct {
	// The name of the tracking company.
	Company *null.String `json:"company,omitempty"`
	// The tracking number of the fulfillment.
	Number *null.String `json:"number,omitempty"`
	// The URLs to track the fulfillment.
	URL *null.String `json:"url,omitempty"`
}

// Return type for `fulfillmentTrackingInfoUpdate` mutation.
type FulfillmentTrackingInfoUpdatePayload struct {
	// The updated fulfillment with tracking information.
	Fulfillment *Fulfillment `json:"fulfillment,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `fulfillmentTrackingInfoUpdateV2` mutation.
type FulfillmentTrackingInfoUpdateV2Payload struct {
	// The updated fulfillment with tracking information.
	Fulfillment *Fulfillment `json:"fulfillment,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// The input fields used to specify all possible fields for tracking information.
type FulfillmentTrackingInput struct {
	// The tracking number of the fulfillment.
	Number *null.String `json:"number,omitempty"`
	// The URL to track the fulfillment.
	URL *null.String `json:"url,omitempty"`
	// The name of the tracking company.
	Company *null.String `json:"company,omitempty"`
}

// The input fields used to create a fulfillment from fulfillment orders.
type FulfillmentV2Input struct {
	// The fulfillment's tracking information, including a tracking URL, a tracking number,
	// and the company associated with the fulfillment.
	TrackingInfo *FulfillmentTrackingInput `json:"trackingInfo,omitempty"`
	// Whether the customer is notified.
	// If set to true, a notification is sent when the fulfillment is created.
	NotifyCustomer *bool `json:"notifyCustomer,omitempty"`
	// Pairs of `fulfillment_order_id` and `fulfillment_order_line_items` that represent the fulfillment
	// order line items that have to be fulfilled for each fulfillment order.  For any given pair, if the
	// fulfillment order line items are left blank then all the fulfillment order line items of the
	// associated fulfillment order ID will be fulfilled.
	LineItemsByFulfillmentOrder []*FulfillmentOrderLineItemsInput `json:"lineItemsByFulfillmentOrder,omitempty"`
}

// Represents an image resource.
type Image struct {
	// A word or phrase to share the nature or contents of an image.
	AltText *null.String `json:"altText,omitempty"`
	// The original height of the image in pixels. Returns `null` if the image is not hosted by Shopify.
	Height *int `json:"height,omitempty"`
	// A unique identifier for the image.
	ID *null.String `json:"id,omitempty"`
	// The metafield associated with the resource.
	Metafield *Metafield `json:"metafield,omitempty"`
	// A paginated list of metafields associated with the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The location of the original image as a URL.
	//
	// If there are any existing transformations in the original source URL, they will remain and not be stripped.
	OriginalSrc null.String `json:"originalSrc,omitempty"`
	// Returns a private metafield found by namespace and key.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// List of private metafields.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The location of the image as a URL.
	Src null.String `json:"src,omitempty"`
	// The location of the transformed image as a URL.
	//
	// All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
	// Otherwise any transformations which an image type does not support will be ignored.
	TransformedSrc null.String `json:"transformedSrc,omitempty"`
	// The original width of the image in pixels. Returns `null` if the image is not hosted by Shopify.
	Width *int `json:"width,omitempty"`
}

func (Image) IsHasMetafields() {}

// An auto-generated type for paginating through multiple Images.
type ImageConnection struct {
	// A list of edges.
	Edges []*ImageEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one Image and a cursor during pagination.
type ImageEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of ImageEdge.
	Node *Image `json:"node,omitempty"`
}

// Specifies the input fields for an image.
type ImageInput struct {
	// Globally unique identifier.
	ID *null.String `json:"id,omitempty"`
	// A word or phrase to share the nature or contents of an image.
	AltText *null.String `json:"altText,omitempty"`
	// The URL of the image. May be a signed upload URL.
	Src *null.String `json:"src,omitempty"`
}

// Upload parameter of an image.
type ImageUploadParameter struct {
	// Parameter name.
	Name null.String `json:"name,omitempty"`
	// Parameter value.
	Value null.String `json:"value,omitempty"`
}

// Return type for `inventoryActivate` mutation.
type InventoryActivatePayload struct {
	// The newly activated inventory level.
	InventoryLevel *InventoryLevel `json:"inventoryLevel,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Specifies the items and their adjustments.
type InventoryAdjustItemInput struct {
	// ID of the inventory item to adjust.
	InventoryItemID null.String `json:"inventoryItemId,omitempty"`
	// Count by which to adjust the available quantity.
	AvailableDelta int `json:"availableDelta,omitempty"`
}

// Specifies the fields required to adjust the inventory quantity.
type InventoryAdjustQuantityInput struct {
	// ID of the inventory level to adjust.
	InventoryLevelID null.String `json:"inventoryLevelId,omitempty"`
	// Count by which to adjust the available quantity.
	AvailableDelta int `json:"availableDelta,omitempty"`
}

// Return type for `inventoryAdjustQuantity` mutation.
type InventoryAdjustQuantityPayload struct {
	// Represents the updated inventory quantity of an inventory item at a specific location.
	InventoryLevel *InventoryLevel `json:"inventoryLevel,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `inventoryBulkAdjustQuantityAtLocation` mutation.
type InventoryBulkAdjustQuantityAtLocationPayload struct {
	// The updated inventory quantities.
	InventoryLevels []*InventoryLevel `json:"inventoryLevels,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `inventoryDeactivate` mutation.
type InventoryDeactivatePayload struct {
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Represents the goods available to be shipped to a customer.
// It holds essential information about the goods, including SKU and whether it is tracked.
type InventoryItem struct {
	// The ISO code of the country of origin.
	CountryCodeOfOrigin *CountryCode `json:"countryCodeOfOrigin,omitempty"`
	// List of country specific harmonized system codes.
	CountryHarmonizedSystemCodes *CountryHarmonizedSystemCodeConnection `json:"countryHarmonizedSystemCodes,omitempty"`
	// The date and time when the inventory item was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The number of inventory items that share the same SKU with this item.
	DuplicateSkuCount int `json:"duplicateSkuCount,omitempty"`
	// The harmonized system code of the item.
	HarmonizedSystemCode *null.String `json:"harmonizedSystemCode,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// URL for inventory history web page.
	InventoryHistoryURL *null.String `json:"inventoryHistoryUrl,omitempty"`
	// Get the inventory level at a specific location.
	InventoryLevel *InventoryLevel `json:"inventoryLevel,omitempty"`
	// Paginated list of inventory levels for each location that the inventory item is stocked at.
	InventoryLevels *InventoryLevelConnection `json:"inventoryLevels,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// The number of locations where this inventory item is stocked.
	LocationsCount int `json:"locationsCount,omitempty"`
	// The ISO code of the province of origin.
	ProvinceCodeOfOrigin *null.String `json:"provinceCodeOfOrigin,omitempty"`
	// Whether the item requires shipping or not.
	RequiresShipping bool `json:"requiresShipping,omitempty"`
	// Inventory item SKU.
	Sku *null.String `json:"sku,omitempty"`
	// Whether the inventory quantities of inventory levels for the item are tracked or not.
	Tracked bool `json:"tracked,omitempty"`
	// Whether changes to the inventory item tracked attribute are allowed.
	TrackedEditable *EditableProperty `json:"trackedEditable,omitempty"`
	// Unit cost associated with the inventory item.
	UnitCost *MoneyV2 `json:"unitCost,omitempty"`
	// The date and time when the inventory item was updated.
	UpdatedAt null.String `json:"updatedAt,omitempty"`
	// The variant that owns this inventory item.
	Variant *ProductVariant `json:"variant,omitempty"`
}

func (InventoryItem) IsNode()                   {}
func (InventoryItem) IsLegacyInteroperability() {}

// An auto-generated type for paginating through multiple InventoryItems.
type InventoryItemConnection struct {
	// A list of edges.
	Edges []*InventoryItemEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one InventoryItem and a cursor during pagination.
type InventoryItemEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of InventoryItemEdge.
	Node *InventoryItem `json:"node,omitempty"`
}

// Inventory items.
type InventoryItemInput struct {
	// Unit cost associated with the inventory item, the currency is the shop's default currency.
	Cost *null.String `json:"cost,omitempty"`
	// Whether the inventory item is tracked.
	Tracked *bool `json:"tracked,omitempty"`
}

// Inventory items.
type InventoryItemUpdateInput struct {
	// Unit cost associated with the inventory item, the currency is the shop's default currency.
	Cost *null.String `json:"cost,omitempty"`
	// Whether the inventory item is tracked.
	Tracked *bool `json:"tracked,omitempty"`
	// The ISO code of the country of origin.
	CountryCodeOfOrigin *CountryCode `json:"countryCodeOfOrigin,omitempty"`
	// The ISO code of the province of origin.
	ProvinceCodeOfOrigin *null.String `json:"provinceCodeOfOrigin,omitempty"`
	// The harmonized system code of the inventory item.
	HarmonizedSystemCode *null.String `json:"harmonizedSystemCode,omitempty"`
	// List of country-specific harmonized system codes.
	CountryHarmonizedSystemCodes []*CountryHarmonizedSystemCodeInput `json:"countryHarmonizedSystemCodes,omitempty"`
}

// Return type for `inventoryItemUpdate` mutation.
type InventoryItemUpdatePayload struct {
	// The updated inventory item.
	InventoryItem *InventoryItem `json:"inventoryItem,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Represents the inventory quantity of an inventory item at a specific location.
type InventoryLevel struct {
	// Quantity of items available at the location.
	Available int `json:"available,omitempty"`
	// Whether inventoryDeactivate is allowed for this inventory level.
	CanDeactivate bool `json:"canDeactivate,omitempty"`
	// The date and time when the inventory level was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// Reason why canDeactivate is false, or impact of deactivating the inventory level.
	DeactivationAlert *null.String `json:"deactivationAlert,omitempty"`
	// Reason why canDeactivate is false with URLs linked in HTML, or impact of deactivating the inventory level.
	DeactivationAlertHTML *null.String `json:"deactivationAlertHtml,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Quantity of items incoming to the location.
	Incoming int `json:"incoming,omitempty"`
	// Inventory item associated with the inventory level.
	Item *InventoryItem `json:"item,omitempty"`
	// Location associated with the inventory level.
	Location *Location `json:"location,omitempty"`
	// The date and time when the inventory level was updated.
	UpdatedAt null.String `json:"updatedAt,omitempty"`
}

func (InventoryLevel) IsNode() {}

// An auto-generated type for paginating through multiple InventoryLevels.
type InventoryLevelConnection struct {
	// A list of edges.
	Edges []*InventoryLevelEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one InventoryLevel and a cursor during pagination.
type InventoryLevelEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of InventoryLevelEdge.
	Node *InventoryLevel `json:"node,omitempty"`
}

// Inventory quantity at a specific location.
type InventoryLevelInput struct {
	// Sets the quantity available at the location.
	AvailableQuantity int `json:"availableQuantity,omitempty"`
	// ID of the location.
	LocationID null.String `json:"locationId,omitempty"`
}

// A job corresponds to some long running task that the client should poll for status.
type Job struct {
	// This indicates if the job is still queued or has been run.
	Done bool `json:"done,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
}

// Return type for `kitSkillTriggerRequest` mutation.
type KitSkillTriggerRequestPayload struct {
	// Conversation unique identifier sent to Conversation API and returned to app developer.
	ConversationUID *null.String `json:"conversationUid,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// The total number of pending orders on a shop if less then a maximum, or that maximum.
// The atMax field indicates when this maximum has been reached.
type LimitedPendingOrderCount struct {
	// This is set when the number of pending orders has reached the maximum.
	AtMax bool `json:"atMax,omitempty"`
	// The number of pendings orders on the shop.
	// Limited to a maximum of 10000.
	Count int `json:"count,omitempty"`
}

// Represents a single line in a shopping cart.
type LineItem struct {
	// Whether the line item's variant has an ID and inventory is managed by Shopify.
	CanRestock bool `json:"canRestock,omitempty"`
	// The subscription contract associated with this line item.
	Contract *SubscriptionContract `json:"contract,omitempty"`
	// The line item's quantity minus the removed quantity.
	CurrentQuantity int `json:"currentQuantity,omitempty"`
	// List of additional information (metafields) about the line item.
	CustomAttributes []*Attribute `json:"customAttributes,omitempty"`
	// The discounts that have been allocated onto the line item by discount applications.
	DiscountAllocations []*DiscountAllocation `json:"discountAllocations,omitempty"`
	// The total line price after discounts are applied.
	DiscountedTotal null.String `json:"discountedTotal,omitempty"`
	// The total line price after discounts are applied in shop and presentment currencies.
	DiscountedTotalSet *MoneyBag `json:"discountedTotalSet,omitempty"`
	// The price of a single variant unit after line item discounts are applied.
	DiscountedUnitPrice null.String `json:"discountedUnitPrice,omitempty"`
	// The price of a single variant unit after line item discounts are applied in shop and presentment currencies.
	DiscountedUnitPriceSet *MoneyBag `json:"discountedUnitPriceSet,omitempty"`
	// The duties associated with the line item.
	Duties []*Duty `json:"duties,omitempty"`
	// The total number of units to fulfill.
	FulfillableQuantity int `json:"fulfillableQuantity,omitempty"`
	// Name of the service provider who fulfilled the order.
	//
	// Valid values are either **manual** or the name of the provider.
	// For example, **amazon**, **shipwire**.
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty"`
	// The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
	// 'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
	FulfillmentStatus null.String `json:"fulfillmentStatus,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The Image object associated to the line item's variant.
	Image *Image `json:"image,omitempty"`
	// Whether the line item can be edited or not.
	MerchantEditable bool `json:"merchantEditable,omitempty"`
	// Name of the product.
	Name null.String `json:"name,omitempty"`
	// A count of the number of line items that cannot be fulfilled.
	NonFulfillableQuantity int `json:"nonFulfillableQuantity,omitempty"`
	// Total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
	OriginalTotal null.String `json:"originalTotal,omitempty"`
	// Total price (without discounts) of the line item, based on the original unit price of the  variant x quantity in shop and presentment currencies.
	OriginalTotalSet *MoneyBag `json:"originalTotalSet,omitempty"`
	// Variant price without any discounts applied.
	OriginalUnitPrice null.String `json:"originalUnitPrice,omitempty"`
	// Variant price without any discounts applied in shop and presentment currencies.
	OriginalUnitPriceSet *MoneyBag `json:"originalUnitPriceSet,omitempty"`
	// The Product object associated with this line item's variant.
	Product *Product `json:"product,omitempty"`
	// The number of variant items ordered.
	Quantity int `json:"quantity,omitempty"`
	// The line item's quantity minus its refundedQuantity.
	RefundableQuantity int `json:"refundableQuantity,omitempty"`
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping,omitempty"`
	// Whether the line item's variant has an ID and inventory is managed by Shopify.
	Restockable bool `json:"restockable,omitempty"`
	// The selling plan details associated with the line item.
	SellingPlan *LineItemSellingPlan `json:"sellingPlan,omitempty"`
	// Variant SKU number.
	Sku *null.String `json:"sku,omitempty"`
	// The TaxLine object connected to this line item.
	TaxLines []*TaxLine `json:"taxLines,omitempty"`
	// Whether the variant is taxable.
	Taxable bool `json:"taxable,omitempty"`
	// Title of the product or variant (this field only applies to custom line items).
	Title null.String `json:"title,omitempty"`
	// The sum of all AppliedDiscounts on this line item.
	TotalDiscount null.String `json:"totalDiscount,omitempty"`
	// The sum of all AppliedDiscounts on this line item in shop and presentment currencies.
	TotalDiscountSet *MoneyBag `json:"totalDiscountSet,omitempty"`
	// The total discounted value of unfulfilled units.
	UnfulfilledDiscountedTotal null.String `json:"unfulfilledDiscountedTotal,omitempty"`
	// The total discounted value of unfulfilled units in shop and presentment currencies.
	UnfulfilledDiscountedTotalSet *MoneyBag `json:"unfulfilledDiscountedTotalSet,omitempty"`
	// The total value before discount of all unfulfilled units.
	UnfulfilledOriginalTotal null.String `json:"unfulfilledOriginalTotal,omitempty"`
	// The total value before discount of all unfulfilled units in shop and presentment currencies.
	UnfulfilledOriginalTotalSet *MoneyBag `json:"unfulfilledOriginalTotalSet,omitempty"`
	// The number of units not yet fulfilled.
	UnfulfilledQuantity int `json:"unfulfilledQuantity,omitempty"`
	// The Variant object associated with this line item.
	Variant *ProductVariant `json:"variant,omitempty"`
	// Name of the variant.
	VariantTitle *null.String `json:"variantTitle,omitempty"`
	// Name of the vendor who made the variant.
	Vendor *null.String `json:"vendor,omitempty"`
}

func (LineItem) IsNode() {}

// An auto-generated type for paginating through multiple LineItems.
type LineItemConnection struct {
	// A list of edges.
	Edges []*LineItemEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one LineItem and a cursor during pagination.
type LineItemEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of LineItemEdge.
	Node *LineItem `json:"node,omitempty"`
}

// Represents a single line in a shopping cart.
type LineItemMutable struct {
	// Whether the line item's variant has an ID and inventory is managed by Shopify.
	CanRestock bool `json:"canRestock,omitempty"`
	// List of additional information (metafields) about the line item.
	CustomAttributes []*Attribute `json:"customAttributes,omitempty"`
	// The discounts that have been allocated onto the line item by discount applications.
	DiscountAllocations []*DiscountAllocation `json:"discountAllocations,omitempty"`
	// The total line price after discounts are applied.
	DiscountedTotal null.String `json:"discountedTotal,omitempty"`
	// The total line price after discounts are applied in shop and presentment currencies.
	DiscountedTotalSet *MoneyBag `json:"discountedTotalSet,omitempty"`
	// The price of a single variant unit after line item discounts are applied.
	DiscountedUnitPrice null.String `json:"discountedUnitPrice,omitempty"`
	// The price of a single variant unit after line item discounts are applied in shop and presentment currencies.
	DiscountedUnitPriceSet *MoneyBag `json:"discountedUnitPriceSet,omitempty"`
	// The total number of units to fulfill.
	FulfillableQuantity int `json:"fulfillableQuantity,omitempty"`
	// Name of the service provider who fulfilled the order.
	//
	// Valid values are either **manual** or the name of the provider.
	// For example, **amazon**, **shipwire**.
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty"`
	// The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
	// 'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
	FulfillmentStatus null.String `json:"fulfillmentStatus,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The Image object associated to the line item's variant.
	Image *Image `json:"image,omitempty"`
	// Whether the line item can be edited or not.
	MerchantEditable bool `json:"merchantEditable,omitempty"`
	// Name of the product.
	Name null.String `json:"name,omitempty"`
	// A count of the number of line items that cannot be fulfilled.
	NonFulfillableQuantity int `json:"nonFulfillableQuantity,omitempty"`
	// Total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
	OriginalTotal null.String `json:"originalTotal,omitempty"`
	// Total price (without discounts) of the line item, based on the original unit price of the  variant x quantity in shop and presentment currencies.
	OriginalTotalSet *MoneyBag `json:"originalTotalSet,omitempty"`
	// Variant price without any discounts applied.
	OriginalUnitPrice null.String `json:"originalUnitPrice,omitempty"`
	// Variant price without any discounts applied in shop and presentment currencies.
	OriginalUnitPriceSet *MoneyBag `json:"originalUnitPriceSet,omitempty"`
	// The Product object associated with this line item's variant.
	Product *Product `json:"product,omitempty"`
	// Number of variant items ordered.
	Quantity int `json:"quantity,omitempty"`
	// The line item's quantity minus its refundedQuantity.
	RefundableQuantity int `json:"refundableQuantity,omitempty"`
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping,omitempty"`
	// Whether the line item's variant has an ID and inventory is managed by Shopify.
	Restockable bool `json:"restockable,omitempty"`
	// Variant SKU number.
	Sku *null.String `json:"sku,omitempty"`
	// The TaxLine object connected to this line item.
	TaxLines []*TaxLine `json:"taxLines,omitempty"`
	// Whether the variant is taxable.
	Taxable bool `json:"taxable,omitempty"`
	// Title of the product or variant (this field only applies to custom line items).
	Title null.String `json:"title,omitempty"`
	// The sum of all AppliedDiscounts on this line item.
	TotalDiscount null.String `json:"totalDiscount,omitempty"`
	// The sum of all AppliedDiscounts on this line item in shop and presentment currencies.
	TotalDiscountSet *MoneyBag `json:"totalDiscountSet,omitempty"`
	// The total discounted value of unfulfilled units.
	UnfulfilledDiscountedTotal null.String `json:"unfulfilledDiscountedTotal,omitempty"`
	// The total discounted value of unfulfilled units in shop and presentment currencies.
	UnfulfilledDiscountedTotalSet *MoneyBag `json:"unfulfilledDiscountedTotalSet,omitempty"`
	// The total value before discount of all unfulfilled units.
	UnfulfilledOriginalTotal null.String `json:"unfulfilledOriginalTotal,omitempty"`
	// The total value before discount of all unfulfilled units in shop and presentment currencies.
	UnfulfilledOriginalTotalSet *MoneyBag `json:"unfulfilledOriginalTotalSet,omitempty"`
	// The number of units not yet fulfilled.
	UnfulfilledQuantity int `json:"unfulfilledQuantity,omitempty"`
	// The Variant object associated with this line item.
	Variant *ProductVariant `json:"variant,omitempty"`
	// Name of the variant.
	VariantTitle *null.String `json:"variantTitle,omitempty"`
	// Name of the vendor who made the variant.
	Vendor *null.String `json:"vendor,omitempty"`
}

func (LineItemMutable) IsNode() {}

// An auto-generated type for paginating through multiple LineItemMutables.
type LineItemMutableConnection struct {
	// A list of edges.
	Edges []*LineItemMutableEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one LineItemMutable and a cursor during pagination.
type LineItemMutableEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of LineItemMutableEdge.
	Node *LineItemMutable `json:"node,omitempty"`
}

// Represents the selling plan for a line item.
type LineItemSellingPlan struct {
	// The name of the selling plan for display purposes.
	Name null.String `json:"name,omitempty"`
}

// A link to direct users to.
type Link struct {
	// A context-sensitive label for the link.
	Label null.String `json:"label,omitempty"`
	// The translations associated with the resource.
	Translations []*PublishedTranslation `json:"translations,omitempty"`
	// The URL that the link visits.
	URL null.String `json:"url,omitempty"`
}

func (Link) IsHasPublishedTranslations() {}

// A locale.
type Locale struct {
	// Locale ISO code.
	IsoCode null.String `json:"isoCode,omitempty"`
	// Locale name.
	Name null.String `json:"name,omitempty"`
}

// Represents the value captured by a localization extension, like a tax id.
type LocalizationExtension struct {
	// Country ISO 3166-1 alpha-2 code.
	CountryCode CountryCode `json:"countryCode,omitempty"`
	// The localized extension keys that are allowed.
	Key LocalizationExtensionKey `json:"key,omitempty"`
	// The purpose of this localization extension.
	Purpose LocalizationExtensionPurpose `json:"purpose,omitempty"`
	// The localized extension title.
	Title null.String `json:"title,omitempty"`
	// The value of the field.
	Value null.String `json:"value,omitempty"`
}

// An auto-generated type for paginating through multiple LocalizationExtensions.
type LocalizationExtensionConnection struct {
	// A list of edges.
	Edges []*LocalizationExtensionEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one LocalizationExtension and a cursor during pagination.
type LocalizationExtensionEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of LocalizationExtensionEdge.
	Node *LocalizationExtension `json:"node,omitempty"`
}

// Specifies the input fields for a LocalizationExtensionInput.
type LocalizationExtensionInput struct {
	// The key for the localization extension.
	Key LocalizationExtensionKey `json:"key,omitempty"`
	// The localization extension value.
	Value null.String `json:"value,omitempty"`
}

// Represents the location where the physical good resides.
type Location struct {
	// Whether this location can be reactivated.
	Activatable bool `json:"activatable,omitempty"`
	// The LocationAddress object for location.
	Address *LocationAddress `json:"address,omitempty"`
	// Whether the location address has been verified.
	AddressVerified bool `json:"addressVerified,omitempty"`
	// Whether this location can be deactivated.
	Deactivatable bool `json:"deactivatable,omitempty"`
	// Date and time the location was deactivated (null if location is still active). Following UTC ISO8601 format, e.g.: "2019-04-24T13:42:24Z".
	DeactivatedAt *null.String `json:"deactivatedAt,omitempty"`
	// Whether this location can be deleted.
	Deletable bool `json:"deletable,omitempty"`
	// Name of the service provider that fulfills from this location.
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty"`
	// Indicates whether this location can fulfill online orders.
	FulfillsOnlineOrders bool `json:"fulfillsOnlineOrders,omitempty"`
	// Indicates whether or not this location has active inventory.
	HasActiveInventory bool `json:"hasActiveInventory,omitempty"`
	// Indicates whether or not this location has unfulfilled orders.
	HasUnfulfilledOrders bool `json:"hasUnfulfilledOrders,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// A single inventory level for the given inventory item.
	InventoryLevel *InventoryLevel `json:"inventoryLevel,omitempty"`
	// Paginated list of inventory levels for inventory items stocked at the location.
	InventoryLevels *InventoryLevelConnection `json:"inventoryLevels,omitempty"`
	// Whether the location is active.
	IsActive bool `json:"isActive,omitempty"`
	// Whether the location is your primary location for shipping inventory.
	IsPrimary bool `json:"isPrimary,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// The name of the location.
	Name null.String `json:"name,omitempty"`
	// Indicates whether or not this location is used for calculating shipping rates.
	ShipsInventory bool `json:"shipsInventory,omitempty"`
	// List of suggested addresses for this location (empty if none).
	SuggestedAddresses []*LocationSuggestedAddress `json:"suggestedAddresses,omitempty"`
}

func (Location) IsNode()                   {}
func (Location) IsLegacyInteroperability() {}

// Represents the address of the location.
type LocationAddress struct {
	// The first line of the address for the location.
	Address1 *null.String `json:"address1,omitempty"`
	// The second line of the address for the location.
	Address2 *null.String `json:"address2,omitempty"`
	// The city of the location.
	City *null.String `json:"city,omitempty"`
	// The country of the location.
	Country *null.String `json:"country,omitempty"`
	// The two-letter country code of the location.
	CountryCode *null.String `json:"countryCode,omitempty"`
	// A formatted version of the location address.
	Formatted []null.String `json:"formatted,omitempty"`
	// The latitude coordinates of the location.
	Latitude *float64 `json:"latitude,omitempty"`
	// The longitude coordinates of the location.
	Longitude *float64 `json:"longitude,omitempty"`
	// The phone number of the location.
	Phone *null.String `json:"phone,omitempty"`
	// The province of the location.
	Province *null.String `json:"province,omitempty"`
	// The code for the region of the address, such as the province, state, or district.
	// For example QC for Quebec, Canada.
	ProvinceCode *null.String `json:"provinceCode,omitempty"`
	// The ZIP code of the location.
	Zip *null.String `json:"zip,omitempty"`
}

// An auto-generated type for paginating through multiple Locations.
type LocationConnection struct {
	// A list of edges.
	Edges []*LocationEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one Location and a cursor during pagination.
type LocationEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of LocationEdge.
	Node *Location `json:"node,omitempty"`
}

// Represents a suggested address for a location.
type LocationSuggestedAddress struct {
	// The first line of the suggested address.
	Address1 *null.String `json:"address1,omitempty"`
	// The second line of the suggested address.
	Address2 *null.String `json:"address2,omitempty"`
	// The city of the suggested address.
	City *null.String `json:"city,omitempty"`
	// The country of the suggested address.
	Country *null.String `json:"country,omitempty"`
	// The country code of the suggested address.
	CountryCode *CountryCode `json:"countryCode,omitempty"`
	// A formatted version of the suggested address.
	Formatted []null.String `json:"formatted,omitempty"`
	// The province of the suggested address.
	Province *null.String `json:"province,omitempty"`
	// The province code of the suggested address.
	ProvinceCode *null.String `json:"provinceCode,omitempty"`
	// The ZIP code of the suggested address.
	Zip *null.String `json:"zip,omitempty"`
}

// Represents a customer mailing address.
//
// For example, a customer's default address and an order's billing address are both mailling addresses.
type MailingAddress struct {
	// The first line of the address. Typically the street address or PO Box number.
	Address1 *null.String `json:"address1,omitempty"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	Address2 *null.String `json:"address2,omitempty"`
	// The name of the city, district, village, or town.
	City *null.String `json:"city,omitempty"`
	// The name of the customer's company or organization.
	Company *null.String `json:"company,omitempty"`
	// The name of the country.
	Country *null.String `json:"country,omitempty"`
	// The two-letter code for the country of the address.
	//
	// For example, US.
	CountryCode *null.String `json:"countryCode,omitempty"`
	// The two-letter code for the country of the address.
	//
	// For example, US.
	CountryCodeV2 *CountryCode `json:"countryCodeV2,omitempty"`
	// The first name of the customer.
	FirstName *null.String `json:"firstName,omitempty"`
	// A formatted version of the address, customized by the provided arguments.
	Formatted []null.String `json:"formatted,omitempty"`
	// A comma-separated list of the values for city, province, and country.
	FormattedArea *null.String `json:"formattedArea,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The last name of the customer.
	LastName *null.String `json:"lastName,omitempty"`
	// The latitude coordinate of the customer address.
	Latitude *float64 `json:"latitude,omitempty"`
	// The longitude coordinate of the customer address.
	Longitude *float64 `json:"longitude,omitempty"`
	// The full name of the customer, based on firstName and lastName.
	Name *null.String `json:"name,omitempty"`
	// A unique phone number for the customer.
	//
	// Formatted using E.164 standard. For example, _+16135551111_.
	Phone *null.String `json:"phone,omitempty"`
	// The region of the address, such as the province, state, or district.
	Province *null.String `json:"province,omitempty"`
	// The two-letter code for the region.
	//
	// For example, ON.
	ProvinceCode *null.String `json:"provinceCode,omitempty"`
	// The zip or postal code of the address.
	Zip *null.String `json:"zip,omitempty"`
}

func (MailingAddress) IsNode() {}

// The fields used to create or update a mailing address.
type MailingAddressInput struct {
	// The first line of the address. Typically the street address or PO Box number.
	Address1 *null.String `json:"address1,omitempty"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	Address2 *null.String `json:"address2,omitempty"`
	// The name of the city, district, village, or town.
	City *null.String `json:"city,omitempty"`
	// The name of the customer's company or organization.
	Company *null.String `json:"company,omitempty"`
	// The name of the country. This argument is deprecated: Use `countryCode` instead.
	Country *null.String `json:"country,omitempty"`
	// The two-letter code for the country of the address.
	CountryCode *CountryCode `json:"countryCode,omitempty"`
	// The first name of the customer.
	FirstName *null.String `json:"firstName,omitempty"`
	// This argument is deprecated: Not needed for 90% of mutations, and provided separately where it is needed.
	ID *null.String `json:"id,omitempty"`
	// The last name of the customer.
	LastName *null.String `json:"lastName,omitempty"`
	// A unique phone number for the customer.
	//
	// Formatted using E.164 standard. For example, _+16135551111_.
	Phone *null.String `json:"phone,omitempty"`
	// The region of the address, such as the province, state, or district. This argument is deprecated: Use `provinceCode` instead.
	Province *null.String `json:"province,omitempty"`
	// The code for the region of the address, such as the province, state, or district.
	// For example QC for Quebec, Canada.
	ProvinceCode *null.String `json:"provinceCode,omitempty"`
	// The zip or postal code of the address.
	Zip *null.String `json:"zip,omitempty"`
}

// Manual discount applications capture the intentions of a discount that was manually created for an order.
type ManualDiscountApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod,omitempty"`
	// The description of the discount application.
	Description *null.String `json:"description,omitempty"`
	// An ordered index that can be used to identify the discount application and indicate the precedence
	// of the discount application for calculations.
	Index int `json:"index,omitempty"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection,omitempty"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType,omitempty"`
	// The title of the discount application.
	Title null.String `json:"title,omitempty"`
	// The value of the discount application.
	Value PricingValue `json:"value,omitempty"`
}

func (ManualDiscountApplication) IsDiscountApplication() {}

// A marketing activity represents marketing created by an app on behalf of the merchant.
type MarketingActivity struct {
	// The url of the activity listing page of this marketing activity in the marketing section.
	ActivityListURL *null.String `json:"activityListUrl,omitempty"`
	// Amount spent on this marketing activity.
	AdSpend *MoneyV2 `json:"adSpend,omitempty"`
	// The app which created this marketing activity.
	App *App `json:"app,omitempty"`
	// Errors generated when app was trying to complete this activity.
	AppErrors *MarketingActivityExtensionAppErrors `json:"appErrors,omitempty"`
	// The budget for this marketing activity.
	Budget *MarketingBudget `json:"budget,omitempty"`
	// The date and time when the marketing activity was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The form data of the marketing activity.
	FormData *null.String `json:"formData,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The broad category of marketing, used for reporting aggregation.
	MarketingChannel MarketingChannel `json:"marketingChannel,omitempty"`
	// Associated marketing event of this marketing activity.
	MarketingEvent *MarketingEvent `json:"marketingEvent,omitempty"`
	// A contextual description of the marketing activity based on the platform and tactic used.
	SourceAndMedium null.String `json:"sourceAndMedium,omitempty"`
	// Status helps to identify if this marketing activity has been completed, queued, failed etc.
	Status MarketingActivityStatus `json:"status,omitempty"`
	// StatusBadgeType helps to identify the color of the status badge.
	StatusBadgeType *MarketingActivityStatusBadgeType `json:"statusBadgeType,omitempty"`
	// Status label to describe the status of the marketing activity.
	StatusLabel null.String `json:"statusLabel,omitempty"`
	// The [date and time](
	//           https://help.shopify.com/https://en.wikipedia.org/wiki/ISO_8601
	//           ) when the activity's status last changed.
	StatusTransitionedAt *null.String `json:"statusTransitionedAt,omitempty"`
	// The method of marketing used for this marketing activity.
	Tactic MarketingTactic `json:"tactic,omitempty"`
	// Expected status set by app in prior to an asynchronous operation.
	TargetStatus *MarketingActivityStatus `json:"targetStatus,omitempty"`
	// Title of this marketing activity.
	Title null.String `json:"title,omitempty"`
	// The date and time when the marketing activity was updated.
	UpdatedAt null.String `json:"updatedAt,omitempty"`
	// The set of UTM parameters being tracked for this marketing activity.
	UtmParameters *UTMParameters `json:"utmParameters,omitempty"`
}

func (MarketingActivity) IsNode() {}

// This type combines budget amount and its marketing budget type.
type MarketingActivityBudgetInput struct {
	// Budget type for marketing activity.
	BudgetType *MarketingBudgetBudgetType `json:"budgetType,omitempty"`
	// Amount of budget for the marketing activity.
	Total *MoneyInput `json:"total,omitempty"`
}

// An auto-generated type for paginating through multiple MarketingActivities.
type MarketingActivityConnection struct {
	// A list of edges.
	Edges []*MarketingActivityEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Specifies the input fields required to create a marketing activity.
type MarketingActivityCreateInput struct {
	// The title of the marketing activity.
	MarketingActivityTitle *null.String `json:"marketingActivityTitle,omitempty"`
	// The form data in JSON serialized as a string.
	FormData *null.String `json:"formData,omitempty"`
	// The ID of the marketing activity extension.
	MarketingActivityExtensionID null.String `json:"marketingActivityExtensionId,omitempty"`
	// Encoded context containing marketing campaign id.
	Context *null.String `json:"context,omitempty"`
	// Specifies the
	// [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
	// that are associated with a related marketing campaign. UTMInput is required for all Marketing
	// tactics except Storefront App.
	Utm *UTMInput `json:"utm,omitempty"`
	// The current state of the marketing activity.
	Status MarketingActivityStatus `json:"status,omitempty"`
	// The budget for this marketing activity.
	Budget *MarketingActivityBudgetInput `json:"budget,omitempty"`
}

// Return type for `marketingActivityCreate` mutation.
type MarketingActivityCreatePayload struct {
	// The created marketing activity.
	MarketingActivity *MarketingActivity `json:"marketingActivity,omitempty"`
	// The path to return back to shopify admin from embedded editor.
	RedirectPath *null.String `json:"redirectPath,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one MarketingActivity and a cursor during pagination.
type MarketingActivityEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of MarketingActivityEdge.
	Node *MarketingActivity `json:"node,omitempty"`
}

// Represents errors returned from apps when using the marketing activity extension.
type MarketingActivityExtensionAppErrors struct {
	// The app error type.
	Code MarketingActivityExtensionAppErrorCode `json:"code,omitempty"`
	// The list of errors returned by the app.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Specifies the input fields required to update a marketing activity.
type MarketingActivityUpdateInput struct {
	// The id for this marketing activity.
	ID null.String `json:"id,omitempty"`
	// The ID of the recommendation this marketing activity was created from, if one exists.
	MarketingRecommendationID *null.String `json:"marketingRecommendationId,omitempty"`
	// The title of this marketing activity.
	Title *null.String `json:"title,omitempty"`
	// The budget for this marketing activity.
	Budget *MarketingActivityBudgetInput `json:"budget,omitempty"`
	// The cumulative amount spent on this marketing activity. This argument is deprecated: Use `MarketingEngagementCreate.MarketingEngagementInput.adSpend` GraphQL to send the ad spend.
	AdSpend *MoneyInput `json:"adSpend,omitempty"`
	// The current state of the marketing activity.
	Status *MarketingActivityStatus `json:"status,omitempty"`
	// The target state of the marketing activity.
	TargetStatus *MarketingActivityStatus `json:"targetStatus,omitempty"`
	// The form data of the marketing activity.
	FormData *null.String `json:"formData,omitempty"`
	// Specifies the
	// [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
	// that are associated with a related marketing campaign. UTMInput is required for all Marketing
	// tactics except Storefront App. This utm param can be only set once and never modified.
	Utm *UTMInput `json:"utm,omitempty"`
	// A list of the items that were marketed in this marketing activity. Valid types for these items are:
	// * `Product`
	// * `Shop` (Must be your current shop).
	MarketedResources []null.String `json:"marketedResources,omitempty"`
	// Encoded context provided by Shopify during the update marketing activity callback. This argument is deprecated: This context is no longer needed by Shopify in the callback.
	Context *null.String `json:"context,omitempty"`
	// Error messages generated when app was trying to complete this activity.
	Errors *null.String `json:"errors,omitempty"`
}

// Return type for `marketingActivityUpdate` mutation.
type MarketingActivityUpdatePayload struct {
	// The updated marketing activity.
	MarketingActivity *MarketingActivity `json:"marketingActivity,omitempty"`
	// The path to return back to shopify admin from embedded editor.
	RedirectPath *null.String `json:"redirectPath,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// This type combines budget amount and its marketing budget type.
type MarketingBudget struct {
	// The budget type for a marketing activity.
	BudgetType MarketingBudgetBudgetType `json:"budgetType,omitempty"`
	// The amount of budget for marketing activity.
	Total *MoneyV2 `json:"total,omitempty"`
}

// Marketing engagement represents customer activity taken on a marketing event.
type MarketingEngagement struct {
	// The total ad spend for the day, if the marketing event is a paid ad with a daily spend.
	AdSpend *MoneyV2 `json:"adSpend,omitempty"`
	// The total number of clicks on the marketing event for the day.
	ClicksCount *int `json:"clicksCount,omitempty"`
	// The total number of comments for the day.
	CommentsCount *int `json:"commentsCount,omitempty"`
	// The total number of complaints for the day.
	ComplaintsCount *int `json:"complaintsCount,omitempty"`
	// The total number of fails for the day.
	FailsCount *int `json:"failsCount,omitempty"`
	// The total number of favorites for the day.
	FavoritesCount *int `json:"favoritesCount,omitempty"`
	// The date time at which the data was fetched.
	FetchedAt *null.String `json:"fetchedAt,omitempty"`
	// The total number of impressions for the day.
	ImpressionsCount *int `json:"impressionsCount,omitempty"`
	// Whether the engagements are reported as lifetime values rather than daily totals.
	IsCumulative *bool `json:"isCumulative,omitempty"`
	// The marketing activity related to this engagement.
	MarketingActivity *MarketingActivity `json:"marketingActivity,omitempty"`
	// The date that these engagements occurred on.
	OccurredOn null.String `json:"occurredOn,omitempty"`
	// The total number of sends for the day.
	SendsCount *int `json:"sendsCount,omitempty"`
	// The total number of shares for the day.
	SharesCount *int `json:"sharesCount,omitempty"`
	// The total number of unique clicks for the day.
	UniqueClicksCount *int `json:"uniqueClicksCount,omitempty"`
	// The total number of unique views for the day.
	UniqueViewsCount *int `json:"uniqueViewsCount,omitempty"`
	// The total number of unsubscribes for the day.
	UnsubscribesCount *int `json:"unsubscribesCount,omitempty"`
	// The UTC Offset that the app is using to determine which date to allocate spend to.
	UtcOffset *null.String `json:"utcOffset,omitempty"`
	// The total number of views for the day.
	ViewsCount *int `json:"viewsCount,omitempty"`
}

// Return type for `marketingEngagementCreate` mutation.
type MarketingEngagementCreatePayload struct {
	// The marketing engagement that was created.
	MarketingEngagement *MarketingEngagement `json:"marketingEngagement,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// This object represents marketing engagement input fields for a marketing engagement.
type MarketingEngagementInput struct {
	// The date that these engagements occurred on.
	OccurredOn null.String `json:"occurredOn,omitempty"`
	// The total number of impressions for the day.
	ImpressionsCount *int `json:"impressionsCount,omitempty"`
	// The total number of views for the day.
	ViewsCount *int `json:"viewsCount,omitempty"`
	// The total number of clicks on the marketing event for the day.
	ClicksCount *int `json:"clicksCount,omitempty"`
	// The total number of shares for the day.
	SharesCount *int `json:"sharesCount,omitempty"`
	// The total number of favorites for the day.
	FavoritesCount *int `json:"favoritesCount,omitempty"`
	// The total number of comments for the day.
	CommentsCount *int `json:"commentsCount,omitempty"`
	// The total number of unsubscribes for the day.
	UnsubscribesCount *int `json:"unsubscribesCount,omitempty"`
	// The total number of complaints for the day.
	ComplaintsCount *int `json:"complaintsCount,omitempty"`
	// The total number of fails for the day.
	FailsCount *int `json:"failsCount,omitempty"`
	// The total number of sends for the day.
	SendsCount *int `json:"sendsCount,omitempty"`
	// The total number of unique views for the day.
	UniqueViewsCount *int `json:"uniqueViewsCount,omitempty"`
	// The total number of unique clicks for the day.
	UniqueClicksCount *int `json:"uniqueClicksCount,omitempty"`
	// The total ad spend for the day, if the marketing event is a paid ad with a daily spend.
	AdSpend *MoneyInput `json:"adSpend,omitempty"`
	// Whether the engagements are reported as lifetime values rather than daily totals.
	IsCumulative *bool `json:"isCumulative,omitempty"`
	// The UTC Offset that the app is using to determine which date to allocate spend to.
	UtcOffset *null.String `json:"utcOffset,omitempty"`
	// The date time at which the data was fetched.
	FetchedAt *null.String `json:"fetchedAt,omitempty"`
}

// Represents actions that market a merchant's store or products.
type MarketingEvent struct {
	// The app that the marketing event is attributed to.
	App *App `json:"app,omitempty"`
	// The marketing channel used by the marketing event.
	Channel *MarketingChannel `json:"channel,omitempty"`
	// A human-readable description of the marketing event.
	Description *null.String `json:"description,omitempty"`
	// The date and time when the marketing event ended.
	EndedAt *null.String `json:"endedAt,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// The URL where the marketing event can be managed.
	ManageURL *null.String `json:"manageUrl,omitempty"`
	// The URL where the marketing event can be previewed.
	PreviewURL *null.String `json:"previewUrl,omitempty"`
	// An optional ID that helps Shopify validate engagement data.
	RemoteID *null.String `json:"remoteId,omitempty"`
	// The date and time when the marketing event is scheduled to end.
	ScheduledToEndAt *null.String `json:"scheduledToEndAt,omitempty"`
	// Where the `MarketingEvent` occurred and what kind of content was used.
	// Because `utmSource` and `utmMedium` are often used interchangeably, this is
	// based on a combination of `marketingChannel`, `referringDomain`, and `type` to
	// provide a consistent representation for any given piece of marketing
	// regardless of the app that created it.
	SourceAndMedium null.String `json:"sourceAndMedium,omitempty"`
	// The date and time when the marketing event started.
	StartedAt null.String `json:"startedAt,omitempty"`
	// The display text for the marketing event type.
	TargetTypeDisplayText null.String `json:"targetTypeDisplayText,omitempty"`
	// The marketing event type.
	Type MarketingTactic `json:"type,omitempty"`
	// The name of the marketing campaign.
	UtmCampaign *null.String `json:"utmCampaign,omitempty"`
	// The medium that the marketing campaign is using. Example values: `cpc`, `banner`.
	UtmMedium *null.String `json:"utmMedium,omitempty"`
	// The referrer of the marketing event. Example values: `google`, `newsletter`.
	UtmSource *null.String `json:"utmSource,omitempty"`
}

func (MarketingEvent) IsNode()                   {}
func (MarketingEvent) IsLegacyInteroperability() {}

// An auto-generated type for paginating through multiple MarketingEvents.
type MarketingEventConnection struct {
	// A list of edges.
	Edges []*MarketingEventEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one MarketingEvent and a cursor during pagination.
type MarketingEventEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of MarketingEventEdge.
	Node *MarketingEvent `json:"node,omitempty"`
}

// An auto-generated type for paginating through multiple Media.
type MediaConnection struct {
	// A list of edges.
	Edges []*MediaEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one Media and a cursor during pagination.
type MediaEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of MediaEdge.
	Node Media `json:"node,omitempty"`
}

// Represents a media error.
type MediaError struct {
	// Code representing the type of error.
	Code MediaErrorCode `json:"code,omitempty"`
	// Additional details regarding the error.
	Details *null.String `json:"details,omitempty"`
	// Translated error message.
	Message null.String `json:"message,omitempty"`
}

// Represents a Shopify hosted image.
type MediaImage struct {
	// A word or phrase to share the nature or contents of a media.
	Alt *null.String `json:"alt,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The image for the media.
	Image *Image `json:"image,omitempty"`
	// The media content type.
	MediaContentType MediaContentType `json:"mediaContentType,omitempty"`
	// Any errors which have occurred on the media.
	MediaErrors []*MediaError `json:"mediaErrors,omitempty"`
	// The MIME type of the image.
	MimeType *null.String `json:"mimeType,omitempty"`
	// The preview image for the media.
	Preview *MediaPreviewImage `json:"preview,omitempty"`
	// Current status of the media.
	Status MediaStatus `json:"status,omitempty"`
}

func (MediaImage) IsNode()  {}
func (MediaImage) IsMedia() {}

// Represents the preview image for a media.
type MediaPreviewImage struct {
	// The preview image for the media.
	Image *Image `json:"image,omitempty"`
	// Current status of the preview image.
	Status MediaPreviewImageStatus `json:"status,omitempty"`
}

// Represents an error that happens during execution of a Media query or mutation.
type MediaUserError struct {
	// Error code to uniquely identify the error.
	Code *MediaUserErrorCode `json:"code,omitempty"`
	// Path to the input field which caused the error.
	Field []null.String `json:"field,omitempty"`
	// The error message.
	Message null.String `json:"message,omitempty"`
}

func (MediaUserError) IsDisplayableError() {}

// Metafields represent custom metadata attached to a resource. Metafields can be sorted into namespaces and are
// composed of keys, values, and value types.
type Metafield struct {
	// The date and time when the metafield was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The description of a metafield.
	Description *null.String `json:"description,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The key name for a metafield.
	Key null.String `json:"key,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// The namespace for a metafield.
	Namespace null.String `json:"namespace,omitempty"`
	// Owner type of a metafield visible to the Storefront API.
	OwnerType MetafieldOwnerType `json:"ownerType,omitempty"`
	// The date and time when the metafield was updated.
	UpdatedAt null.String `json:"updatedAt,omitempty"`
	// The value of a metafield.
	Value null.String `json:"value,omitempty"`
	// Represents the metafield value type.
	ValueType MetafieldValueType `json:"valueType,omitempty"`
}

func (Metafield) IsNode()                   {}
func (Metafield) IsLegacyInteroperability() {}

// An auto-generated type for paginating through multiple Metafields.
type MetafieldConnection struct {
	// A list of edges.
	Edges []*MetafieldEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Specifies the input fields to delete a metafield.
type MetafieldDeleteInput struct {
	// The ID of the metafield to delete.
	ID null.String `json:"id,omitempty"`
}

// Return type for `metafieldDelete` mutation.
type MetafieldDeletePayload struct {
	// The ID of the deleted metafield.
	DeletedID *null.String `json:"deletedId,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Metafield and a cursor during pagination.
type MetafieldEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of MetafieldEdge.
	Node *Metafield `json:"node,omitempty"`
}

// Specifies the input fields for a metafield.
type MetafieldInput struct {
	// The description of the metafield .
	Description *null.String `json:"description,omitempty"`
	// The unique ID of the metafield.
	ID *null.String `json:"id,omitempty"`
	// The key name of the metafield.
	Key *null.String `json:"key,omitempty"`
	// The namespace for a metafield.
	Namespace *null.String `json:"namespace,omitempty"`
	// The value of a metafield.
	Value *null.String `json:"value,omitempty"`
	// The value type of a metafield.
	ValueType *MetafieldValueType `json:"valueType,omitempty"`
}

// Represents an allowlist record that enables a metafield to be visible to the storefront.
type MetafieldStorefrontVisibility struct {
	// The date and time when the allowlist record was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Key of a metafield in the visibility allowlist.
	Key null.String `json:"key,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// Namespace of a metafield in the visibility allowlist.
	Namespace null.String `json:"namespace,omitempty"`
	// Owner type of a metafield in the visibility allowlist.
	OwnerType MetafieldOwnerType `json:"ownerType,omitempty"`
	// The date and time when the allowlist record was updated.
	UpdatedAt null.String `json:"updatedAt,omitempty"`
}

func (MetafieldStorefrontVisibility) IsNode()                   {}
func (MetafieldStorefrontVisibility) IsLegacyInteroperability() {}

// An auto-generated type for paginating through multiple MetafieldStorefrontVisibilities.
type MetafieldStorefrontVisibilityConnection struct {
	// A list of edges.
	Edges []*MetafieldStorefrontVisibilityEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `metafieldStorefrontVisibilityCreate` mutation.
type MetafieldStorefrontVisibilityCreatePayload struct {
	// The metafield storefront visibility that was created.
	MetafieldStorefrontVisibility *MetafieldStorefrontVisibility `json:"metafieldStorefrontVisibility,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `metafieldStorefrontVisibilityDelete` mutation.
type MetafieldStorefrontVisibilityDeletePayload struct {
	// The ID of the deleted metafield storefront visibility.
	DeletedMetafieldStorefrontVisibilityID *null.String `json:"deletedMetafieldStorefrontVisibilityId,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one MetafieldStorefrontVisibility and a cursor during pagination.
type MetafieldStorefrontVisibilityEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of MetafieldStorefrontVisibilityEdge.
	Node *MetafieldStorefrontVisibility `json:"node,omitempty"`
}

// Specifies the input fields for a MetafieldStorefrontVisibilityInput.
type MetafieldStorefrontVisibilityInput struct {
	// The namespace of the metafield to be visible to the storefront api.
	Namespace null.String `json:"namespace,omitempty"`
	// The key of the metafield to be visible to the storefront api.
	Key null.String `json:"key,omitempty"`
	// The core resource ( e.g.: Product ) that owns this metafield.
	OwnerType MetafieldOwnerType `json:"ownerType,omitempty"`
}

// Represents a Shopify hosted 3D model.
type Model3d struct {
	// A word or phrase to share the nature or contents of a media.
	Alt *null.String `json:"alt,omitempty"`
	// The filename of the 3d model.
	Filename null.String `json:"filename,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The media content type.
	MediaContentType MediaContentType `json:"mediaContentType,omitempty"`
	// Any errors which have occurred on the media.
	MediaErrors []*MediaError `json:"mediaErrors,omitempty"`
	// The original source for a 3d model.
	OriginalSource *Model3dSource `json:"originalSource,omitempty"`
	// The preview image for the media.
	Preview *MediaPreviewImage `json:"preview,omitempty"`
	// The sources for a 3d model.
	Sources []*Model3dSource `json:"sources,omitempty"`
	// Current status of the media.
	Status MediaStatus `json:"status,omitempty"`
}

func (Model3d) IsNode()  {}
func (Model3d) IsMedia() {}

// Represents a source for a Shopify hosted 3d model.
type Model3dSource struct {
	// The filesize of the 3d model.
	Filesize int `json:"filesize,omitempty"`
	// The format of the 3d model.
	Format null.String `json:"format,omitempty"`
	// The MIME type of the 3d model.
	MimeType null.String `json:"mimeType,omitempty"`
	// The URL of the 3d model.
	URL null.String `json:"url,omitempty"`
}

// A collection of monetary values in their respective currencies.
type MoneyBag struct {
	// Amount in presentment currency.
	PresentmentMoney *MoneyV2 `json:"presentmentMoney,omitempty"`
	// Amount in shop currency.
	ShopMoney *MoneyV2 `json:"shopMoney,omitempty"`
}

// Specifies the fields for a monetary value with currency.
type MoneyInput struct {
	// Decimal money amount.
	Amount null.String `json:"amount,omitempty"`
	// Currency of the money.
	CurrencyCode CurrencyCode `json:"currencyCode,omitempty"`
}

// A monetary value with currency.
//
// To format currencies, combine this type's amount and currencyCode fields with your client's locale.
//
// For example, in JavaScript you could use Intl.NumberFormat:
//
// ```js
// new Intl.NumberFormat(locale, {
//   style: 'currency',
//   currency: currencyCode
// }).format(amount);
// ```
//
// Other formatting libraries include:
//
// * iOS - [NumberFormatter](https://developer.apple.com/documentation/foundation/numberformatter)
// * Android - [NumberFormat](https://developer.android.com/reference/java/text/NumberFormat.html)
// * PHP - [NumberFormatter](http://php.net/manual/en/class.numberformatter.php)
//
// For a more general solution, the [Unicode CLDR number formatting database] is available with many implementations
// (such as [TwitterCldr](https://github.com/twitter/twitter-cldr-rb)).
type MoneyV2 struct {
	// Decimal money amount.
	Amount null.String `json:"amount,omitempty"`
	// Currency of the money.
	CurrencyCode CurrencyCode `json:"currencyCode,omitempty"`
}

func (MoneyV2) IsDeliveryConditionCriteria()               {}
func (MoneyV2) IsPricingValue()                            {}
func (MoneyV2) IsSellingPlanPricingPolicyAdjustmentValue() {}

// An individual move to perform of an object to a position.
type MoveInput struct {
	// The ID of the object to be moved.
	ID null.String `json:"id,omitempty"`
	// The new position of the object in the set, using a 0 based index.
	NewPosition null.String `json:"newPosition,omitempty"`
}

// A signed upload parameter for uploading an asset to Shopify.
type MutationsStagedUploadTargetGenerateUploadParameter struct {
	// The upload parameter name.
	Name null.String `json:"name,omitempty"`
	// The upload parameter value.
	Value null.String `json:"value,omitempty"`
}

// A navigation item, holding basic link attributes.
type NavigationItem struct {
	// The unique identifier of the navigation item.
	ID null.String `json:"id,omitempty"`
	// The name of the navigation item.
	Title null.String `json:"title,omitempty"`
	// The URL of the page that the navigation item links to.
	URL null.String `json:"url,omitempty"`
}

// Represents an article in an OnlineStoreBlog object. Articles appear in reverse chronological order, with the
// most recent entry at the top of the blog's page. A blog can contain any number of articles.
type OnlineStoreArticle struct {
	// A default cursor for use in pagination.
	DefaultCursor null.String `json:"defaultCursor,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The translations associated with the resource.
	Translations []*PublishedTranslation `json:"translations,omitempty"`
}

func (OnlineStoreArticle) IsNode()                     {}
func (OnlineStoreArticle) IsNavigable()                {}
func (OnlineStoreArticle) IsHasPublishedTranslations() {}

// Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
// to be used as a type of magazine or newsletter for the shop, with content that changes over time.
type OnlineStoreBlog struct {
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The translations associated with the resource.
	Translations []*PublishedTranslation `json:"translations,omitempty"`
}

func (OnlineStoreBlog) IsNode()                     {}
func (OnlineStoreBlog) IsHasPublishedTranslations() {}

// A custom page on the Online Store.
type OnlineStorePage struct {
	// A default cursor for use in pagination.
	DefaultCursor null.String `json:"defaultCursor,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The translations associated with the resource.
	Translations []*PublishedTranslation `json:"translations,omitempty"`
}

func (OnlineStorePage) IsNode()                     {}
func (OnlineStorePage) IsNavigable()                {}
func (OnlineStorePage) IsHasPublishedTranslations() {}

// An order represents an agreement to do business between a customer and a merchant.
type Order struct {
	// Generated messages that appear at the top of an order page in the Shopify admin.
	// For example, _this is a test order_.
	Alerts []*ResourceAlert `json:"alerts,omitempty"`
	// Mailing address provided by the customer.
	// Not all orders have mailing addresses.
	BillingAddress *MailingAddress `json:"billingAddress,omitempty"`
	// Whether the billing address matches the shipping address.
	BillingAddressMatchesShippingAddress bool `json:"billingAddressMatchesShippingAddress,omitempty"`
	// Whether the order can be manually marked as paid.
	CanMarkAsPaid bool `json:"canMarkAsPaid,omitempty"`
	// Whether notifications can be sent to the customer or not.
	CanNotifyCustomer bool `json:"canNotifyCustomer,omitempty"`
	// Reason the order was canceled.
	// Returns null if the order wasn't canceled.
	CancelReason *OrderCancelReason `json:"cancelReason,omitempty"`
	// Date and time when the order was canceled.
	// Returns null if the order wasn't canceled.
	CancelledAt *null.String `json:"cancelledAt,omitempty"`
	// Whether payment for the order can be captured.
	// Returns true when the customer's credit card has been authorized for payment and the authorization period has not expired.
	Capturable bool `json:"capturable,omitempty"`
	// Amount of the order-level discount (does not contain any line item discounts).
	CartDiscountAmount *null.String `json:"cartDiscountAmount,omitempty"`
	// Amount of the order-level discount (does not contain any line item discounts) in shop and presentment currencies.
	CartDiscountAmountSet *MoneyBag `json:"cartDiscountAmountSet,omitempty"`
	// Channel that created the order.
	Channel *Channel `json:"channel,omitempty"`
	// The ip address of the client that is associated with this order.
	ClientIP *null.String `json:"clientIp,omitempty"`
	// Whether the order is closed.
	Closed bool `json:"closed,omitempty"`
	// Date and time when the order closed.
	// If the order is not closed, then this field is null.
	ClosedAt *null.String `json:"closedAt,omitempty"`
	// Whether inventory has been reserved for the order.
	Confirmed bool `json:"confirmed,omitempty"`
	// Date and time when the order was created in Shopify.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The currency of the store at the time of the order.
	// If payment hasn't occurred, then this field is null.
	CurrencyCode CurrencyCode `json:"currencyCode,omitempty"`
	// The amount of the order-level discount minus the amounts for line items that have been returned. This doesn't include line item discounts.
	CurrentCartDiscountAmountSet *MoneyBag `json:"currentCartDiscountAmountSet,omitempty"`
	// The sum of the quantities for the line items that contribute to the order's subtotal.
	CurrentSubtotalLineItemsQuantity int `json:"currentSubtotalLineItemsQuantity,omitempty"`
	// The subtotal of line items and their discounts minus the line items that have been returned. This includes order-level discounts, unless the argument with_cart_discount is set to false. This doesn't include shipping costs and shipping discounts. Taxes are not included unless the order is a taxes-included order.
	CurrentSubtotalPriceSet *MoneyBag `json:"currentSubtotalPriceSet,omitempty"`
	// The taxes charged for the order minus the taxes for line items that have been returned.
	CurrentTaxLines []*TaxLine `json:"currentTaxLines,omitempty"`
	// The total amount discounted from the order (including order-level and line item discounts) minus the amounts for items that have been returned.
	CurrentTotalDiscountsSet *MoneyBag `json:"currentTotalDiscountsSet,omitempty"`
	// The total amount of duties for the order. If duties aren't applicable, then this value is `null`.
	CurrentTotalDutiesSet *MoneyBag `json:"currentTotalDutiesSet,omitempty"`
	// The total amount of the order (including taxes and discounts) minus the amounts for line items that have been returned.
	CurrentTotalPriceSet *MoneyBag `json:"currentTotalPriceSet,omitempty"`
	// The total of all taxes applied to the order minus the taxes for line items that have been returned.
	CurrentTotalTaxSet *MoneyBag `json:"currentTotalTaxSet,omitempty"`
	// The total weight (grams) of the order minus the weights for line items that have been returned.
	CurrentTotalWeight null.String `json:"currentTotalWeight,omitempty"`
	// Custom information added to the order by your customer
	// (Also referred to as note attributes).
	CustomAttributes []*Attribute `json:"customAttributes,omitempty"`
	// Unique identifier of the customer who placed the order.
	// Not all orders have customers associated with them.
	Customer *Customer `json:"customer,omitempty"`
	// Whether the customer agreed to receive marketing materials.
	CustomerAcceptsMarketing bool `json:"customerAcceptsMarketing,omitempty"`
	// Description of the customer's experience with the store leading up to the order.
	CustomerJourney *CustomerJourney `json:"customerJourney,omitempty"`
	// Description of the customer's experience with the store leading up to the order.
	// Loaded asynchronously, consumers should poll until the 'ready' field resolves to true.
	CustomerJourneySummary *CustomerJourneySummary `json:"customerJourneySummary,omitempty"`
	// A two-letter or three-letter language code, optionally followed by a region modifier.
	// Example values could be 'en', 'en-CA', 'en-PIRATE'.
	CustomerLocale *null.String `json:"customerLocale,omitempty"`
	// Discounts that have been applied on the order.
	DiscountApplications *DiscountApplicationConnection `json:"discountApplications,omitempty"`
	// Discount code provided by the customer.
	DiscountCode *null.String `json:"discountCode,omitempty"`
	// Primary address of the customer, which is shown on the order.
	DisplayAddress *MailingAddress `json:"displayAddress,omitempty"`
	// Financial status of the order that can be shown to the merchant.
	// This field does not capture all the possible details of an order's financial state and should only be used for display summary purposes.
	DisplayFinancialStatus *OrderDisplayFinancialStatus `json:"displayFinancialStatus,omitempty"`
	// Fulfillment status for the order that can be shown to the merchant.
	// This field does not capture all the possible details of an order's fulfillment state. It should only be used for display summary purposes.
	DisplayFulfillmentStatus OrderDisplayFulfillmentStatus `json:"displayFulfillmentStatus,omitempty"`
	// Summary of each dispute associated with the order. Sorted in ascending (ASC) order by ID.
	Disputes []*OrderDisputeSummary `json:"disputes,omitempty"`
	// List of possible fulfilments that can be made for the order (includes line items that can be partially fulfilled).
	DraftFulfillments []*DraftFulfillment `json:"draftFulfillments,omitempty"`
	// Whether the order has had any edits applied or not.
	Edited bool `json:"edited,omitempty"`
	// Email address provided by the customer.
	Email *null.String `json:"email,omitempty"`
	// List of internal events associated with the order.
	Events *EventConnection `json:"events,omitempty"`
	// Whether there are items that can be fulfilled.
	// After an order is completely fulfilled (or completely refunded without any fulfillments) then this field returns false.
	Fulfillable bool `json:"fulfillable,omitempty"`
	// List of fulfillment orders with pagination.
	FulfillmentOrders *FulfillmentOrderConnection `json:"fulfillmentOrders,omitempty"`
	// List of shipments for the order.
	Fulfillments []*Fulfillment `json:"fulfillments,omitempty"`
	// Whether the order has been paid in full.
	FullyPaid bool `json:"fullyPaid,omitempty"`
	// Whether the merchant added timeline comments to the order.
	HasTimelineComment bool `json:"hasTimelineComment,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// First page of the online store that the customer visited before they submitted the order, for displaying to humans.
	LandingPageDisplayText *null.String `json:"landingPageDisplayText,omitempty"`
	// First page of the online store that the customer visited before they submitted the order.
	LandingPageURL *null.String `json:"landingPageUrl,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// List of the order's line items.
	LineItems *LineItemConnection `json:"lineItems,omitempty"`
	// List of the order's line items after any edits. Only available on Developer Preview.
	LineItemsMutable *LineItemMutableConnection `json:"lineItemsMutable,omitempty"`
	// List of localization extensions for the resource.
	LocalizationExtensions *LocalizationExtensionConnection `json:"localizationExtensions,omitempty"`
	// If the order was processed using Shopify POS, then this is its location as provided by the merchant.
	Location *null.String `json:"location,omitempty"`
	// Whether the order can be edited or not.
	MerchantEditable bool `json:"merchantEditable,omitempty"`
	// A list of reasons of why the order cannot be edited.
	MerchantEditableErrors []null.String `json:"merchantEditableErrors,omitempty"`
	// The metafield associated with the resource.
	Metafield *Metafield `json:"metafield,omitempty"`
	// A paginated list of metafields associated with the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// Unique identifier for the order that appears on the order.
	// For example, _#1000_ or _Store1001.
	// This value is not unique across multiple stores.
	Name null.String `json:"name,omitempty"`
	// Net payment for the order, based on the total amount received - total amount refunded.
	NetPayment null.String `json:"netPayment,omitempty"`
	// Net payment for the order, based on the total amount received - total amount refunded in shop and presentment currencies.
	NetPaymentSet *MoneyBag `json:"netPaymentSet,omitempty"`
	// Line items that can't be fulfilled.
	// For example, because some or all of the items have been refunded, or the item is not one which can be fulfilled, such as a tip.
	// These line items would be 'lost' if you only considered the line items in draft fulfillments or fulfillments.
	NonFulfillableLineItems *LineItemConnection `json:"nonFulfillableLineItems,omitempty"`
	// Contents of the note associated with the order.
	Note *null.String `json:"note,omitempty"`
	// The total amount of duties prior to any applied edits for the order. If duties aren't applicable, then this value is `null`.
	OriginalTotalDutiesSet *MoneyBag `json:"originalTotalDutiesSet,omitempty"`
	// Total price of the order prior to any applied edits in shop and presentment currencies.
	OriginalTotalPriceSet *MoneyBag `json:"originalTotalPriceSet,omitempty"`
	// The payment collection details for an order requiring additional payment.
	PaymentCollectionDetails *OrderPaymentCollectionDetails `json:"paymentCollectionDetails,omitempty"`
	// List of all payment gateways used for the order.
	// For example, _authorize_net_ and _Cash on Delivery (COD)_.
	PaymentGatewayNames []null.String `json:"paymentGatewayNames,omitempty"`
	// Phone number provided by the customer.
	Phone *null.String `json:"phone,omitempty"`
	// If the order was processed using Shopify POS, then this is its location as provided by the merchant.
	PhysicalLocation *Location `json:"physicalLocation,omitempty"`
	// The payment currency of the customer for this order.
	PresentmentCurrencyCode CurrencyCode `json:"presentmentCurrencyCode,omitempty"`
	// Returns a private metafield found by namespace and key.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// List of private metafields.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// Date and time when the order was processed.
	// When orders are imported from an app, this date and time may not match the date and time when the order was created.
	ProcessedAt null.String `json:"processedAt,omitempty"`
	// Publication that created the order.
	Publication *Publication `json:"publication,omitempty"`
	// Marketing referral code from the link that the customer clicked to visit your store.
	// Supports the following URL attributes: _ref_, _source_, or _r_. For example, if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.
	ReferralCode *null.String `json:"referralCode,omitempty"`
	// Website that sent the customer to your online store.
	ReferrerDisplayText *null.String `json:"referrerDisplayText,omitempty"`
	// Webpage where the customer clicked a link that sent them to your online store.
	// For example, _Google_ or _randomblog.com/page1_.
	ReferrerURL *null.String `json:"referrerUrl,omitempty"`
	// The difference between suggested and actual refund amounts.  A positive value indicates a difference in the merchants favor and a negative value indicates a difference in the customers favor.
	RefundDiscrepancySet *MoneyBag `json:"refundDiscrepancySet,omitempty"`
	// Whether the order can be refunded.
	Refundable bool `json:"refundable,omitempty"`
	// List of refunds that have been applied to the order.
	Refunds []*Refund `json:"refunds,omitempty"`
	// Whether any line item in the order requires physical shipping.
	RequiresShipping bool `json:"requiresShipping,omitempty"`
	// Whether the order can be restocked.
	Restockable bool `json:"restockable,omitempty"`
	// Fraud risk level of the order.
	RiskLevel OrderRiskLevel `json:"riskLevel,omitempty"`
	// The order risks associated with this order.
	Risks []*OrderRisk `json:"risks,omitempty"`
	// Mailing address for shipping provided by the customer.
	ShippingAddress *MailingAddress `json:"shippingAddress,omitempty"`
	// Line item that contains the shipping costs.
	ShippingLine *ShippingLine `json:"shippingLine,omitempty"`
	// List of line items that contains the shipping costs.
	ShippingLines *ShippingLineConnection `json:"shippingLines,omitempty"`
	// The sum of the quantities for the line items that contribute to the order's subtotal.
	SubtotalLineItemsQuantity int `json:"subtotalLineItemsQuantity,omitempty"`
	// Subtotal of the line items and their discounts (does not contain shipping costs and shipping discounts).
	SubtotalPrice *null.String `json:"subtotalPrice,omitempty"`
	// Subtotal of the line items and their discounts (does not contain shipping costs and shipping discounts) in shop and presentment currencies.
	SubtotalPriceSet *MoneyBag `json:"subtotalPriceSet,omitempty"`
	// The details of the suggested refund. This response can be used to submit a RefundCreate mutation.
	SuggestedRefund *SuggestedRefund `json:"suggestedRefund,omitempty"`
	// A comma separated list of tags that have been added to the order.
	Tags []null.String `json:"tags,omitempty"`
	// Taxes charged for the line item.
	TaxLines []*TaxLine `json:"taxLines,omitempty"`
	// Whether taxes are included in the subtotal price of the order.
	TaxesIncluded bool `json:"taxesIncluded,omitempty"`
	// Whether the order is a test.
	// Test orders are made using the Shopify Bogus Gateway or a payment provider with test mode enabled.
	Test bool `json:"test,omitempty"`
	// Amount authorized for the order, that is uncaptured or undercaptured.
	TotalCapturable null.String `json:"totalCapturable,omitempty"`
	// Amount authorized for the order, that is uncaptured or undercaptured in shop and presentment currencies.
	TotalCapturableSet *MoneyBag `json:"totalCapturableSet,omitempty"`
	// Total amount discounted from the order (includes order-level and line item discounts).
	TotalDiscounts *null.String `json:"totalDiscounts,omitempty"`
	// Total amount discounted from the order (includes order-level and line item discounts) in shop and presentment currencies.
	TotalDiscountsSet *MoneyBag `json:"totalDiscountsSet,omitempty"`
	// Total amount of money not yet authorized for the order.
	TotalOutstandingSet *MoneyBag `json:"totalOutstandingSet,omitempty"`
	// Total amount of the order (includes taxes and discounts).
	TotalPrice null.String `json:"totalPrice,omitempty"`
	// Total amount of the order (includes taxes and discounts) in shop and presentment currencies.
	TotalPriceSet *MoneyBag `json:"totalPriceSet,omitempty"`
	// Total amount received by the customer for the order.
	TotalReceived null.String `json:"totalReceived,omitempty"`
	// Total amount received by the customer for the order in shop and presentment currencies.
	TotalReceivedSet *MoneyBag `json:"totalReceivedSet,omitempty"`
	// Total amount refunded for the order.
	TotalRefunded null.String `json:"totalRefunded,omitempty"`
	// Total amount refunded for the order in shop and presentment currencies.
	TotalRefundedSet *MoneyBag `json:"totalRefundedSet,omitempty"`
	// Total amount refunded for shipping in shop and presentment currencies.
	TotalRefundedShippingSet *MoneyBag `json:"totalRefundedShippingSet,omitempty"`
	// Total amount charged for shipping the order.
	TotalShippingPrice null.String `json:"totalShippingPrice,omitempty"`
	// Total amount charged for shipping the order in shop and presentment currencies.
	TotalShippingPriceSet *MoneyBag `json:"totalShippingPriceSet,omitempty"`
	// Total of all taxes applied to the order.
	TotalTax *null.String `json:"totalTax,omitempty"`
	// Total of all taxes applied to the order in shop and presentment currencies.
	TotalTaxSet *MoneyBag `json:"totalTaxSet,omitempty"`
	// Total tip amount received for the order.
	TotalTipReceived *MoneyV2 `json:"totalTipReceived,omitempty"`
	// Total tip received for the order in shop and presentment currencies.
	TotalTipReceivedSet *MoneyBag `json:"totalTipReceivedSet,omitempty"`
	// Total weight (grams) of the order.
	TotalWeight *null.String `json:"totalWeight,omitempty"`
	// List of all transactions associated with the order.
	Transactions []*OrderTransaction `json:"transactions,omitempty"`
	// Whether no payments have been made for the order.
	// If no payments have been made for the order, then this returns true.
	Unpaid bool `json:"unpaid,omitempty"`
	// Date and time when the order was last modified.
	UpdatedAt null.String `json:"updatedAt,omitempty"`
}

func (Order) IsCommentEventEmbed()         {}
func (Order) IsNode()                      {}
func (Order) IsCommentEventSubject()       {}
func (Order) IsHasMetafields()             {}
func (Order) IsLegacyInteroperability()    {}
func (Order) IsHasEvents()                 {}
func (Order) IsHasLocalizationExtensions() {}

// Specifies the authorized transaction to capture and the total amount to capture from it.
type OrderCaptureInput struct {
	// The ID of the order to capture.
	ID null.String `json:"id,omitempty"`
	// The ID of the authorized transaction to capture.
	ParentTransactionID null.String `json:"parentTransactionId,omitempty"`
	// The amount to capture.
	Amount null.String `json:"amount,omitempty"`
	// The currency (in ISO format) that is used to capture the order. This must be the presentment currency (the currency used by the customer) and is a required field for orders where the currency and presentment currency differ.
	Currency *CurrencyCode `json:"currency,omitempty"`
}

// Return type for `orderCapture` mutation.
type OrderCapturePayload struct {
	// The transaction of the capture.
	Transaction *OrderTransaction `json:"transaction,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Specifies an open order to close.
type OrderCloseInput struct {
	// The ID of the order to close.
	ID null.String `json:"id,omitempty"`
}

// Return type for `orderClose` mutation.
type OrderClosePayload struct {
	// The closed order.
	Order *Order `json:"order,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple Orders.
type OrderConnection struct {
	// A list of edges.
	Edges []*OrderEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// A summary of the important details for a dispute on an order.
type OrderDisputeSummary struct {
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The type that the dispute was initiated as.
	InitiatedAs DisputeType `json:"initiatedAs,omitempty"`
	// The current status of the dispute.
	Status DisputeStatus `json:"status,omitempty"`
}

func (OrderDisputeSummary) IsNode() {}

// An auto-generated type which holds one Order and a cursor during pagination.
type OrderEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of OrderEdge.
	Node *Order `json:"node,omitempty"`
}

// Return type for `orderEditAddCustomItem` mutation.
type OrderEditAddCustomItemPayload struct {
	// The added line item.
	CalculatedLineItem *CalculatedLineItem `json:"calculatedLineItem,omitempty"`
	// An order with the edits calculated.
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `orderEditAddLineItemDiscount` mutation.
type OrderEditAddLineItemDiscountPayload struct {
	// The staged change produced by this mutation.
	AddedDiscountStagedChange *OrderStagedChangeAddLineItemDiscount `json:"addedDiscountStagedChange,omitempty"`
	// The line item with the discount applied.
	CalculatedLineItem *CalculatedLineItem `json:"calculatedLineItem,omitempty"`
	// An order with the edits calculated.
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `orderEditAddVariant` mutation.
type OrderEditAddVariantPayload struct {
	// The added line item.
	CalculatedLineItem *CalculatedLineItem `json:"calculatedLineItem,omitempty"`
	// An order with the edits calculated.
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// The input fields used to add a discount during an order edit.
type OrderEditAppliedDiscountInput struct {
	// The description of the discount.
	Description *null.String `json:"description,omitempty"`
	// The value of the discount as a fixed amount.
	FixedValue *MoneyInput `json:"fixedValue,omitempty"`
	// The value of the discount as a percentage.
	PercentValue *float64 `json:"percentValue,omitempty"`
}

// Return type for `orderEditBegin` mutation.
type OrderEditBeginPayload struct {
	// The order that will be edited.
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `orderEditCommit` mutation.
type OrderEditCommitPayload struct {
	// The order with changes applied.
	Order *Order `json:"order,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `orderEditRemoveLineItemDiscount` mutation.
type OrderEditRemoveLineItemDiscountPayload struct {
	// The line item with the discount removed.
	CalculatedLineItem *CalculatedLineItem `json:"calculatedLineItem,omitempty"`
	// An order with the edits calculated.
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `orderEditSetQuantity` mutation.
type OrderEditSetQuantityPayload struct {
	// The line item with changes calculated.
	CalculatedLineItem *CalculatedLineItem `json:"calculatedLineItem,omitempty"`
	// An order with the edits calculated.
	CalculatedOrder *CalculatedOrder `json:"calculatedOrder,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Specifies the information to be updated on the requested order.
type OrderInput struct {
	// The email address associated with the order.
	Email *null.String `json:"email,omitempty"`
	// The ID of the order to update.
	ID null.String `json:"id,omitempty"`
	// The order note.
	Note *null.String `json:"note,omitempty"`
	// A comma separated list of tags that have been added to the order.
	Tags []null.String `json:"tags,omitempty"`
	// The shipping address associated with the order.
	ShippingAddress *MailingAddressInput `json:"shippingAddress,omitempty"`
	// Custom information to add to the order, represented as a key value pair. Also referred to as note attributes.
	CustomAttributes []*AttributeInput `json:"customAttributes,omitempty"`
	// The metafields to associate with this order.
	Metafields []*MetafieldInput `json:"metafields,omitempty"`
	// The localization extensions attached to the order. For example, Tax IDs.
	LocalizationExtensions []*LocalizationExtensionInput `json:"localizationExtensions,omitempty"`
}

// Specifies the order to mark as paid.
type OrderMarkAsPaidInput struct {
	// The ID of the order to mark as paid.
	ID null.String `json:"id,omitempty"`
}

// Return type for `orderMarkAsPaid` mutation.
type OrderMarkAsPaidPayload struct {
	// The order marked as paid.
	Order *Order `json:"order,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Specifies a closed order to open.
type OrderOpenInput struct {
	// The ID of the order to open.
	ID null.String `json:"id,omitempty"`
}

// Return type for `orderOpen` mutation.
type OrderOpenPayload struct {
	// The opened order.
	Order *Order `json:"order,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// The payment collection details for an order requiring additional payment.
type OrderPaymentCollectionDetails struct {
	// URL allowing additional payments to be collected on the order.
	AdditionalPaymentCollectionURL *null.String `json:"additionalPaymentCollectionUrl,omitempty"`
}

// Represents a fraud check on an order.
type OrderRisk struct {
	// Whether the risk level is shown in the Shopify admin. If false, then this order risk is ignored when Shopify determines the overall risk level for the order.
	Display bool `json:"display,omitempty"`
	// The likelihood that an order is fraudulent, based on this order risk.
	//
	// The level can be set by Shopify risk analysis or by an app.
	Level *OrderRiskLevel `json:"level,omitempty"`
	// The risk message that's shown to the merchant in the Shopify admin.
	Message *null.String `json:"message,omitempty"`
}

// A newly created custom item.
type OrderStagedChangeAddCustomItem struct {
	// The price of an individual item without any discounts applied.
	OriginalUnitPrice *MoneyV2 `json:"originalUnitPrice,omitempty"`
	// The number of items.
	Quantity int `json:"quantity,omitempty"`
	// The title of the item.
	Title null.String `json:"title,omitempty"`
}

func (OrderStagedChangeAddCustomItem) IsOrderStagedChange() {}

// A discount application added as part of an order edit.
type OrderStagedChangeAddLineItemDiscount struct {
	// The description of the discount.
	Description null.String `json:"description,omitempty"`
	// A globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The amount of the discount.
	Value PricingValue `json:"value,omitempty"`
}

func (OrderStagedChangeAddLineItemDiscount) IsOrderStagedChange() {}

// A new shipping line added as part of an order edit.
type OrderStagedChangeAddShippingLine struct {
	// Shipping line phone number.
	Phone *null.String `json:"phone,omitempty"`
	// The presentment title of the shipping line.
	PresentmentTitle *null.String `json:"presentmentTitle,omitempty"`
	// Price of shipping line.
	Price *MoneyV2 `json:"price,omitempty"`
	// The title of the shipping line.
	Title *null.String `json:"title,omitempty"`
}

func (OrderStagedChangeAddShippingLine) IsOrderStagedChange() {}

// A new item created from an existing product variant.
type OrderStagedChangeAddVariant struct {
	// The number of items.
	Quantity int `json:"quantity,omitempty"`
	// The product variant of the added item.
	Variant *ProductVariant `json:"variant,omitempty"`
}

func (OrderStagedChangeAddVariant) IsOrderStagedChange() {}

// An auto-generated type for paginating through multiple OrderStagedChanges.
type OrderStagedChangeConnection struct {
	// A list of edges.
	Edges []*OrderStagedChangeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An removal of items from an existing line item on the order.
type OrderStagedChangeDecrementItem struct {
	// The number of items removed.
	Delta int `json:"delta,omitempty"`
	// The original line item.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The intention to restock the removed items.
	Restock bool `json:"restock,omitempty"`
}

func (OrderStagedChangeDecrementItem) IsOrderStagedChange() {}

// An auto-generated type which holds one OrderStagedChange and a cursor during pagination.
type OrderStagedChangeEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of OrderStagedChangeEdge.
	Node OrderStagedChange `json:"node,omitempty"`
}

// An addition of items to an existing line item on the order.
type OrderStagedChangeIncrementItem struct {
	// The number of items added.
	Delta int `json:"delta,omitempty"`
	// The original line item.
	LineItem *LineItem `json:"lineItem,omitempty"`
}

func (OrderStagedChangeIncrementItem) IsOrderStagedChange() {}

// A transaction represents an exchange of money as part of an order.
type OrderTransaction struct {
	// The masked account number associated with the payment method.
	AccountNumber *null.String `json:"accountNumber,omitempty"`
	// The amount of money.
	Amount null.String `json:"amount,omitempty"`
	// The amount and currency of the transaction in shop and presentment currencies.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// The amount and currency of the transaction.
	AmountV2 *MoneyV2 `json:"amountV2,omitempty"`
	// Authorization code associated with the transaction.
	AuthorizationCode *null.String `json:"authorizationCode,omitempty"`
	// The time when the authorization expires. This field is available only to stores on a Shopify Plus plan and is populated only for Shopify Payments authorizations.
	AuthorizationExpiresAt *null.String `json:"authorizationExpiresAt,omitempty"`
	// Date and time when the transaction was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// A standardized error code, independent of the payment provider.
	ErrorCode *OrderTransactionErrorCode `json:"errorCode,omitempty"`
	// The transaction fees charged on the order transaction.
	Fees []*TransactionFee `json:"fees,omitempty"`
	// The human-readable payment gateway name used to process the transaction.
	FormattedGateway *null.String `json:"formattedGateway,omitempty"`
	// The payment gateway used to process the transaction.
	Gateway *null.String `json:"gateway,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The kind of transaction.
	Kind OrderTransactionKind `json:"kind,omitempty"`
	// Whether the transaction can be manually captured.
	ManuallyCapturable bool `json:"manuallyCapturable,omitempty"`
	// Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
	MaximumRefundable *null.String `json:"maximumRefundable,omitempty"`
	// Specifies the available amount with currency to refund on the gateway.
	// Only available within SuggestedRefund.
	MaximumRefundableV2 *MoneyV2 `json:"maximumRefundableV2,omitempty"`
	// The associated order.
	Order *Order `json:"order,omitempty"`
	// The associated parent transaction, for example the authorization of a capture.
	ParentTransaction *OrderTransaction `json:"parentTransaction,omitempty"`
	// Specifies the payment icon to display for this transaction.
	PaymentIcon *Image `json:"paymentIcon,omitempty"`
	// Specifies the credit card company used to pay for this transaction.
	PaymentMethod *PaymentMethods `json:"paymentMethod,omitempty"`
	// Date and time when the transaction was processed.
	ProcessedAt *null.String `json:"processedAt,omitempty"`
	// A transaction receipt attached to the transaction by the gateway.
	// The value of this field depends on which gateway processed the transaction.
	Receipt *null.String `json:"receipt,omitempty"`
	// The settlement currency.
	SettlementCurrency *CurrencyCode `json:"settlementCurrency,omitempty"`
	// The rate used when converting the transaction amount to settlement currency.
	SettlementCurrencyRate *null.String `json:"settlementCurrencyRate,omitempty"`
	// Contains all Shopify Payments information related to an order transaction. This field is available only to stores on a Shopify Plus plan.
	ShopifyPaymentsSet *ShopifyPaymentsTransactionSet `json:"shopifyPaymentsSet,omitempty"`
	// The status of this transaction.
	Status OrderTransactionStatus `json:"status,omitempty"`
	// Whether the transaction is a test transaction.
	Test bool `json:"test,omitempty"`
	// Specifies the available amount to capture on the gateway.
	// Only available when an amount is capturable or manually mark as paid.
	TotalUnsettled *null.String `json:"totalUnsettled,omitempty"`
	// Specifies the available amount with currency to capture on the gateway in shop and presentment currencies.
	// Only available when an amount is capturable or manually mark as paid.
	TotalUnsettledSet *MoneyBag `json:"totalUnsettledSet,omitempty"`
	// Specifies the available amount with currency to capture on the gateway.
	// Only available when an amount is capturable or manually mark as paid.
	TotalUnsettledV2 *MoneyV2 `json:"totalUnsettledV2,omitempty"`
}

func (OrderTransaction) IsNode() {}

// An auto-generated type for paginating through multiple OrderTransactions.
type OrderTransactionConnection struct {
	// A list of edges.
	Edges []*OrderTransactionEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one OrderTransaction and a cursor during pagination.
type OrderTransactionEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of OrderTransactionEdge.
	Node *OrderTransaction `json:"node,omitempty"`
}

// Specifies the information needed to create an order transaction.
type OrderTransactionInput struct {
	// The amount of money for this transaction.
	Amount null.String `json:"amount,omitempty"`
	// The payment gateway to use for this transaction.
	Gateway null.String `json:"gateway,omitempty"`
	// The kind of transaction.
	Kind OrderTransactionKind `json:"kind,omitempty"`
	// The ID of the order associated with the transaction.
	OrderID null.String `json:"orderId,omitempty"`
	// The ID of the optional parent transaction, for example the authorization of a capture.
	ParentID *null.String `json:"parentId,omitempty"`
}

// Return type for `orderUpdate` mutation.
type OrderUpdatePayload struct {
	// The updated order.
	Order *Order `json:"order,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Information about pagination in a connection.
type PageInfo struct {
	// Indicates if there are more pages to fetch.
	HasNextPage bool `json:"hasNextPage,omitempty"`
	// Indicates if there are any pages prior to the current page.
	HasPreviousPage bool `json:"hasPreviousPage,omitempty"`
}

// Represents a payment session.
type PaymentSession struct {
	// A globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The url of the Checkout to redirect the buyer to.
	RedirectURL null.String `json:"redirectUrl,omitempty"`
	// The payment status.
	Status *PaymentSessionStatus `json:"status,omitempty"`
}

// Return type for `paymentSessionReject` mutation.
type PaymentSessionRejectPayload struct {
	// The updated payment session.
	PaymentSession *PaymentSession `json:"paymentSession,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Reason of the payment status.
type PaymentSessionRejectionReasonInput struct {
	// The reason code.
	Code PaymentSessionStatusReasonRejectionCode `json:"code,omitempty"`
	// A custom, localized message for the merchant.
	MerchantMessage *null.String `json:"merchantMessage,omitempty"`
}

// Return type for `paymentSessionResolve` mutation.
type PaymentSessionResolvePayload struct {
	// The updated payment session.
	PaymentSession *PaymentSession `json:"paymentSession,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Represents a payment status.
type PaymentSessionStatus struct {
	// The payment status code.
	Code PaymentSessionStatusCode `json:"code,omitempty"`
	// The payment status reason (if applicable).
	Reason *PaymentSessionStatusReason `json:"reason,omitempty"`
}

// Payment status reason.
type PaymentSessionStatusReason struct {
	// The reason code.
	Code PaymentSessionStatusReasonRejectionCode `json:"code,omitempty"`
	// The custom, localized message for the merchant.
	MerchantMessage *null.String `json:"merchantMessage,omitempty"`
}

// Settings related to payments.
type PaymentSettings struct {
	// List of the digital wallets which the shop supports.
	SupportedDigitalWallets []DigitalWallet `json:"supportedDigitalWallets,omitempty"`
}

// The production configuration of the payments app.
type PaymentsAppConfiguration struct {
	// Handle used by the provider.
	ExternalHandle *null.String `json:"externalHandle,omitempty"`
	// The provider is ready to process merchant's payments.
	Ready bool `json:"ready,omitempty"`
}

// Return type for `paymentsAppConfigure` mutation.
type PaymentsAppConfigurePayload struct {
	// The production configuration of the payments app.
	PaymentsAppConfiguration *PaymentsAppConfiguration `json:"paymentsAppConfiguration,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Price rules are a set of conditions, including entitlements and prerequisites, that must be met in order for a discount code to apply.
type PriceRule struct {
	// The maximum number of times that the price rule can be allocated onto an order.
	AllocationLimit *int `json:"allocationLimit,omitempty"`
	// The method by which the price rule's value is allocated to its entitled items.
	AllocationMethod PriceRuleAllocationMethod `json:"allocationMethod,omitempty"`
	// The application that created the price rule.
	App *App `json:"app,omitempty"`
	// The date and time when the price rule was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The customers that can use this price rule.
	CustomerSelection *PriceRuleCustomerSelection `json:"customerSelection,omitempty"`
	// List of the price rule's discount codes.
	DiscountCodes *PriceRuleDiscountCodeConnection `json:"discountCodes,omitempty"`
	// How many discount codes associated with the price rule.
	DiscountCodesCount int `json:"discountCodesCount,omitempty"`
	// The date and time when the price rule ends. For open-ended price rules, use `null`.
	EndsAt *null.String `json:"endsAt,omitempty"`
	// Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
	EntitlementToPrerequisiteQuantityRatio *PriceRuleEntitlementToPrerequisiteQuantityRatio `json:"entitlementToPrerequisiteQuantityRatio,omitempty"`
	// The paginated list of events associated with the price rule.
	Events *EventConnection `json:"events,omitempty"`
	// A list of the price rule's features.
	Features []PriceRuleFeature `json:"features,omitempty"`
	// Indicates whether there are any timeline comments on the price rule.
	HasTimelineComment bool `json:"hasTimelineComment,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The items to which the price rule applies.
	ItemEntitlements *PriceRuleItemEntitlements `json:"itemEntitlements,omitempty"`
	// The items required for the price rule to be applicable.
	ItemPrerequisites *PriceRuleLineItemPrerequisites `json:"itemPrerequisites,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// Whether the price rule can be applied only once per customer.
	OncePerCustomer bool `json:"oncePerCustomer,omitempty"`
	// The number of the entitled items must fall within this range for the price rule to be applicable.
	PrerequisiteQuantityRange *PriceRuleQuantityRange `json:"prerequisiteQuantityRange,omitempty"`
	// The shipping cost must fall within this range for the price rule to be applicable.
	PrerequisiteShippingPriceRange *PriceRuleMoneyRange `json:"prerequisiteShippingPriceRange,omitempty"`
	// The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
	PrerequisiteSubtotalRange *PriceRuleMoneyRange `json:"prerequisiteSubtotalRange,omitempty"`
	// Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
	PrerequisiteToEntitlementQuantityRatio *PriceRulePrerequisiteToEntitlementQuantityRatio `json:"prerequisiteToEntitlementQuantityRatio,omitempty"`
	// URLs that can be used to share the discount.
	ShareableUrls []*PriceRuleShareableURL `json:"shareableUrls,omitempty"`
	// The shipping lines to which the price rule applies.
	ShippingEntitlements *PriceRuleShippingLineEntitlements `json:"shippingEntitlements,omitempty"`
	// The date and time when the price rule starts.
	StartsAt null.String `json:"startsAt,omitempty"`
	// The status of the price rule.
	Status PriceRuleStatus `json:"status,omitempty"`
	// A detailed summary of the price rule.
	Summary *null.String `json:"summary,omitempty"`
	// The type of lines (line_item or shipping_line) to which the price rule applies.
	Target PriceRuleTarget `json:"target,omitempty"`
	// The title of the price rule.
	Title null.String `json:"title,omitempty"`
	// The total sales from orders where the price rule was used.
	TotalSales *MoneyV2 `json:"totalSales,omitempty"`
	// A list of the price rule's features.
	Traits []PriceRuleTrait `json:"traits,omitempty"`
	// The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count.
	UsageCount int `json:"usageCount,omitempty"`
	// The maximum number of times that the price rule can be used in total.
	UsageLimit *int `json:"usageLimit,omitempty"`
	// A time period during which a price rule is applicable.
	ValidityPeriod *PriceRuleValidityPeriod `json:"validityPeriod,omitempty"`
	// The value of the price rule.
	Value PriceRuleValue `json:"value,omitempty"`
	// The value of the price rule.
	ValueV2 PricingValue `json:"valueV2,omitempty"`
}

func (PriceRule) IsNode()                   {}
func (PriceRule) IsCommentEventSubject()    {}
func (PriceRule) IsLegacyInteroperability() {}
func (PriceRule) IsHasEvents()              {}

// Return type for `priceRuleActivate` mutation.
type PriceRuleActivatePayload struct {
	// The activated price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty"`
	// List of errors that occurred executing the mutation.
	PriceRuleUserErrors []*PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple PriceRules.
type PriceRuleConnection struct {
	// A list of edges.
	Edges []*PriceRuleEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `priceRuleCreate` mutation.
type PriceRuleCreatePayload struct {
	// The newly created price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty"`
	// The newly created discount code.
	PriceRuleDiscountCode *PriceRuleDiscountCode `json:"priceRuleDiscountCode,omitempty"`
	// List of errors that occurred executing the mutation.
	PriceRuleUserErrors []*PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// A selection of customers for whom the price rule applies.
type PriceRuleCustomerSelection struct {
	// List of customers to whom the price rule applies.
	Customers *CustomerConnection `json:"customers,omitempty"`
	// Whether the price rule applies to all customers.
	ForAllCustomers bool `json:"forAllCustomers,omitempty"`
	// A list of customer saved searches that contain the customers who can use the price rule.
	SavedSearches []*SavedSearch `json:"savedSearches,omitempty"`
}

// Specifies the input fields to update a price rule customer selection.
type PriceRuleCustomerSelectionInput struct {
	// Whether the price rule applies to all customers.
	ForAllCustomers *bool `json:"forAllCustomers,omitempty"`
	// List of customer saved searches that contain the customers to whom the price rule applies. No single customer IDs may be present.
	SavedSearchIds []null.String `json:"savedSearchIds,omitempty"`
	// List of customers to add to the current list of customers to whom the price rule applies. `savedSearchIds` must be empty.
	CustomerIdsToAdd []null.String `json:"customerIdsToAdd,omitempty"`
	// A list of customers to remove from the current list of customers to whom the price rule applies.
	CustomerIdsToRemove []null.String `json:"customerIdsToRemove,omitempty"`
}

// Return type for `priceRuleDeactivate` mutation.
type PriceRuleDeactivatePayload struct {
	// The deactivated price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty"`
	// List of errors that occurred executing the mutation.
	PriceRuleUserErrors []*PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `priceRuleDelete` mutation.
type PriceRuleDeletePayload struct {
	// The id price of the deleted price rule.
	DeletedPriceRuleID *null.String `json:"deletedPriceRuleId,omitempty"`
	// List of errors that occurred executing the mutation.
	PriceRuleUserErrors []*PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// The shop of the deleted price rule.
	Shop *Shop `json:"shop,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// A discount code of a price rule.
type PriceRuleDiscountCode struct {
	// The application that created the discount code.
	App *App `json:"app,omitempty"`
	// The code to use the discount.
	Code null.String `json:"code,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count.
	UsageCount int `json:"usageCount,omitempty"`
}

func (PriceRuleDiscountCode) IsNode() {}

// An auto-generated type for paginating through multiple PriceRuleDiscountCodes.
type PriceRuleDiscountCodeConnection struct {
	// A list of edges.
	Edges []*PriceRuleDiscountCodeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `priceRuleDiscountCodeCreate` mutation.
type PriceRuleDiscountCodeCreatePayload struct {
	// The updated price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty"`
	// The newly created discount code.
	PriceRuleDiscountCode *PriceRuleDiscountCode `json:"priceRuleDiscountCode,omitempty"`
	// List of errors that occurred executing the mutation.
	PriceRuleUserErrors []*PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one PriceRuleDiscountCode and a cursor during pagination.
type PriceRuleDiscountCodeEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of PriceRuleDiscountCodeEdge.
	Node *PriceRuleDiscountCode `json:"node,omitempty"`
}

// Specifies the input fields to manipulate a discount code.
type PriceRuleDiscountCodeInput struct {
	// The code to use the discount.
	Code *null.String `json:"code,omitempty"`
}

// Return type for `priceRuleDiscountCodeUpdate` mutation.
type PriceRuleDiscountCodeUpdatePayload struct {
	// The updated price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty"`
	// The updated discount code.
	PriceRuleDiscountCode *PriceRuleDiscountCode `json:"priceRuleDiscountCode,omitempty"`
	// List of errors that occurred executing the mutation.
	PriceRuleUserErrors []*PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one PriceRule and a cursor during pagination.
type PriceRuleEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of PriceRuleEdge.
	Node *PriceRule `json:"node,omitempty"`
}

// Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
type PriceRuleEntitlementToPrerequisiteQuantityRatio struct {
	// The quantity of entitlements in the ratio.
	EntitlementQuantity int `json:"entitlementQuantity,omitempty"`
	// The quantity of prerequisites in the ratio.
	PrerequisiteQuantity int `json:"prerequisiteQuantity,omitempty"`
}

// Specifies the quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
type PriceRuleEntitlementToPrerequisiteQuantityRatioInput struct {
	// The quantity of entitlements in the ratio.
	EntitlementQuantity *int `json:"entitlementQuantity,omitempty"`
	// The quantity of prerequisites in the ratio.
	PrerequisiteQuantity *int `json:"prerequisiteQuantity,omitempty"`
}

// The value of a fixed amount price rule.
type PriceRuleFixedAmountValue struct {
	// The monetary value of the price rule.
	Amount null.String `json:"amount,omitempty"`
}

func (PriceRuleFixedAmountValue) IsPriceRuleValue() {}

// Specifies the input fields to manipulate a price rule.
type PriceRuleInput struct {
	// PriceRuleValidityPeriod for the price rule.
	ValidityPeriod *PriceRuleValidityPeriodInput `json:"validityPeriod,omitempty"`
	// Whether the price rule can be applied only once per customer.
	OncePerCustomer *bool `json:"oncePerCustomer,omitempty"`
	// The customers that can use this price rule.
	CustomerSelection *PriceRuleCustomerSelectionInput `json:"customerSelection,omitempty"`
	// The maximum number of times that the price rule can be used in total.
	UsageLimit *int `json:"usageLimit,omitempty"`
	// Title of the price rule.
	Title *null.String `json:"title,omitempty"`
	// The maximum number of times that the price rule can be allocated onto an order.
	AllocationLimit *int `json:"allocationLimit,omitempty"`
	// The method by which the price rule's value is allocated to its entitled items.
	AllocationMethod *PriceRuleAllocationMethod `json:"allocationMethod,omitempty"`
	// The value of the price rule.
	Value *PriceRuleValueInput `json:"value,omitempty"`
	// The type of lines (line_item or shipping_line) to which the price rule applies.
	Target *PriceRuleTarget `json:"target,omitempty"`
	// The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
	PrerequisiteSubtotalRange *PriceRuleMoneyRangeInput `json:"prerequisiteSubtotalRange,omitempty"`
	// The number of the entitled items must fall within this range for the price rule to be applicable.
	PrerequisiteQuantityRange *PriceRuleQuantityRangeInput `json:"prerequisiteQuantityRange,omitempty"`
	// The shipping cost must fall within this range for the price rule to be applicable.
	PrerequisiteShippingPriceRange *PriceRuleMoneyRangeInput `json:"prerequisiteShippingPriceRange,omitempty"`
	// The items to which the price rule applies.
	ItemEntitlements *PriceRuleItemEntitlementsInput `json:"itemEntitlements,omitempty"`
	// The items required for the price rule to be applicable.
	ItemPrerequisites *PriceRuleItemPrerequisitesInput `json:"itemPrerequisites,omitempty"`
	// The shipping lines to which the price rule applies.
	ShippingEntitlements *PriceRuleShippingEntitlementsInput `json:"shippingEntitlements,omitempty"`
	// Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items. This argument is deprecated: Use `prerequisiteToEntitlementQuantityRatio` instead.
	EntitlementToPrerequisiteQuantityRatio *PriceRuleEntitlementToPrerequisiteQuantityRatioInput `json:"entitlementToPrerequisiteQuantityRatio,omitempty"`
	// Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
	PrerequisiteToEntitlementQuantityRatio *PriceRulePrerequisiteToEntitlementQuantityRatioInput `json:"prerequisiteToEntitlementQuantityRatio,omitempty"`
}

// The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned.
type PriceRuleItemEntitlements struct {
	// The collections to which the price rule applies.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// The product variants to which the price rule applies.
	ProductVariants *ProductVariantConnection `json:"productVariants,omitempty"`
	// The products to which the price rule applies.
	Products *ProductConnection `json:"products,omitempty"`
	// Whether the price rule applies to all line items.
	TargetAllLineItems bool `json:"targetAllLineItems,omitempty"`
}

// Specifies the input fields to update a price rule line item entitlement.
type PriceRuleItemEntitlementsInput struct {
	// Whether the price rule applies to all items.
	TargetAllLineItems *bool `json:"targetAllLineItems,omitempty"`
	// The products to which the price rule applies.
	ProductIds []null.String `json:"productIds,omitempty"`
	// The product variants to which the price rule applies.
	ProductVariantIds []null.String `json:"productVariantIds,omitempty"`
	// The collections to which the price rule applies.
	CollectionIds []null.String `json:"collectionIds,omitempty"`
}

// Specifies the input fields to update a price rule's item prerequisites.
type PriceRuleItemPrerequisitesInput struct {
	// The products needed for the price rule to be applied.
	ProductIds []null.String `json:"productIds,omitempty"`
	// The product variants needed for the price rule to be applied.
	ProductVariantIds []null.String `json:"productVariantIds,omitempty"`
	// The collections needed for the price rule to be applied.
	CollectionIds []null.String `json:"collectionIds,omitempty"`
}

// Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination.
type PriceRuleLineItemPrerequisites struct {
	// The collections required for the price rule to be applicable.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// The product variants required for the price rule to be applicable.
	ProductVariants *ProductVariantConnection `json:"productVariants,omitempty"`
	// The products required for the price rule to be applicable.
	Products *ProductConnection `json:"products,omitempty"`
}

// A money range within which the price rule is applicable.
type PriceRuleMoneyRange struct {
	// The lower bound of the money range.
	GreaterThan *null.String `json:"greaterThan,omitempty"`
	// The lower bound or equal of the money range.
	GreaterThanOrEqualTo *null.String `json:"greaterThanOrEqualTo,omitempty"`
	// The upper bound of the money range.
	LessThan *null.String `json:"lessThan,omitempty"`
	// The upper bound or equal of the money range.
	LessThanOrEqualTo *null.String `json:"lessThanOrEqualTo,omitempty"`
}

// Specifies the input fields to update the money range within which the price rule is applicable.
type PriceRuleMoneyRangeInput struct {
	// The upper bound of the money range.
	LessThan *null.String `json:"lessThan,omitempty"`
	// The upper or equal bound of the money range.
	LessThanOrEqualTo *null.String `json:"lessThanOrEqualTo,omitempty"`
	// The lower bound of the money range.
	GreaterThan *null.String `json:"greaterThan,omitempty"`
	// The lower or equal bound of the money range.
	GreaterThanOrEqualTo *null.String `json:"greaterThanOrEqualTo,omitempty"`
}

// The value of a percent price rule.
type PriceRulePercentValue struct {
	// The percent value of the price rule.
	Percentage float64 `json:"percentage,omitempty"`
}

func (PriceRulePercentValue) IsPriceRuleValue() {}

// Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
type PriceRulePrerequisiteToEntitlementQuantityRatio struct {
	// The quantity of entitlements in the ratio.
	EntitlementQuantity int `json:"entitlementQuantity,omitempty"`
	// The quantity of prerequisites in the ratio.
	PrerequisiteQuantity int `json:"prerequisiteQuantity,omitempty"`
}

// Specifies the quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
type PriceRulePrerequisiteToEntitlementQuantityRatioInput struct {
	// The quantity of entitlements in the ratio.
	EntitlementQuantity *int `json:"entitlementQuantity,omitempty"`
	// The quantity of prerequisites in the ratio.
	PrerequisiteQuantity *int `json:"prerequisiteQuantity,omitempty"`
}

// A quantity range within which the price rule is applicable.
type PriceRuleQuantityRange struct {
	// The lower bound of the quantity range.
	GreaterThan *int `json:"greaterThan,omitempty"`
	// The lower bound or equal of the quantity range.
	GreaterThanOrEqualTo *int `json:"greaterThanOrEqualTo,omitempty"`
	// The upper bound of the quantity range.
	LessThan *int `json:"lessThan,omitempty"`
	// The upper bound or equal of the quantity range.
	LessThanOrEqualTo *int `json:"lessThanOrEqualTo,omitempty"`
}

// Specifies the input fields to update the quantity range within which the price rule is applicable.
type PriceRuleQuantityRangeInput struct {
	// The upper bound of the quantity range.
	LessThan *int `json:"lessThan,omitempty"`
	// The upper or equal bound of the quantity range.
	LessThanOrEqualTo *int `json:"lessThanOrEqualTo,omitempty"`
	// The lower bound of the quantity range.
	GreaterThan *int `json:"greaterThan,omitempty"`
	// The lower or equal bound of the quantity range.
	GreaterThanOrEqualTo *int `json:"greaterThanOrEqualTo,omitempty"`
}

// Shareable URL for the discount code associated with the price rule.
type PriceRuleShareableURL struct {
	// The image URL of the item (product or collection) to which the discount applies.
	TargetItemImage *Image `json:"targetItemImage,omitempty"`
	// The type of page that's associated with the URL.
	TargetType PriceRuleShareableURLTargetType `json:"targetType,omitempty"`
	// The title of the page that's associated with the URL.
	Title null.String `json:"title,omitempty"`
	// The URL for the discount code.
	URL null.String `json:"url,omitempty"`
}

// Specifies the input fields to update a price rule shipping entitlement.
type PriceRuleShippingEntitlementsInput struct {
	// Whether the price rule applies to all shipping lines.
	TargetAllShippingLines *bool `json:"targetAllShippingLines,omitempty"`
	// The codes for the countries to which the price rule applies to.
	CountryCodes []CountryCode `json:"countryCodes,omitempty"`
	// Whether the price rule is applicable to countries that have not been defined in the shop's shipping zones.
	IncludeRestOfWorld *bool `json:"includeRestOfWorld,omitempty"`
}

// The shipping lines to which the price rule applies to.
type PriceRuleShippingLineEntitlements struct {
	// The codes for the countries to which the price rule applies to.
	CountryCodes []CountryCode `json:"countryCodes,omitempty"`
	// Whether the price rule is applicable to countries that have not been defined in the shop's shipping zones.
	IncludeRestOfWorld bool `json:"includeRestOfWorld,omitempty"`
	// Whether the price rule applies to all shipping lines.
	TargetAllShippingLines bool `json:"targetAllShippingLines,omitempty"`
}

// Return type for `priceRuleUpdate` mutation.
type PriceRuleUpdatePayload struct {
	// The updated price rule.
	PriceRule *PriceRule `json:"priceRule,omitempty"`
	// The updated discount code.
	PriceRuleDiscountCode *PriceRuleDiscountCode `json:"priceRuleDiscountCode,omitempty"`
	// List of errors that occurred executing the mutation.
	PriceRuleUserErrors []*PriceRuleUserError `json:"priceRuleUserErrors,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Represents an error that happens during execution of a price rule mutation.
type PriceRuleUserError struct {
	// Error code to uniquely identify the error.
	Code *PriceRuleErrorCode `json:"code,omitempty"`
	// Path to the input field which caused the error.
	Field []null.String `json:"field,omitempty"`
	// The error message.
	Message null.String `json:"message,omitempty"`
}

func (PriceRuleUserError) IsDisplayableError() {}

// A time period during which a price rule is applicable.
type PriceRuleValidityPeriod struct {
	// The time after which the price rule becomes invalid.
	End *null.String `json:"end,omitempty"`
	// The time after which the price rule is valid.
	Start null.String `json:"start,omitempty"`
}

// Specifies the input fields to update the validity period of a price rule.
type PriceRuleValidityPeriodInput struct {
	// The time after which the price rule is valid.
	Start null.String `json:"start,omitempty"`
	// The time after which the price rule becomes invalid.
	End *null.String `json:"end,omitempty"`
}

// Specifies the input fields to update a price rule.
type PriceRuleValueInput struct {
	// The percentage value of the price rule.
	PercentageValue *float64 `json:"percentageValue,omitempty"`
	// The fixed amount value of the price rule.
	FixedAmountValue *null.String `json:"fixedAmountValue,omitempty"`
}

// The value of the percentage pricing object.
type PricingPercentageValue struct {
	// The percentage value of the object.
	Percentage float64 `json:"percentage,omitempty"`
}

func (PricingPercentageValue) IsPricingValue() {}

// Private metafields represent custom metadata that is attached to a resource.
// Private metafields are private to the application that creates them on a shop's resources.
type PrivateMetafield struct {
	// The date and time when the private metafield was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The id of the private metafield.
	ID null.String `json:"id,omitempty"`
	// The key name for a private metafield.
	Key null.String `json:"key,omitempty"`
	// The namespace for a private metafield.
	Namespace null.String `json:"namespace,omitempty"`
	// The date and time when the private metafield was updated.
	UpdatedAt null.String `json:"updatedAt,omitempty"`
	// The value of a private metafield.
	Value null.String `json:"value,omitempty"`
	// Represents the private metafield value type.
	ValueType PrivateMetafieldValueType `json:"valueType,omitempty"`
}

func (PrivateMetafield) IsNode() {}

// An auto-generated type for paginating through multiple PrivateMetafields.
type PrivateMetafieldConnection struct {
	// A list of edges.
	Edges []*PrivateMetafieldEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Specifies the input fields for a PrivateMetafield.
type PrivateMetafieldDeleteInput struct {
	// The ID of the owning resource.
	Owner *null.String `json:"owner,omitempty"`
	// The namespace for the private metafield.
	Namespace null.String `json:"namespace,omitempty"`
	// The key for the private metafield.
	Key null.String `json:"key,omitempty"`
}

// Return type for `privateMetafieldDelete` mutation.
type PrivateMetafieldDeletePayload struct {
	// The ID of private metafield that was deleted.
	DeletedPrivateMetafieldID *null.String `json:"deletedPrivateMetafieldId,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one PrivateMetafield and a cursor during pagination.
type PrivateMetafieldEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of PrivateMetafieldEdge.
	Node *PrivateMetafield `json:"node,omitempty"`
}

// Specifies the input fields for a PrivateMetafield.
type PrivateMetafieldInput struct {
	// The owning resource.
	Owner *null.String `json:"owner,omitempty"`
	// The namespace for the private metafield.
	Namespace null.String `json:"namespace,omitempty"`
	// The key for the private metafield.
	Key null.String `json:"key,omitempty"`
	// The value and value type of the metafield, wrapped in a ValueInput object.
	ValueInput *PrivateMetafieldValueInput `json:"valueInput,omitempty"`
}

// Return type for `privateMetafieldUpsert` mutation.
type PrivateMetafieldUpsertPayload struct {
	// The private metafield that was created or updated.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Value Input wraps two fields of Private Metafields into one. Those fields are value and value_type.
type PrivateMetafieldValueInput struct {
	// The value of a private metafield.
	Value null.String `json:"value,omitempty"`
	// Represents the private metafield value type.
	ValueType PrivateMetafieldValueType `json:"valueType,omitempty"`
}

// Represents a product, including information about related collections and product variants.
type Product struct {
	// The number of publications a resource is published to without feedback errors.
	AvailablePublicationCount int `json:"availablePublicationCount,omitempty"`
	// The description of the product, complete with HTML formatting.
	BodyHTML *null.String `json:"bodyHtml,omitempty"`
	// A list of the collections that include the product.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// A default cursor for use in pagination.
	DefaultCursor null.String `json:"defaultCursor,omitempty"`
	// A stripped description of the product, single line with HTML tags removed.
	Description null.String `json:"description,omitempty"`
	// The description of the product, complete with HTML formatting.
	DescriptionHTML null.String `json:"descriptionHtml,omitempty"`
	// Stripped description of the product, single line with HTML tags removed.
	// Truncated to 60 characters.
	DescriptionPlainSummary null.String `json:"descriptionPlainSummary,omitempty"`
	// The featured image for the product.
	FeaturedImage *Image `json:"featuredImage,omitempty"`
	// The featured media for the product.
	FeaturedMedia Media `json:"featuredMedia,omitempty"`
	// Information about the product that's provided through resource feedback.
	Feedback *ResourceFeedback `json:"feedback,omitempty"`
	// The theme template used when viewing the gift card in a store.
	GiftCardTemplateSuffix *null.String `json:"giftCardTemplateSuffix,omitempty"`
	// A unique human-friendly string of the product's title.
	Handle null.String `json:"handle,omitempty"`
	// Whether the product has only a single variant with the default option and value.
	HasOnlyDefaultVariant bool `json:"hasOnlyDefaultVariant,omitempty"`
	// Whether the product has out of stock variants.
	HasOutOfStockVariants bool `json:"hasOutOfStockVariants,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The images associated with the product.
	Images *ImageConnection `json:"images,omitempty"`
	// Whether the product is in a given collection.
	InCollection bool `json:"inCollection,omitempty"`
	// Whether the product is a gift card.
	IsGiftCard bool `json:"isGiftCard,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// The media associated with the product.
	Media *MediaConnection `json:"media,omitempty"`
	// Total count of media belonging to a product.
	MediaCount int `json:"mediaCount,omitempty"`
	// The metafield associated with the resource.
	Metafield *Metafield `json:"metafield,omitempty"`
	// A paginated list of metafields associated with the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The online store preview URL.
	OnlineStorePreviewURL *null.String `json:"onlineStorePreviewUrl,omitempty"`
	// The online store URL for the product.
	// A value of `null` indicates that the product is not published to the Online Store sales channel.
	OnlineStoreURL *null.String `json:"onlineStoreUrl,omitempty"`
	// A list of product options. The limit is specified by Shop.resourceLimits.maxProductOptions.
	Options []*ProductOption `json:"options,omitempty"`
	// The price range of the product.
	PriceRange *ProductPriceRange `json:"priceRange,omitempty"`
	// The price range of the product with prices formatted as decimals.
	PriceRangeV2 *ProductPriceRangeV2 `json:"priceRangeV2,omitempty"`
	// Returns a private metafield found by namespace and key.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// List of private metafields.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// A list of the channels where the product is published.
	ProductPublications *ProductPublicationConnection `json:"productPublications,omitempty"`
	// The product type specified by the merchant.
	ProductType null.String `json:"productType,omitempty"`
	// The number of publications a resource is published on.
	PublicationCount int `json:"publicationCount,omitempty"`
	// A list of the channels where the product is published.
	Publications *ProductPublicationConnection `json:"publications,omitempty"`
	// The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was published to the Online Store.
	PublishedAt *null.String `json:"publishedAt,omitempty"`
	// Check to see whether the resource is published to a given channel.
	PublishedOnChannel bool `json:"publishedOnChannel,omitempty"`
	// Check to see whether the resource is published to the calling app's channel.
	PublishedOnCurrentChannel bool `json:"publishedOnCurrentChannel,omitempty"`
	// Check to see whether the resource is published to the calling app's publication.
	PublishedOnCurrentPublication bool `json:"publishedOnCurrentPublication,omitempty"`
	// Check to see whether the resource is published to a given publication.
	PublishedOnPublication bool `json:"publishedOnPublication,omitempty"`
	// Whether the product can only be purchased with a selling plan.
	RequiresSellingPlan bool `json:"requiresSellingPlan,omitempty"`
	// The list of resources that are published to a publication.
	ResourcePublications *ResourcePublicationConnection `json:"resourcePublications,omitempty"`
	// The list of resources that are either published or staged to be published to a publication.
	ResourcePublicationsV2 *ResourcePublicationV2Connection `json:"resourcePublicationsV2,omitempty"`
	// Count of selling plan groups associated with the product.
	SellingPlanGroupCount int `json:"sellingPlanGroupCount,omitempty"`
	// SEO information of the product.
	Seo *Seo `json:"seo,omitempty"`
	// The product status.
	Status ProductStatus `json:"status,omitempty"`
	// The storefront ID of the product.
	StorefrontID null.String `json:"storefrontId,omitempty"`
	// A comma separated list of tags that have been added to the product.
	Tags []null.String `json:"tags,omitempty"`
	// The theme template used when viewing the product in a store.
	TemplateSuffix *null.String `json:"templateSuffix,omitempty"`
	// The title of the product.
	Title null.String `json:"title,omitempty"`
	// The quantity of inventory in stock.
	TotalInventory int `json:"totalInventory,omitempty"`
	// The number of variants that are associated with the product.
	TotalVariants int `json:"totalVariants,omitempty"`
	// Whether inventory tracking has been enabled for the product.
	TracksInventory bool `json:"tracksInventory,omitempty"`
	// The translations associated with the resource.
	Translations []*PublishedTranslation `json:"translations,omitempty"`
	// The list of channels that the resource is not published to.
	UnpublishedChannels *ChannelConnection `json:"unpublishedChannels,omitempty"`
	// The list of publications that the resource is not published to.
	UnpublishedPublications *PublicationConnection `json:"unpublishedPublications,omitempty"`
	// The date and time when the product was last modified.
	// A product's `updatedAt` value can change for different reasons. For example, if an order
	// is placed for a product that has inventory tracking set up, then the inventory adjustment
	// is counted as an update.
	UpdatedAt null.String `json:"updatedAt,omitempty"`
	// A list of variants associated with the product.
	Variants *ProductVariantConnection `json:"variants,omitempty"`
	// The name of the product's vendor.
	Vendor null.String `json:"vendor,omitempty"`
}

func (Product) IsCommentEventEmbed()        {}
func (Product) IsNode()                     {}
func (Product) IsNavigable()                {}
func (Product) IsHasMetafields()            {}
func (Product) IsHasPublishedTranslations() {}
func (Product) IsPublishable()              {}
func (Product) IsOnlineStorePreviewable()   {}
func (Product) IsLegacyInteroperability()   {}

// Specifies product images to append.
type ProductAppendImagesInput struct {
	// The ID of the product.
	ID null.String `json:"id,omitempty"`
	// The images to be appended to the product.
	Images []*ImageInput `json:"images,omitempty"`
}

// Return type for `productAppendImages` mutation.
type ProductAppendImagesPayload struct {
	// List of new images appended to the product.
	NewImages []*Image `json:"newImages,omitempty"`
	// The product object.
	Product *Product `json:"product,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `productChangeStatus` mutation.
type ProductChangeStatusPayload struct {
	// The product object.
	Product *Product `json:"product,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*ProductChangeStatusUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of ProductChangeStatus.
type ProductChangeStatusUserError struct {
	// Error code to uniquely identify the error.
	Code *ProductChangeStatusUserErrorCode `json:"code,omitempty"`
	// Path to the input field which caused the error.
	Field []null.String `json:"field,omitempty"`
	// The error message.
	Message null.String `json:"message,omitempty"`
}

func (ProductChangeStatusUserError) IsDisplayableError() {}

// An auto-generated type for paginating through multiple Products.
type ProductConnection struct {
	// A list of edges.
	Edges []*ProductEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `productCreateMedia` mutation.
type ProductCreateMediaPayload struct {
	// The newly created media.
	Media []Media `json:"media,omitempty"`
	// List of errors that occurred executing the mutation.
	MediaUserErrors []*MediaUserError `json:"mediaUserErrors,omitempty"`
	// The product associated with the media.
	Product *Product `json:"product,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `productCreate` mutation.
type ProductCreatePayload struct {
	// The product object.
	Product *Product `json:"product,omitempty"`
	// The shop associated with the product.
	Shop *Shop `json:"shop,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `productDeleteImages` mutation.
type ProductDeleteImagesPayload struct {
	// This is an array of IDs of images to delete.
	DeletedImageIds []null.String `json:"deletedImageIds,omitempty"`
	// This is the product object.
	Product *Product `json:"product,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Specifies the product to delete.
type ProductDeleteInput struct {
	// The ID of the product.
	ID null.String `json:"id,omitempty"`
}

// Return type for `productDeleteMedia` mutation.
type ProductDeleteMediaPayload struct {
	// List of media IDs which were deleted.
	DeletedMediaIds []null.String `json:"deletedMediaIds,omitempty"`
	// List of product image IDs which were deleted.
	DeletedProductImageIds []null.String `json:"deletedProductImageIds,omitempty"`
	// List of errors that occurred executing the mutation.
	MediaUserErrors []*MediaUserError `json:"mediaUserErrors,omitempty"`
	// The product which media was deleted from.
	Product *Product `json:"product,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `productDelete` mutation.
type ProductDeletePayload struct {
	// The ID of the deleted product.
	DeletedProductID *null.String `json:"deletedProductId,omitempty"`
	// The shop associated with the product.
	Shop *Shop `json:"shop,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `productDuplicate` mutation.
type ProductDuplicatePayload struct {
	// The asynchronous job duplicating the product images.
	ImageJob *Job `json:"imageJob,omitempty"`
	// The duplicated product.
	NewProduct *Product `json:"newProduct,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one Product and a cursor during pagination.
type ProductEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of ProductEdge.
	Node *Product `json:"node,omitempty"`
}

// Return type for `productImageUpdate` mutation.
type ProductImageUpdatePayload struct {
	// Image updated.
	Image *Image `json:"image,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Specifies the input fields required to create a product.
type ProductInput struct {
	// The description of the product, complete with HTML formatting.
	DescriptionHTML *null.String `json:"descriptionHtml,omitempty"`
	// A unique human-friendly string for the product. Automatically generated from the product's title.
	Handle *null.String `json:"handle,omitempty"`
	// Whether a redirect is required after a new handle has been provided.
	// If true, then the old handle is redirected to the new one automatically.
	RedirectNewHandle *bool `json:"redirectNewHandle,omitempty"`
	// The SEO information associated with the product.
	Seo *SEOInput `json:"seo,omitempty"`
	// The product type specified by the merchant.
	ProductType *null.String `json:"productType,omitempty"`
	// A comma separated list tags that have been added to the product.
	Tags []null.String `json:"tags,omitempty"`
	// The theme template used when viewing the product in a store.
	TemplateSuffix *null.String `json:"templateSuffix,omitempty"`
	// Whether the product is a gift card.
	GiftCard *bool `json:"giftCard,omitempty"`
	// The theme template used when viewing the gift card in a store.
	GiftCardTemplateSuffix *null.String `json:"giftCardTemplateSuffix,omitempty"`
	// The title of the product.
	Title *null.String `json:"title,omitempty"`
	// The name of the product's vendor.
	Vendor *null.String `json:"vendor,omitempty"`
	// A description of the product. Supports HTML formatting. This argument is deprecated: Use `descriptionHtml` instead.
	BodyHTML *null.String `json:"bodyHtml,omitempty"`
	// The IDs of the collections that this product will be added to.
	CollectionsToJoin []null.String `json:"collectionsToJoin,omitempty"`
	// The IDs of collections that will no longer include the product.
	CollectionsToLeave []null.String `json:"collectionsToLeave,omitempty"`
	// Specifies the product to update in productUpdate or creates a new product if absent in productCreate.
	ID *null.String `json:"id,omitempty"`
	// The images to associate with the product.
	Images []*ImageInput `json:"images,omitempty"`
	// The metafields to associate with this product.
	Metafields []*MetafieldInput `json:"metafields,omitempty"`
	// The private metafields to associated with this product.
	PrivateMetafields []*PrivateMetafieldInput `json:"privateMetafields,omitempty"`
	// List of custom product options (maximum of 3 per product).
	Options []null.String `json:"options,omitempty"`
	// A list of the channels where the product is published. This argument is deprecated: Use `PublishablePublish` instead.
	ProductPublications []*ProductPublicationInput `json:"productPublications,omitempty"`
	// A list of the channels where the product is published. This argument is deprecated: Use `PublishablePublish` instead.
	Publications []*ProductPublicationInput `json:"publications,omitempty"`
	// Only products with an active status can be published. This argument is deprecated: Use `PublishablePublish` instead.
	PublishDate *null.String `json:"publishDate,omitempty"`
	// Only products with an active status can be published. This argument is deprecated: Use `PublishablePublish` instead.
	PublishOn *null.String `json:"publishOn,omitempty"`
	// Only products with an active status can be published. This argument is deprecated: Use `PublishablePublish` instead.
	Published *bool `json:"published,omitempty"`
	// Only products with an active status can be published. This argument is deprecated: Use `PublishablePublish` instead.
	PublishedAt *null.String `json:"publishedAt,omitempty"`
	// A list of variants associated with the product.
	Variants []*ProductVariantInput `json:"variants,omitempty"`
	// The status of the product.
	Status *ProductStatus `json:"status,omitempty"`
	// Whether the product can only be purchased with a selling plan. If set to `true` on an already existing product, then the product will be marked unavailable on channels that don't support subscriptions.
	RequiresSellingPlan *bool `json:"requiresSellingPlan,omitempty"`
}

// Return type for `productJoinSellingPlanGroups` mutation.
type ProductJoinSellingPlanGroupsPayload struct {
	// The product object.
	Product *Product `json:"product,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Return type for `productLeaveSellingPlanGroups` mutation.
type ProductLeaveSellingPlanGroupsPayload struct {
	// The product object.
	Product *Product `json:"product,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Product property names like "Size", "Color", and "Material".
// Variants are selected based on permutations of these options.
// 255 characters limit each.
type ProductOption struct {
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The product option’s name.
	Name null.String `json:"name,omitempty"`
	// The product option's position.
	Position int `json:"position,omitempty"`
	// The translations associated with the resource.
	Translations []*PublishedTranslation `json:"translations,omitempty"`
	// The corresponding value to the product option name.
	Values []null.String `json:"values,omitempty"`
}

func (ProductOption) IsNode()                     {}
func (ProductOption) IsHasPublishedTranslations() {}

// The price range of the product.
type ProductPriceRange struct {
	// The highest variant's price.
	MaxVariantPrice *MoneyV2 `json:"maxVariantPrice,omitempty"`
	// The lowest variant's price.
	MinVariantPrice *MoneyV2 `json:"minVariantPrice,omitempty"`
}

// The price range of the product.
type ProductPriceRangeV2 struct {
	// The highest variant's price.
	MaxVariantPrice *MoneyV2 `json:"maxVariantPrice,omitempty"`
	// The lowest variant's price.
	MinVariantPrice *MoneyV2 `json:"minVariantPrice,omitempty"`
}

// Represents the channels where a product is published.
type ProductPublication struct {
	// The channel where the product was or is published.
	Channel *Channel `json:"channel,omitempty"`
	// Whether the publication is published or not.
	IsPublished bool `json:"isPublished,omitempty"`
	// The product that was or is going to be published on the channel.
	Product *Product `json:"product,omitempty"`
	// The date that the product was or is going to be published on the channel.
	PublishDate *null.String `json:"publishDate,omitempty"`
}

// An auto-generated type for paginating through multiple ProductPublications.
type ProductPublicationConnection struct {
	// A list of edges.
	Edges []*ProductPublicationEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ProductPublication and a cursor during pagination.
type ProductPublicationEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of ProductPublicationEdge.
	Node *ProductPublication `json:"node,omitempty"`
}

// Specifies a publication to which a product will be published.
type ProductPublicationInput struct {
	// ID of the publication.
	PublicationID *null.String `json:"publicationId,omitempty"`
	// ID of the channel. This argument is deprecated: Use publicationId instead.
	ChannelID *null.String `json:"channelId,omitempty"`
	// This argument is deprecated: Use publicationId instead.
	ChannelHandle *null.String `json:"channelHandle,omitempty"`
	// The date and time that the product was (or will be) published.
	PublishDate *null.String `json:"publishDate,omitempty"`
}

// Specifies a product to publish and the channels to publish it to.
type ProductPublishInput struct {
	// The product to create or update publications for.
	ID null.String `json:"id,omitempty"`
	// The publication that the product is published to.
	ProductPublications []*ProductPublicationInput `json:"productPublications,omitempty"`
}

// Return type for `productPublish` mutation.
type ProductPublishPayload struct {
	// The product that has been published.
	Product *Product `json:"product,omitempty"`
	// The channels where the product is published.
	ProductPublications []*ProductPublication `json:"productPublications,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `productReorderImages` mutation.
type ProductReorderImagesPayload struct {
	// The asynchronous job reordering the images.
	Job *Job `json:"job,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `productReorderMedia` mutation.
type ProductReorderMediaPayload struct {
	// The asynchronous job reordering the media.
	Job *Job `json:"job,omitempty"`
	// List of errors that occurred executing the mutation.
	MediaUserErrors []*MediaUserError `json:"mediaUserErrors,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Specifies a product to unpublish from a channel and the sales channels to unpublish it from.
type ProductUnpublishInput struct {
	// The ID of the product to create or update publications for.
	ID null.String `json:"id,omitempty"`
	// The channels to unpublish the product from.
	ProductPublications []*ProductPublicationInput `json:"productPublications,omitempty"`
}

// Return type for `productUnpublish` mutation.
type ProductUnpublishPayload struct {
	// The product that has been unpublished.
	Product *Product `json:"product,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `productUpdateMedia` mutation.
type ProductUpdateMediaPayload struct {
	// The updated media.
	Media []Media `json:"media,omitempty"`
	// List of errors that occurred executing the mutation.
	MediaUserErrors []*MediaUserError `json:"mediaUserErrors,omitempty"`
	// The product which media was updated on.
	Product *Product `json:"product,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `productUpdate` mutation.
type ProductUpdatePayload struct {
	// The updated product.
	Product *Product `json:"product,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Represents a product variant.
type ProductVariant struct {
	// Whether the product variant is available for sale.
	AvailableForSale bool `json:"availableForSale,omitempty"`
	// The value of the barcode associated with the product.
	Barcode *null.String `json:"barcode,omitempty"`
	// The compare-at price of the variant in the default shop currency.
	CompareAtPrice *null.String `json:"compareAtPrice,omitempty"`
	// The date and time when the variant was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// A default cursor for use in pagination.
	DefaultCursor null.String `json:"defaultCursor,omitempty"`
	// The delivery profile for the variant.
	DeliveryProfile *DeliveryProfile `json:"deliveryProfile,omitempty"`
	// Display name of the variant, based on product's title + variant's title.
	DisplayName null.String `json:"displayName,omitempty"`
	// The fulfillment service associated with the product.
	FulfillmentService *FulfillmentService `json:"fulfillmentService,omitempty"`
	// Whether changes to the fulfillment service for the product variant are allowed.
	FulfillmentServiceEditable *EditableProperty `json:"fulfillmentServiceEditable,omitempty"`
	// The Harmonized System Code (or HS Tariff Code) for the variant.
	HarmonizedSystemCode *null.String `json:"harmonizedSystemCode,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The featured image for the variant.
	Image *Image `json:"image,omitempty"`
	// The inventory item, which is used to query for inventory information.
	InventoryItem *InventoryItem `json:"inventoryItem,omitempty"`
	// The fulfillment service that tracks the number of items in stock for the product variant.
	InventoryManagement ProductVariantInventoryManagement `json:"inventoryManagement,omitempty"`
	// Whether customers are allowed to place an order for the product variant when it's out of stock.
	InventoryPolicy ProductVariantInventoryPolicy `json:"inventoryPolicy,omitempty"`
	// The total sellable quantity of the variant.
	InventoryQuantity *int `json:"inventoryQuantity,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// The media associated with the product variant.
	Media *MediaConnection `json:"media,omitempty"`
	// The metafield associated with the resource.
	Metafield *Metafield `json:"metafield,omitempty"`
	// A paginated list of metafields associated with the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The order of the product variant in the list of product variants. The first position in the list is 1.
	Position int `json:"position,omitempty"`
	// List of prices and compare-at prices in the presentment currencies for this shop.
	PresentmentPrices *ProductVariantPricePairConnection `json:"presentmentPrices,omitempty"`
	// The price of the product variant in the default shop currency.
	Price null.String `json:"price,omitempty"`
	// Returns a private metafield found by namespace and key.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// List of private metafields.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// The product that this variant belongs to.
	Product *Product `json:"product,omitempty"`
	// Whether a customer needs to provide a shipping address when placing an order for the product variant.
	RequiresShipping bool `json:"requiresShipping,omitempty"`
	// List of product options applied to the variant.
	SelectedOptions []*SelectedOption `json:"selectedOptions,omitempty"`
	// Count of selling plan groups associated with the product variant.
	SellingPlanGroupCount int `json:"sellingPlanGroupCount,omitempty"`
	// An identifier for the product variant in the shop. Required in order to connect to a fulfillment service.
	Sku *null.String `json:"sku,omitempty"`
	// The storefront ID of the product variant.
	StorefrontID null.String `json:"storefrontId,omitempty"`
	// The tax code for the product variant.
	TaxCode *null.String `json:"taxCode,omitempty"`
	// Whether a tax is charged when the product variant is sold.
	Taxable bool `json:"taxable,omitempty"`
	// The title of the product variant.
	Title null.String `json:"title,omitempty"`
	// The translations associated with the resource.
	Translations []*PublishedTranslation `json:"translations,omitempty"`
	// The date and time (ISO 8601 format) when the product variant was last modified.
	UpdatedAt null.String `json:"updatedAt,omitempty"`
	// The weight of the product variant in the unit system specified with weight_unit.
	Weight *float64 `json:"weight,omitempty"`
	// The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: `g`, `kg`, `oz`, `lb`.
	WeightUnit WeightUnit `json:"weightUnit,omitempty"`
}

func (ProductVariant) IsCommentEventEmbed()        {}
func (ProductVariant) IsNode()                     {}
func (ProductVariant) IsHasMetafields()            {}
func (ProductVariant) IsHasPublishedTranslations() {}
func (ProductVariant) IsNavigable()                {}
func (ProductVariant) IsLegacyInteroperability()   {}

// Specifies the input fields required to append media to a single variant.
type ProductVariantAppendMediaInput struct {
	// Specifies the variant to which media will be appended.
	VariantID null.String `json:"variantId,omitempty"`
	// Specifies the media to append to the variant.
	MediaIds []null.String `json:"mediaIds,omitempty"`
}

// Return type for `productVariantAppendMedia` mutation.
type ProductVariantAppendMediaPayload struct {
	// The product associated with the variants and media.
	Product *Product `json:"product,omitempty"`
	// The product variants that were updated.
	ProductVariants []*ProductVariant `json:"productVariants,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*MediaUserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple ProductVariants.
type ProductVariantConnection struct {
	// A list of edges.
	Edges []*ProductVariantEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `productVariantCreate` mutation.
type ProductVariantCreatePayload struct {
	// The product associated with the variant.
	Product *Product `json:"product,omitempty"`
	// The successfully created variant.
	ProductVariant *ProductVariant `json:"productVariant,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `productVariantDelete` mutation.
type ProductVariantDeletePayload struct {
	// ID of the deleted product variant.
	DeletedProductVariantID *null.String `json:"deletedProductVariantId,omitempty"`
	// Product of the deleted product variant.
	Product *Product `json:"product,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Specifies the input fields required to detach media from a single variant.
type ProductVariantDetachMediaInput struct {
	// Specifies the variant from which media will be detached.
	VariantID null.String `json:"variantId,omitempty"`
	// Specifies the media to detach from the variant.
	MediaIds []null.String `json:"mediaIds,omitempty"`
}

// Return type for `productVariantDetachMedia` mutation.
type ProductVariantDetachMediaPayload struct {
	// The product associated with the variants and media.
	Product *Product `json:"product,omitempty"`
	// The product variants that were updated.
	ProductVariants []*ProductVariant `json:"productVariants,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*MediaUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one ProductVariant and a cursor during pagination.
type ProductVariantEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of ProductVariantEdge.
	Node *ProductVariant `json:"node,omitempty"`
}

// Specifies a product variant to create or update.
type ProductVariantInput struct {
	// The value of the barcode associated with the product.
	Barcode *null.String `json:"barcode,omitempty"`
	// The compare-at price of the variant.
	CompareAtPrice *null.String `json:"compareAtPrice,omitempty"`
	// The ID of the fulfillment service associated with the variant.
	FulfillmentServiceID *null.String `json:"fulfillmentServiceId,omitempty"`
	// The Harmonized System Code (or HS Tariff Code) for the variant.
	HarmonizedSystemCode *null.String `json:"harmonizedSystemCode,omitempty"`
	// Specifies the product variant to update or create a new variant if absent.
	ID *null.String `json:"id,omitempty"`
	// The ID of the image that's associated with the variant.
	ImageID *null.String `json:"imageId,omitempty"`
	// The URL of an image to associate with the variant.  This field can only be used through mutations that create product images and must match one of the URLs being created on the product.
	ImageSrc *null.String `json:"imageSrc,omitempty"`
	// The URL of the media to associate with the variant. This field can only be used in mutations that create media images and must match one of the URLs being created on the product. This field only accepts one value.
	MediaSrc []null.String `json:"mediaSrc,omitempty"`
	// The fulfillment service that tracks the number of items in stock for the product variant. If you track the inventory yourself using the admin, then set the value to `shopify`. Valid values: `shopify` or the handle of a fulfillment service that has inventory management enabled.
	//  This argument is deprecated: Use tracked attribute on `inventoryItem` instead.
	InventoryManagement *ProductVariantInventoryManagement `json:"inventoryManagement,omitempty"`
	// Whether customers are allowed to place an order for the product variant when it's out of stock.
	InventoryPolicy *ProductVariantInventoryPolicy `json:"inventoryPolicy,omitempty"`
	// Create only field. The inventory quantities at each location where the variant is stocked.
	InventoryQuantities []*InventoryLevelInput `json:"inventoryQuantities,omitempty"`
	// Inventory Item associated with the variant, used for unit cost.
	InventoryItem *InventoryItemInput `json:"inventoryItem,omitempty"`
	// Additional customizable information about the product variant.
	Metafields []*MetafieldInput `json:"metafields,omitempty"`
	// The private metafields to associated with this product.
	PrivateMetafields []*PrivateMetafieldInput `json:"privateMetafields,omitempty"`
	// The custom properties that a shop owner uses to define product variants.
	Options []null.String `json:"options,omitempty"`
	// The order of the product variant in the list of product variants. The first position in the list is 1.
	Position *int `json:"position,omitempty"`
	// The price of the variant.
	Price *null.String `json:"price,omitempty"`
	// Create only required field. Specifies the product on which to create the variant.
	ProductID *null.String `json:"productId,omitempty"`
	// Whether the variant requires shipping.
	RequiresShipping *bool `json:"requiresShipping,omitempty"`
	// The SKU for the variant.
	Sku *null.String `json:"sku,omitempty"`
	// Whether the variant is taxable.
	Taxable *bool `json:"taxable,omitempty"`
	// This argument is deprecated: Variant title is not a writable field; it is generated from the selected variant options.
	Title *null.String `json:"title,omitempty"`
	// The tax code associated with the variant.
	TaxCode *null.String `json:"taxCode,omitempty"`
	// The weight of the variant.
	Weight *float64 `json:"weight,omitempty"`
	// The unit of weight that's used to measure the variant.
	WeightUnit *WeightUnit `json:"weightUnit,omitempty"`
}

// Return type for `productVariantJoinSellingPlanGroups` mutation.
type ProductVariantJoinSellingPlanGroupsPayload struct {
	// The product variant object.
	ProductVariant *ProductVariant `json:"productVariant,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Return type for `productVariantLeaveSellingPlanGroups` mutation.
type ProductVariantLeaveSellingPlanGroupsPayload struct {
	// The product variant object.
	ProductVariant *ProductVariant `json:"productVariant,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// The compare-at price and price of a variant sharing a currency.
type ProductVariantPricePair struct {
	// The compare-at price of the variant with associated currency.
	CompareAtPrice *MoneyV2 `json:"compareAtPrice,omitempty"`
	// The price of the variant with associated currency.
	Price *MoneyV2 `json:"price,omitempty"`
}

// An auto-generated type for paginating through multiple ProductVariantPricePairs.
type ProductVariantPricePairConnection struct {
	// A list of edges.
	Edges []*ProductVariantPricePairEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination.
type ProductVariantPricePairEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of ProductVariantPricePairEdge.
	Node *ProductVariantPricePair `json:"node,omitempty"`
}

// Return type for `productVariantUpdate` mutation.
type ProductVariantUpdatePayload struct {
	// The product associated with the variant.
	Product *Product `json:"product,omitempty"`
	// The updated variant.
	ProductVariant *ProductVariant `json:"productVariant,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// A publication is a group of products and collections that is published to an app.
type Publication struct {
	// The app associated with the publication.
	App *App `json:"app,omitempty"`
	// The collection publications for the list of collections published to the publication.
	CollectionPublicationsV3 *ResourcePublicationConnection `json:"collectionPublicationsV3,omitempty"`
	// The list of collections published to the publication.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// Whether the collection is available to the publication.
	HasCollection bool `json:"hasCollection,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Name of the publication.
	Name null.String `json:"name,omitempty"`
	// The product publications for the list of products published to the publication.
	ProductPublicationsV3 *ResourcePublicationConnection `json:"productPublicationsV3,omitempty"`
	// The list of products published to the publication.
	Products *ProductConnection `json:"products,omitempty"`
	// Whether or not this publication supports future publishing.
	SupportsFuturePublishing bool `json:"supportsFuturePublishing,omitempty"`
}

func (Publication) IsNode() {}

// An auto-generated type for paginating through multiple Publications.
type PublicationConnection struct {
	// A list of edges.
	Edges []*PublicationEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one Publication and a cursor during pagination.
type PublicationEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of PublicationEdge.
	Node *Publication `json:"node,omitempty"`
}

// Specifies the input fields required to publish a resource.
type PublicationInput struct {
	// ID of the channel. This argument is deprecated: Use publicationId instead.
	ChannelID *null.String `json:"channelId,omitempty"`
	// ID of the publication.
	PublicationID *null.String `json:"publicationId,omitempty"`
	// The date and time that the resource was published. Setting this to a date in the future will schedule
	// the resource to be published. Only online store channels support future publishing.
	PublishDate *null.String `json:"publishDate,omitempty"`
}

// Return type for `publishablePublish` mutation.
type PublishablePublishPayload struct {
	// Resource that has been published.
	Publishable Publishable `json:"publishable,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `publishablePublishToCurrentChannel` mutation.
type PublishablePublishToCurrentChannelPayload struct {
	// Resource that has been published.
	Publishable Publishable `json:"publishable,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `publishableUnpublish` mutation.
type PublishableUnpublishPayload struct {
	// Resource that has been unpublished.
	Publishable Publishable `json:"publishable,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `publishableUnpublishToCurrentChannel` mutation.
type PublishableUnpublishToCurrentChannelPayload struct {
	// Resource that has been unpublished.
	Publishable Publishable `json:"publishable,omitempty"`
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Published translation of a field of a resource.
type PublishedTranslation struct {
	// Translation key.
	Key null.String `json:"key,omitempty"`
	// Translation locale.
	Locale null.String `json:"locale,omitempty"`
	// Translation value.
	Value *null.String `json:"value,omitempty"`
}

// Represents a refund of items or transactions in an order.
type Refund struct {
	// When the refund was created.
	CreatedAt *null.String `json:"createdAt,omitempty"`
	// A list of the order's refunded duties.
	Duties []*RefundDuty `json:"duties,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// Note associated with the refund.
	Note *null.String `json:"note,omitempty"`
	// The order associated with the refund.
	Order *Order `json:"order,omitempty"`
	// The RefundLineItem resources attached to the refund.
	RefundLineItems *RefundLineItemConnection `json:"refundLineItems,omitempty"`
	// Total amount refunded across all the transactions for this refund.
	TotalRefunded *MoneyV2 `json:"totalRefunded,omitempty"`
	// Total amount refunded across all the transactions for this refund in shop and presentment currencies.
	TotalRefundedSet *MoneyBag `json:"totalRefundedSet,omitempty"`
	// Transactions associated with the refund.
	Transactions *OrderTransactionConnection `json:"transactions,omitempty"`
	// When the refund was last updated.
	UpdatedAt null.String `json:"updatedAt,omitempty"`
}

func (Refund) IsNode()                   {}
func (Refund) IsLegacyInteroperability() {}

// Return type for `refundCreate` mutation.
type RefundCreatePayload struct {
	// The order associated with the created refund.
	Order *Order `json:"order,omitempty"`
	// The created refund.
	Refund *Refund `json:"refund,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Represents a refunded duty.
type RefundDuty struct {
	// Returns the amount of a refunded duty in shop and presentment currencies.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// Returns a Duty resource. This represents the Duty in the non-refund context.
	OriginalDuty *Duty `json:"originalDuty,omitempty"`
}

// Specifies the fields required to return duties on a refund.
type RefundDutyInput struct {
	// The ID of the duty in the refund.
	DutyID null.String `json:"dutyId,omitempty"`
	// The type of refund for this duty.
	RefundType *RefundDutyRefundType `json:"refundType,omitempty"`
}

// Specifies the fields to create a refund.
type RefundInput struct {
	// The currency (in ISO format) that is used to refund the order. This must be the presentment currency (the currency used by the customer) and is a required field for orders where the currency and presentment currency differ.
	Currency *CurrencyCode `json:"currency,omitempty"`
	// Order ID for which the refund is created.
	OrderID null.String `json:"orderId,omitempty"`
	// An optional note attached to a refund.
	Note *null.String `json:"note,omitempty"`
	// Whether to send a refund notification to the customer.
	Notify *bool `json:"notify,omitempty"`
	// Specifies how much of the shipping cost to refund.
	Shipping *ShippingRefundInput `json:"shipping,omitempty"`
	// A list of line items to refund.
	RefundLineItems []*RefundLineItemInput `json:"refundLineItems,omitempty"`
	// A list of duties to refund.
	RefundDuties []*RefundDutyInput `json:"refundDuties,omitempty"`
	// A list of transactions involved in the refund.
	Transactions []*OrderTransactionInput `json:"transactions,omitempty"`
}

// Represents the details about a refunded line item.
type RefundLineItem struct {
	// Returns a LineItem resource. This represents the LineItem in the non-refund context.
	LineItem *LineItem `json:"lineItem,omitempty"`
	// The inventory restock location.
	Location *Location `json:"location,omitempty"`
	// Returns the price of a refunded line item.
	Price null.String `json:"price,omitempty"`
	// Returns the price of a refunded line item in shop and presentment currencies.
	PriceSet *MoneyBag `json:"priceSet,omitempty"`
	// Returns the quantity of a refunded line item.
	Quantity int `json:"quantity,omitempty"`
	// Represents the type of restock for the refunded line item.
	RestockType RefundLineItemRestockType `json:"restockType,omitempty"`
	// Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund.
	Restocked bool `json:"restocked,omitempty"`
	// Returns the subtotal price of a refunded line item.
	Subtotal null.String `json:"subtotal,omitempty"`
	// Returns the subtotal price of a refunded line item in shop and presentment currencies.
	SubtotalSet *MoneyBag `json:"subtotalSet,omitempty"`
	// Returns the total tax charged on a refunded line item.
	TotalTax null.String `json:"totalTax,omitempty"`
	// Returns the total tax charged on a refunded line item in shop and presentment currencies.
	TotalTaxSet *MoneyBag `json:"totalTaxSet,omitempty"`
}

// An auto-generated type for paginating through multiple RefundLineItems.
type RefundLineItemConnection struct {
	// A list of edges.
	Edges []*RefundLineItemEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one RefundLineItem and a cursor during pagination.
type RefundLineItemEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of RefundLineItemEdge.
	Node *RefundLineItem `json:"node,omitempty"`
}

// Specifies the fields required to return line items on a refund.
type RefundLineItemInput struct {
	// The ID of the line item in the refund.
	LineItemID null.String `json:"lineItemId,omitempty"`
	// The quantity of the associated line item that was returned.
	Quantity int `json:"quantity,omitempty"`
	// The type of restock for this line item.
	RestockType *RefundLineItemRestockType `json:"restockType,omitempty"`
	// The intended location for restocking if `refundType` is not `NO_RESTOCK`
	LocationID *null.String `json:"locationId,omitempty"`
}

// Presents information or problems to merchants, with 1 or more actions that they can take.
// They can optionally have a specific icon and be dismissed by merchants.
type ResourceAlert struct {
	// Buttons in the alert that link to related information.
	// For example, _View risk assessment_.
	Actions []*ResourceAlertAction `json:"actions,omitempty"`
	// Details about the alert.
	Content null.String `json:"content,omitempty"`
	// Unique identifier that appears when an alert is manually closed by the merchant.
	// Most alerts cannot be manually closed.
	DismissibleHandle *null.String `json:"dismissibleHandle,omitempty"`
	// Icon that displays with the alert.
	Icon *ResourceAlertIcon `json:"icon,omitempty"`
	// Indication of how important the alert is.
	Severity ResourceAlertSeverity `json:"severity,omitempty"`
	// The name of the alert.
	Title null.String `json:"title,omitempty"`
}

// An action associated to a resource alert.
type ResourceAlertAction struct {
	// Whether the action is primary or not.
	Primary bool `json:"primary,omitempty"`
	// Resource for the action to show.
	Show *null.String `json:"show,omitempty"`
	// Action title.
	Title null.String `json:"title,omitempty"`
	// Action target URL.
	URL null.String `json:"url,omitempty"`
}

// Represents feedback from apps about a resource, and the steps required to set up the apps on the shop.
type ResourceFeedback struct {
	// Feedback from an app about the steps a merchant needs to take to set up the app on their store.
	AppFeedback []*AppFeedback `json:"appFeedback,omitempty"`
	// List of AppFeedback detailing issues regarding a resource.
	Details []*AppFeedback `json:"details,omitempty"`
	// Summary of resource feedback pertaining to the resource.
	Summary null.String `json:"summary,omitempty"`
}

// A resource limit represents the limits that the resource has.
type ResourceLimit struct {
	// Whether or not the resource is available.
	Available bool `json:"available,omitempty"`
	// Quantity available. If null the quantity available is unlimited.
	QuantityAvailable *int `json:"quantityAvailable,omitempty"`
	// Quantity limit of the resource. If null the quantity is unlimited.
	QuantityLimit *int `json:"quantityLimit,omitempty"`
	// Quantity used of the resource. If null the quantity used cannot be retrieved.
	QuantityUsed *int `json:"quantityUsed,omitempty"`
}

// A resource publication represents that a resource has been published to a publication.
type ResourcePublication struct {
	// The channel the resource publication is published to.
	Channel *Channel `json:"channel,omitempty"`
	// Whether the resource publication is published. Also returns true if the resource publication is scheduled to be published.
	// If false, then the resource publication is neither published nor scheduled to be published.
	IsPublished bool `json:"isPublished,omitempty"`
	// The publication the resource publication is published to.
	Publication *Publication `json:"publication,omitempty"`
	// The date that the resource publication was or is going to be published to the publication.
	PublishDate null.String `json:"publishDate,omitempty"`
	// The resource published to the publication.
	Publishable Publishable `json:"publishable,omitempty"`
}

// An auto-generated type for paginating through multiple ResourcePublications.
type ResourcePublicationConnection struct {
	// A list of edges.
	Edges []*ResourcePublicationEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ResourcePublication and a cursor during pagination.
type ResourcePublicationEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of ResourcePublicationEdge.
	Node *ResourcePublication `json:"node,omitempty"`
}

// A resource publication represents that a resource either has been published or will be published to a publication.
type ResourcePublicationV2 struct {
	// Whether the resource publication is published. If true, then the resource publication is published to the publication.
	// If false, then the resource publication is staged to be published to the publication.
	IsPublished bool `json:"isPublished,omitempty"`
	// The publication the resource publication is published to.
	Publication *Publication `json:"publication,omitempty"`
	// The date that the resource publication was or is going to be published to the publication.
	PublishDate *null.String `json:"publishDate,omitempty"`
	// The resource published to the publication.
	Publishable Publishable `json:"publishable,omitempty"`
}

// An auto-generated type for paginating through multiple ResourcePublicationV2s.
type ResourcePublicationV2Connection struct {
	// A list of edges.
	Edges []*ResourcePublicationV2Edge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ResourcePublicationV2 and a cursor during pagination.
type ResourcePublicationV2Edge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of ResourcePublicationV2Edge.
	Node *ResourcePublicationV2 `json:"node,omitempty"`
}

// SEO information.
type Seo struct {
	// SEO Description.
	Description *null.String `json:"description,omitempty"`
	// SEO Title.
	Title *null.String `json:"title,omitempty"`
}

// SEO information.
type SEOInput struct {
	// SEO title of the product.
	Title *null.String `json:"title,omitempty"`
	// SEO description of the product.
	Description *null.String `json:"description,omitempty"`
}

// A saved search is a representation of a search query saved in the admin.
type SavedSearch struct {
	// The filters of a saved search.
	Filters []*SearchFilter `json:"filters,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// The name of a saved search.
	Name null.String `json:"name,omitempty"`
	// The query string of a saved search. This includes search terms and filters.
	Query null.String `json:"query,omitempty"`
	// The type of resource this saved search is searching in.
	ResourceType SearchResultType `json:"resourceType,omitempty"`
	// The search terms of a saved search.
	SearchTerms null.String `json:"searchTerms,omitempty"`
}

func (SavedSearch) IsNode()                   {}
func (SavedSearch) IsLegacyInteroperability() {}

// An auto-generated type for paginating through multiple SavedSearches.
type SavedSearchConnection struct {
	// A list of edges.
	Edges []*SavedSearchEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Specifies the fields required to create a saved search.
type SavedSearchCreateInput struct {
	// The type of resouce this saved search is searching in.
	ResourceType SearchResultType `json:"resourceType,omitempty"`
	// A descriptive name of the saved search.
	Name null.String `json:"name,omitempty"`
	// The query string of a saved search. This includes search terms and filters.
	Query null.String `json:"query,omitempty"`
}

// Return type for `savedSearchCreate` mutation.
type SavedSearchCreatePayload struct {
	// The saved search that was created.
	SavedSearch *SavedSearch `json:"savedSearch,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Specifies the fields to delete a saved search.
type SavedSearchDeleteInput struct {
	// ID of the saved search to delete.
	ID null.String `json:"id,omitempty"`
}

// Return type for `savedSearchDelete` mutation.
type SavedSearchDeletePayload struct {
	// The id of the saved search that was deleted.
	DeletedSavedSearchID *null.String `json:"deletedSavedSearchId,omitempty"`
	// The shop of the saved search that was deleted.
	Shop *Shop `json:"shop,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one SavedSearch and a cursor during pagination.
type SavedSearchEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of SavedSearchEdge.
	Node *SavedSearch `json:"node,omitempty"`
}

// Specifies the fields required to update a saved search.
type SavedSearchUpdateInput struct {
	// ID of the saved search to update.
	ID null.String `json:"id,omitempty"`
	// A descriptive name of the saved search.
	Name *null.String `json:"name,omitempty"`
	// The query string of a saved search. This included search terms and filters.
	Query *null.String `json:"query,omitempty"`
}

// Return type for `savedSearchUpdate` mutation.
type SavedSearchUpdatePayload struct {
	// The saved search that was updated.
	SavedSearch *SavedSearch `json:"savedSearch,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Script discount applications capture the intentions of a discount that
// was created by a Shopify Script for an order's line item or shipping line.
type ScriptDiscountApplication struct {
	// The method by which the discount's value is allocated to its entitled items.
	AllocationMethod DiscountApplicationAllocationMethod `json:"allocationMethod,omitempty"`
	// The description of the application as defined by the Script.
	Description null.String `json:"description,omitempty"`
	// An ordered index that can be used to identify the discount application and indicate the precedence
	// of the discount application for calculations.
	Index int `json:"index,omitempty"`
	// How the discount amount is distributed on the discounted lines.
	TargetSelection DiscountApplicationTargetSelection `json:"targetSelection,omitempty"`
	// Whether the discount is applied on line items or shipping lines.
	TargetType DiscountApplicationTargetType `json:"targetType,omitempty"`
	// The title of the application as defined by the Script.
	Title null.String `json:"title,omitempty"`
	// The value of the discount application.
	Value PricingValue `json:"value,omitempty"`
}

func (ScriptDiscountApplication) IsDiscountApplication() {}

// A script tag represents remote JavaScript code that is loaded into the pages of a shop's storefront or the order status page of checkout.
type ScriptTag struct {
	// Whether the Shopify CDN can cache and serve the script tag.
	// If `true`, then the script will be cached and served by the CDN.
	// The cache expires 15 minutes after the script tag is successfully returned.
	// If `false`, then the script will be served as is.
	Cache bool `json:"cache,omitempty"`
	// The date and time when the script tag was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The page or pages on the online store that the script should be included.
	DisplayScope ScriptTagDisplayScope `json:"displayScope,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// The URL to the remote script.
	Src null.String `json:"src,omitempty"`
	// The date and time when the script tag was last updated.
	UpdatedAt null.String `json:"updatedAt,omitempty"`
}

func (ScriptTag) IsNode()                   {}
func (ScriptTag) IsLegacyInteroperability() {}

// An auto-generated type for paginating through multiple ScriptTags.
type ScriptTagConnection struct {
	// A list of edges.
	Edges []*ScriptTagEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `scriptTagCreate` mutation.
type ScriptTagCreatePayload struct {
	// The script tag that was created.
	ScriptTag *ScriptTag `json:"scriptTag,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `scriptTagDelete` mutation.
type ScriptTagDeletePayload struct {
	// The ID of the deleted script tag.
	DeletedScriptTagID *null.String `json:"deletedScriptTagId,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one ScriptTag and a cursor during pagination.
type ScriptTagEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of ScriptTagEdge.
	Node *ScriptTag `json:"node,omitempty"`
}

// Specifies the input fields for a script tag.
type ScriptTagInput struct {
	// The URL of the remote script.
	Src *null.String `json:"src,omitempty"`
	// The page or pages on the online store where the script should be included.
	DisplayScope *ScriptTagDisplayScope `json:"displayScope,omitempty"`
	// Whether the Shopify CDN can cache and serve the script tag.
	// If `true`, then the script will be cached and served by the CDN.
	// The cache expires 15 minutes after the script tag is successfully returned.
	// If `false`, then the script will be served as is.
	Cache *bool `json:"cache,omitempty"`
}

// Return type for `scriptTagUpdate` mutation.
type ScriptTagUpdatePayload struct {
	// The script tag that was updated.
	ScriptTag *ScriptTag `json:"scriptTag,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// A filter in a search query represented by a key value pair.
type SearchFilter struct {
	// The key of the search filter.
	Key null.String `json:"key,omitempty"`
	// The value of the search filter.
	Value null.String `json:"value,omitempty"`
}

// A list of search filters along with their specific options in value and label pair for filtering.
type SearchFilterOptions struct {
	// A list of options that can be use to filter product availability.
	ProductAvailability []*FilterOption `json:"productAvailability,omitempty"`
}

// Represents an individual result returned from a search.
type SearchResult struct {
	// Returns the search result description text.
	Description *null.String `json:"description,omitempty"`
	// Returns the Image resource presented to accompany a search result.
	Image *Image `json:"image,omitempty"`
	// Returns the ID of the resource returned in the search result.
	Reference Node `json:"reference,omitempty"`
	// Returns the resource title.
	Title null.String `json:"title,omitempty"`
	// Returns the absolute URL to the resource in the search result.
	URL null.String `json:"url,omitempty"`
}

// The connection type for SearchResult.
type SearchResultConnection struct {
	// A list of edges.
	Edges []*SearchResultEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
	// Information to aid in pagination.
	ResultsAfterCount int `json:"resultsAfterCount,omitempty"`
}

// An auto-generated type which holds one SearchResult and a cursor during pagination.
type SearchResultEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of SearchResultEdge.
	Node *SearchResult `json:"node,omitempty"`
}

// Properties used by customers to select a product variant.
// Products can have multiple options, like different sizes or colors.
type SelectedOption struct {
	// The product option’s name.
	Name null.String `json:"name,omitempty"`
	// The product option’s value.
	Value null.String `json:"value,omitempty"`
}

// Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
// and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
// up these records if you need to restore them later.
type SellingPlan struct {
	// Selling plan policy which describes the billing details.
	BillingPolicy SellingPlanBillingPolicy `json:"billingPolicy,omitempty"`
	// The date and time when the selling plan was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// Selling plan policy which describes the delivery details.
	DeliveryPolicy SellingPlanDeliveryPolicy `json:"deliveryPolicy,omitempty"`
	// Buyer facing string which describes the selling plan commitment.
	Description *null.String `json:"description,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Buyer facing string which describes the selling plan content.
	Name null.String `json:"name,omitempty"`
	// The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
	Options []null.String `json:"options,omitempty"`
	// Relative position of the selling plan for display. A lower position will be displayed before a higher position.
	Position *int `json:"position,omitempty"`
	// Selling plan pricing details.
	PricingPolicies []SellingPlanPricingPolicy `json:"pricingPolicies,omitempty"`
}

func (SellingPlan) IsNode() {}

// Represents a selling plan policy anchor.
type SellingPlanAnchor struct {
	// The day of the anchor.
	//
	// If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
	// the days of the week according to ISO 8601, where 1 is Monday.
	//
	// If `type` is not WEEKDAY, then the value must be between 1-31.
	Day int `json:"day,omitempty"`
	// The month of the anchor. If type is different than YEARDAY, this field must be null, otherwise it must be
	// between 1-12.
	Month *int `json:"month,omitempty"`
	// Represents the anchor type, it can be one one of WEEKDAY, MONTHDAY, YEARDAY.
	Type SellingPlanAnchorType `json:"type,omitempty"`
}

// Specifies the input fields required to create or update a selling plan anchor.
type SellingPlanAnchorInput struct {
	// Represents the anchor type, must be one of WEEKDAY, MONTHDAY, YEARDAY.
	Type *SellingPlanAnchorType `json:"type,omitempty"`
	// The day of the anchor.
	//
	// If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
	// the days of the week according to ISO 8601, where 1 is Monday.
	//
	// If `type` is not WEEKDAY, then the value must be between 1-31.
	Day *int `json:"day,omitempty"`
	// The month of the anchor. If type is different than YEARDAY, this field must be null, otherwise it must be
	// between 1-12.
	Month *int `json:"month,omitempty"`
}

// Specifies the input fields required to create or update a billing policy type.
type SellingPlanBillingPolicyInput struct {
	// Recurring billing policy details.
	Recurring *SellingPlanRecurringBillingPolicyInput `json:"recurring,omitempty"`
}

// An auto-generated type for paginating through multiple SellingPlans.
type SellingPlanConnection struct {
	// A list of edges.
	Edges []*SellingPlanEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Specifies the input fields to create or update a delivery policy.
type SellingPlanDeliveryPolicyInput struct {
	// Recurring delivery policy details.
	Recurring *SellingPlanRecurringDeliveryPolicyInput `json:"recurring,omitempty"`
}

// An auto-generated type which holds one SellingPlan and a cursor during pagination.
type SellingPlanEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of SellingPlanEdge.
	Node *SellingPlan `json:"node,omitempty"`
}

// Represents a fixed selling plan pricing policy.
type SellingPlanFixedPricingPolicy struct {
	// The price adjustment type.
	AdjustmentType SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType,omitempty"`
	// The price adjustment value.
	AdjustmentValue SellingPlanPricingPolicyAdjustmentValue `json:"adjustmentValue,omitempty"`
	// The date and time when the fixed selling plan pricing policy was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
}

func (SellingPlanFixedPricingPolicy) IsSellingPlanPricingPolicyBase() {}
func (SellingPlanFixedPricingPolicy) IsSellingPlanPricingPolicy()     {}

// Specifies the input fields required to create or update a fixed selling plan pricing policy.
type SellingPlanFixedPricingPolicyInput struct {
	// ID of the pricing policy.
	ID *null.String `json:"id,omitempty"`
	// Price adjustment type defined by the policy.
	AdjustmentType *SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType,omitempty"`
	// Price adjustment value defined by the policy.
	AdjustmentValue *SellingPlanPricingPolicyValueInput `json:"adjustmentValue,omitempty"`
}

// Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
// and associated records (selling plans and policies) are deleted 48 hours after a merchant
// uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
type SellingPlanGroup struct {
	// The identifier for app, exposed in Liquid and product JSON.
	AppID *null.String `json:"appId,omitempty"`
	// Whether the given product is directly associated to the selling plan group.
	AppliesToProduct bool `json:"appliesToProduct,omitempty"`
	// Whether the given product variant is directly associated to the selling plan group.
	AppliesToProductVariant bool `json:"appliesToProductVariant,omitempty"`
	// Whether any of the product variants of the given product are associated to the selling plan group.
	AppliesToProductVariants bool `json:"appliesToProductVariants,omitempty"`
	// The date and time when the selling plan group was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The merchant-facing description of the selling plan group.
	Description *null.String `json:"description,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The merchant-facing label of the selling plan group.
	MerchantCode null.String `json:"merchantCode,omitempty"`
	// The buyer-facing label of the selling plan group.
	Name null.String `json:"name,omitempty"`
	// The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
	Options []null.String `json:"options,omitempty"`
	// The relative position of the selling plan group for display.
	Position *int `json:"position,omitempty"`
	// A count of products associated to the selling plan group.
	ProductCount int `json:"productCount,omitempty"`
	// A count of product variants associated to the selling plan group.
	ProductVariantCount int `json:"productVariantCount,omitempty"`
	// Product variants associated to the selling plan group.
	ProductVariants *ProductVariantConnection `json:"productVariants,omitempty"`
	// Products associated to the selling plan group.
	Products *ProductConnection `json:"products,omitempty"`
	// Selling plans associated to the selling plan group.
	SellingPlans *SellingPlanConnection `json:"sellingPlans,omitempty"`
	// A summary of the policies associated to the selling plan group.
	Summary *null.String `json:"summary,omitempty"`
}

func (SellingPlanGroup) IsNode() {}

// Return type for `sellingPlanGroupAddProductVariants` mutation.
type SellingPlanGroupAddProductVariantsPayload struct {
	// The updated selling plan group.
	SellingPlanGroup *SellingPlanGroup `json:"sellingPlanGroup,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Return type for `sellingPlanGroupAddProducts` mutation.
type SellingPlanGroupAddProductsPayload struct {
	// The updated selling plan group.
	SellingPlanGroup *SellingPlanGroup `json:"sellingPlanGroup,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// An auto-generated type for paginating through multiple SellingPlanGroups.
type SellingPlanGroupConnection struct {
	// A list of edges.
	Edges []*SellingPlanGroupEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `sellingPlanGroupCreate` mutation.
type SellingPlanGroupCreatePayload struct {
	// The created selling plan group object.
	SellingPlanGroup *SellingPlanGroup `json:"sellingPlanGroup,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Return type for `sellingPlanGroupDelete` mutation.
type SellingPlanGroupDeletePayload struct {
	// The id of the deleted selling plan group object.
	DeletedSellingPlanGroupID *null.String `json:"deletedSellingPlanGroupId,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.
type SellingPlanGroupEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of SellingPlanGroupEdge.
	Node *SellingPlanGroup `json:"node,omitempty"`
}

// Specifies the input fields required to create or update a selling plan group.
type SellingPlanGroupInput struct {
	// Buyer facing label of the selling plan group.
	Name *null.String `json:"name,omitempty"`
	// Identifier for app, exposed in Liquid and product JSON.
	AppID *null.String `json:"appId,omitempty"`
	// Merchant facing label of the selling plan group.
	MerchantCode *null.String `json:"merchantCode,omitempty"`
	// Merchant facing description of the selling plan group.
	Description *null.String `json:"description,omitempty"`
	// List of selling plans to create.
	SellingPlansToCreate []*SellingPlanInput `json:"sellingPlansToCreate,omitempty"`
	// List of selling plans to update.
	SellingPlansToUpdate []*SellingPlanInput `json:"sellingPlansToUpdate,omitempty"`
	// List of selling plans ids to delete.
	SellingPlansToDelete []null.String `json:"sellingPlansToDelete,omitempty"`
	// The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
	Options []null.String `json:"options,omitempty"`
	// Relative value for display purposes of the selling plan group. A lower position will be displayed before a higher one.
	Position *int `json:"position,omitempty"`
}

// Return type for `sellingPlanGroupRemoveProductVariants` mutation.
type SellingPlanGroupRemoveProductVariantsPayload struct {
	// The removed product variant ids.
	RemovedProductVariantIds []null.String `json:"removedProductVariantIds,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Return type for `sellingPlanGroupRemoveProducts` mutation.
type SellingPlanGroupRemoveProductsPayload struct {
	// The removed product ids.
	RemovedProductIds []null.String `json:"removedProductIds,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Specifies resource association with a Selling Plan Group.
type SellingPlanGroupResourceInput struct {
	// The IDs of the Variants to add to the Selling Plan Group.
	ProductVariantIds []null.String `json:"productVariantIds,omitempty"`
	// The IDs of the Products to add to the Selling Plan Group.
	ProductIds []null.String `json:"productIds,omitempty"`
}

// Return type for `sellingPlanGroupUpdate` mutation.
type SellingPlanGroupUpdatePayload struct {
	// The IDs of the deleted Subscription Plans.
	DeletedSellingPlanIds []null.String `json:"deletedSellingPlanIds,omitempty"`
	// The updated Selling Plan Group.
	SellingPlanGroup *SellingPlanGroup `json:"sellingPlanGroup,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SellingPlanGroupUserError `json:"userErrors,omitempty"`
}

// Represents a selling plan group custom error.
type SellingPlanGroupUserError struct {
	// Error code to uniquely identify the error.
	Code *SellingPlanGroupUserErrorCode `json:"code,omitempty"`
	// Path to the input field which caused the error.
	Field []null.String `json:"field,omitempty"`
	// The error message.
	Message null.String `json:"message,omitempty"`
}

func (SellingPlanGroupUserError) IsDisplayableError() {}

// Specifies the input fields to create or update a selling plan.
type SellingPlanInput struct {
	// ID of the selling plan.
	ID *null.String `json:"id,omitempty"`
	// Buyer facing string which describes the selling plan content.
	Name *null.String `json:"name,omitempty"`
	// Buyer facing string which describes the selling plan commitment.
	Description *null.String `json:"description,omitempty"`
	// Selling plan policy which describes the billing details.
	BillingPolicy *SellingPlanBillingPolicyInput `json:"billingPolicy,omitempty"`
	// Selling plan policy which describes the delivery details.
	DeliveryPolicy *SellingPlanDeliveryPolicyInput `json:"deliveryPolicy,omitempty"`
	// Pricing policies which describe the pricing details. Each selling plan
	// can only contain a maximum of 2 pricing policies.
	PricingPolicies []*SellingPlanPricingPolicyInput `json:"pricingPolicies,omitempty"`
	// The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
	Options []null.String `json:"options,omitempty"`
	// Relative value for display purposes of this plan. A lower position will be displayed before a higher one.
	Position *int `json:"position,omitempty"`
}

// Specifies the input fields required to create or update a selling plan pricing policy.
type SellingPlanPricingPolicyInput struct {
	// Recurring pricing policy details.
	Recurring *SellingPlanRecurringPricingPolicyInput `json:"recurring,omitempty"`
	// Fixed pricing policy details.
	Fixed *SellingPlanFixedPricingPolicyInput `json:"fixed,omitempty"`
}

// Represents the percentage value of a selling plan pricing policy percentage type.
type SellingPlanPricingPolicyPercentageValue struct {
	// The percentage value.
	Percentage float64 `json:"percentage,omitempty"`
}

func (SellingPlanPricingPolicyPercentageValue) IsSellingPlanPricingPolicyAdjustmentValue() {}

// Specifies the input fields required to create or update a pricing policy adjustment value.
type SellingPlanPricingPolicyValueInput struct {
	// Defines percentage value.
	Percentage *float64 `json:"percentage,omitempty"`
	// Defines fixed value for an fixed amount off or a new policy price.
	FixedValue *null.String `json:"fixedValue,omitempty"`
}

// Represents a recurring selling plan billing policy.
type SellingPlanRecurringBillingPolicy struct {
	// Specific anchor dates upon which the billing interval calculations should be made.
	Anchors []*SellingPlanAnchor `json:"anchors,omitempty"`
	// The date and time when the selling plan billing policy was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The billing frequency, it can be either: day, week, month or year.
	Interval SellingPlanInterval `json:"interval,omitempty"`
	// The number of intervals between billings.
	IntervalCount int `json:"intervalCount,omitempty"`
	// Maximum number of billing iterations.
	MaxCycles *int `json:"maxCycles,omitempty"`
	// Minimum number of billing iterations.
	MinCycles *int `json:"minCycles,omitempty"`
}

func (SellingPlanRecurringBillingPolicy) IsSellingPlanBillingPolicy() {}

// Specifies the input fields required to create or update a recurring billing policy.
type SellingPlanRecurringBillingPolicyInput struct {
	// The billing frequency, it can be either: day, week, month or year.
	Interval *SellingPlanInterval `json:"interval,omitempty"`
	// The number of intervals between billings.
	IntervalCount *int `json:"intervalCount,omitempty"`
	// Specific anchor dates upon which the billing interval calculations should be made.
	Anchors []*SellingPlanAnchorInput `json:"anchors,omitempty"`
	// Minimum number of billing iterations.
	MinCycles *int `json:"minCycles,omitempty"`
	// Maximum number of billing iterations.
	MaxCycles *int `json:"maxCycles,omitempty"`
}

// Represents a recurring selling plan delivery policy.
type SellingPlanRecurringDeliveryPolicy struct {
	// Specific anchor dates upon which the delivery interval calculations should be made.
	Anchors []*SellingPlanAnchor `json:"anchors,omitempty"`
	// The date and time when the selling plan delivery policy was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// A buffer period for orders to be included in a cycle.
	Cutoff *int `json:"cutoff,omitempty"`
	// Specifies if the delivery policy is merchant or buyer-centric.
	// Buyer-centric delivery policies state the time when the buyer will receive the goods.
	// Merchant-centric delivery policies state the time when the fulfillment should be started.
	// Currently, only merchant-centric delivery policies are supported.
	Intent SellingPlanRecurringDeliveryPolicyIntent `json:"intent,omitempty"`
	// The delivery frequency, it can be either: day, week, month or year.
	Interval SellingPlanInterval `json:"interval,omitempty"`
	// The number of intervals between deliveries.
	IntervalCount int `json:"intervalCount,omitempty"`
	// Fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`.
	PreAnchorBehavior SellingPlanRecurringDeliveryPolicyPreAnchorBehavior `json:"preAnchorBehavior,omitempty"`
}

func (SellingPlanRecurringDeliveryPolicy) IsSellingPlanDeliveryPolicy() {}

// Specifies the input fields to create or update a recurring delivery policy.
type SellingPlanRecurringDeliveryPolicyInput struct {
	// The delivery frequency, it can be either: day, week, month or year.
	Interval *SellingPlanInterval `json:"interval,omitempty"`
	// The number of intervals between deliveries.
	IntervalCount *int `json:"intervalCount,omitempty"`
	// Specific anchor dates upon which the delivery interval calculations should be made.
	Anchors []*SellingPlanAnchorInput `json:"anchors,omitempty"`
	// A buffer period for orders to be included in a cycle.
	Cutoff *int `json:"cutoff,omitempty"`
	// Intention of this delivery policy, it can be either: delivery or fulfillment.
	Intent *SellingPlanRecurringDeliveryPolicyIntent `json:"intent,omitempty"`
	// The pre anchor behavior. It can be either: asap or next.
	PreAnchorBehavior *SellingPlanRecurringDeliveryPolicyPreAnchorBehavior `json:"preAnchorBehavior,omitempty"`
}

// Represents a recurring selling plan pricing policy.
type SellingPlanRecurringPricingPolicy struct {
	// The price adjustment type.
	AdjustmentType SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType,omitempty"`
	// The price adjustment value.
	AdjustmentValue SellingPlanPricingPolicyAdjustmentValue `json:"adjustmentValue,omitempty"`
	// Cycle after which this pricing policy applies.
	AfterCycle *int `json:"afterCycle,omitempty"`
	// The date and time when the recurring selling plan pricing policy was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
}

func (SellingPlanRecurringPricingPolicy) IsSellingPlanPricingPolicy()     {}
func (SellingPlanRecurringPricingPolicy) IsSellingPlanPricingPolicyBase() {}

// Specifies the input fields required to create or update a recurring selling plan pricing policy.
type SellingPlanRecurringPricingPolicyInput struct {
	// ID of the pricing policy.
	ID *null.String `json:"id,omitempty"`
	// Price adjustment type defined by the policy.
	AdjustmentType *SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType,omitempty"`
	// Price adjustment value defined by the policy.
	AdjustmentValue *SellingPlanPricingPolicyValueInput `json:"adjustmentValue,omitempty"`
	// Cycle after which the pricing policy applies. If not provided the policy will be applicable from the first cycle.
	AfterCycle int `json:"afterCycle,omitempty"`
}

// Represents the shipping details that the customer chose for their order.
type ShippingLine struct {
	// A reference to the carrier service that provided the rate.
	// Present when the rate was computed by a third-party carrier service.
	CarrierIdentifier *null.String `json:"carrierIdentifier,omitempty"`
	// A reference to the shipping method.
	Code *null.String `json:"code,omitempty"`
	// Whether the shipping line is custom or not.
	Custom bool `json:"custom,omitempty"`
	// The general classification of the delivery method.
	DeliveryCategory *null.String `json:"deliveryCategory,omitempty"`
	// The discounts that have been allocated to the shipping line.
	DiscountAllocations []*DiscountAllocation `json:"discountAllocations,omitempty"`
	// The pre-tax shipping price with discounts applied.
	DiscountedPrice *MoneyV2 `json:"discountedPrice,omitempty"`
	// The pre-tax shipping price with discounts applied.
	DiscountedPriceSet *MoneyBag `json:"discountedPriceSet,omitempty"`
	// Globally unique identifier.
	ID *null.String `json:"id,omitempty"`
	// The pre-tax shipping price without any discounts applied.
	OriginalPrice *MoneyV2 `json:"originalPrice,omitempty"`
	// The pre-tax shipping price without any discounts applied.
	OriginalPriceSet *MoneyBag `json:"originalPriceSet,omitempty"`
	// The phone number at the shipping address.
	Phone *null.String `json:"phone,omitempty"`
	// Returns the price of the shipping line.
	Price null.String `json:"price,omitempty"`
	// The fulfillment service requested for the shipping method.
	// Present if the shipping method requires processing by a third party fulfillment service.
	RequestedFulfillmentService *FulfillmentService `json:"requestedFulfillmentService,omitempty"`
	// A unique identifier for the shipping rate. The format can change without notice and is not meant to be shown to users.
	ShippingRateHandle *null.String `json:"shippingRateHandle,omitempty"`
	// Returns the rate source for the shipping line.
	Source *null.String `json:"source,omitempty"`
	// The TaxLine objects connected to this shipping line.
	TaxLines []*TaxLine `json:"taxLines,omitempty"`
	// Returns the title of the shipping line.
	Title null.String `json:"title,omitempty"`
}

// An auto-generated type for paginating through multiple ShippingLines.
type ShippingLineConnection struct {
	// A list of edges.
	Edges []*ShippingLineEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ShippingLine and a cursor during pagination.
type ShippingLineEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of ShippingLineEdge.
	Node *ShippingLine `json:"node,omitempty"`
}

// Specifies the shipping details for the order.
type ShippingLineInput struct {
	// Price of the shipping rate.
	Price *null.String `json:"price,omitempty"`
	// A unique identifier for the shipping rate.
	ShippingRateHandle *null.String `json:"shippingRateHandle,omitempty"`
	// Title of the shipping rate.
	Title *null.String `json:"title,omitempty"`
}

// The shipping method for the delivery.
type ShippingMethod struct {
	// A unique code associated with the rate. For example: `expedited_mail`
	Code null.String `json:"code,omitempty"`
	// A description of the rate, which customers will see at checkout.
	// For example: `Includes tracking and insurance`.
	Label null.String `json:"label,omitempty"`
}

// Return type for `shippingPackageDelete` mutation.
type ShippingPackageDeletePayload struct {
	// The ID of the deleted shipping package.
	DeletedID *null.String `json:"deletedId,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `shippingPackageMakeDefault` mutation.
type ShippingPackageMakeDefaultPayload struct {
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `shippingPackageUpdate` mutation.
type ShippingPackageUpdatePayload struct {
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// A shipping rate to be applied to an order.
type ShippingRate struct {
	// Human-readable unique identifier for this shipping rate.
	Handle null.String `json:"handle,omitempty"`
	// Price of this shipping rate.
	Price *MoneyV2 `json:"price,omitempty"`
	// Title of this shipping rate.
	Title null.String `json:"title,omitempty"`
}

// Represents the shipping costs refunded on the Refund.
type ShippingRefund struct {
	// The monetary value of the shipping fees to be returned.
	Amount null.String `json:"amount,omitempty"`
	// The monetary value of the shipping fees to be returned in shop and presentment currencies.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// The maximum amount of shipping fees currently refundable.
	MaximumRefundable null.String `json:"maximumRefundable,omitempty"`
	// The maximum amount of shipping fees currently refundable in shop and presentment currencies.
	MaximumRefundableSet *MoneyBag `json:"maximumRefundableSet,omitempty"`
	// The monetary value of the tax allocated to shipping fees to be returned.
	Tax null.String `json:"tax,omitempty"`
	// The monetary value of the tax allocated to shipping fees to be returned in shop and presentment currencies.
	TaxSet *MoneyBag `json:"taxSet,omitempty"`
}

// Specifies the fields required to return shipping costs on a Refund.
type ShippingRefundInput struct {
	// The monetary value of the shipping fees to be returned.
	Amount *null.String `json:"amount,omitempty"`
	// Whether a full refund is provided.
	FullRefund *bool `json:"fullRefund,omitempty"`
}

// Represents the shop object.
type Shop struct {
	// Alert message that appears in the Shopify admin.
	Alerts []*ShopAlert `json:"alerts,omitempty"`
	// The token required to query the shop's reports or dashboards.
	AnalyticsToken null.String `json:"analyticsToken,omitempty"`
	// Paginated list of fulfillment orders assigned to fulfillment services.
	AssignedFulfillmentOrders *FulfillmentOrderConnection `json:"assignedFulfillmentOrders,omitempty"`
	// List of sales channels not currently installed on the shop.
	AvailableChannelApps *AppConnection `json:"availableChannelApps,omitempty"`
	// The shop's billing address information.
	BillingAddress *MailingAddress `json:"billingAddress,omitempty"`
	// Exposes the number of channels.
	ChannelCount int `json:"channelCount,omitempty"`
	// List of the shop's active sales channels.
	Channels *ChannelConnection `json:"channels,omitempty"`
	// Specifies whether the shop supports checkouts via Checkout API.
	CheckoutAPISupported bool `json:"checkoutApiSupported,omitempty"`
	// Return a collection by its handle.
	CollectionByHandle *Collection `json:"collectionByHandle,omitempty"`
	// List of the shop's collection saved searches.
	CollectionSavedSearches *SavedSearchConnection `json:"collectionSavedSearches,omitempty"`
	// List of the shop's collections.
	Collections *CollectionConnection `json:"collections,omitempty"`
	// The public-facing contact email address for the shop.
	// Customers will use this email to communicate with the shop owner.
	ContactEmail null.String `json:"contactEmail,omitempty"`
	// Countries that have been defined in shipping zones for the shop.
	CountriesInShippingZones *CountriesInShippingZones `json:"countriesInShippingZones,omitempty"`
	// The three letter code for the shop's currency.
	CurrencyCode CurrencyCode `json:"currencyCode,omitempty"`
	// How currencies are displayed on your store.
	CurrencyFormats *CurrencyFormats `json:"currencyFormats,omitempty"`
	// The currency settings for the shop.
	CurrencySettings *CurrencySettingConnection `json:"currencySettings,omitempty"`
	// The shop's customer account requirement preference.
	CustomerAccounts ShopCustomerAccountsSetting `json:"customerAccounts,omitempty"`
	// List of the shop's customer saved searches.
	CustomerSavedSearches *SavedSearchConnection `json:"customerSavedSearches,omitempty"`
	// A list of tags that have been added to customer accounts.
	CustomerTags *StringConnection `json:"customerTags,omitempty"`
	// Customer accounts associated to the shop.
	Customers *CustomerConnection `json:"customers,omitempty"`
	// The shop's meta description used in search engine results.
	Description *null.String `json:"description,omitempty"`
	// The domains configured for the shop.
	Domains []*Domain `json:"domains,omitempty"`
	// List of the shop's draft order saved searches.
	DraftOrderSavedSearches *SavedSearchConnection `json:"draftOrderSavedSearches,omitempty"`
	// A list of tags that have been added to draft orders.
	DraftOrderTags *StringConnection `json:"draftOrderTags,omitempty"`
	// List of saved draft orders on the shop.
	DraftOrders *DraftOrderConnection `json:"draftOrders,omitempty"`
	// The shop owner's email address.
	// Shopify will use this email address to communicate with the shop owner.
	Email null.String `json:"email,omitempty"`
	// The presentment currencies enabled for the shop.
	EnabledPresentmentCurrencies []CurrencyCode `json:"enabledPresentmentCurrencies,omitempty"`
	// The shop's features.
	Features *ShopFeatures `json:"features,omitempty"`
	// Paginated list of merchant-managed and third-party fulfillment orders.
	FulfillmentOrders *FulfillmentOrderConnection `json:"fulfillmentOrders,omitempty"`
	// List of the shop's installed fulfillment services.
	FulfillmentServices []*FulfillmentService `json:"fulfillmentServices,omitempty"`
	// The shop's time zone as defined by the IANA.
	IanaTimezone null.String `json:"ianaTimezone,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// List of the shop's inventory items.
	InventoryItems *InventoryItemConnection `json:"inventoryItems,omitempty"`
	// The number of pendings orders on the shop.
	// Limited to a maximum of 10000.
	LimitedPendingOrderCount *LimitedPendingOrderCount `json:"limitedPendingOrderCount,omitempty"`
	// List of active locations of the shop.
	Locations *LocationConnection `json:"locations,omitempty"`
	// List of a shop's marketing events.
	MarketingEvents *MarketingEventConnection `json:"marketingEvents,omitempty"`
	// The metafield associated with the resource.
	Metafield *Metafield `json:"metafield,omitempty"`
	// A paginated list of metafields associated with the resource.
	Metafields *MetafieldConnection `json:"metafields,omitempty"`
	// The shop's .myshopify.com domain name.
	MyshopifyDomain null.String `json:"myshopifyDomain,omitempty"`
	// The shop's name.
	Name null.String `json:"name,omitempty"`
	// The navigation settings of the shop.
	NavigationSettings []*NavigationItem `json:"navigationSettings,omitempty"`
	// The prefix that appears before order numbers.
	OrderNumberFormatPrefix null.String `json:"orderNumberFormatPrefix,omitempty"`
	// The suffix that appears after order numbers.
	OrderNumberFormatSuffix null.String `json:"orderNumberFormatSuffix,omitempty"`
	// List of the shop's order saved searches.
	OrderSavedSearches *SavedSearchConnection `json:"orderSavedSearches,omitempty"`
	// A list of tags that have been added to orders.
	OrderTags *StringConnection `json:"orderTags,omitempty"`
	// List of orders placed on the shop.
	Orders *OrderConnection `json:"orders,omitempty"`
	// Settings related to payments.
	PaymentSettings *PaymentSettings `json:"paymentSettings,omitempty"`
	// Number of pending orders on the shop.
	PendingOrderCount int `json:"pendingOrderCount,omitempty"`
	// The shop's plan.
	Plan *ShopPlan `json:"plan,omitempty"`
	// List of the shop's price rule saved searches.
	PriceRuleSavedSearches *SavedSearchConnection `json:"priceRuleSavedSearches,omitempty"`
	// List of the shop’s price rules.
	PriceRules *PriceRuleConnection `json:"priceRules,omitempty"`
	// The shop's primary domain name.
	PrimaryDomain *Domain `json:"primaryDomain,omitempty"`
	// Returns a private metafield found by namespace and key.
	PrivateMetafield *PrivateMetafield `json:"privateMetafield,omitempty"`
	// List of private metafields.
	PrivateMetafields *PrivateMetafieldConnection `json:"privateMetafields,omitempty"`
	// Return a product by its handle.
	ProductByHandle *Product `json:"productByHandle,omitempty"`
	// All images of all products of the shop.
	ProductImages *ImageConnection `json:"productImages,omitempty"`
	// List of the shop's product saved searches.
	ProductSavedSearches *SavedSearchConnection `json:"productSavedSearches,omitempty"`
	// A list of tags that have been added to products.
	ProductTags *StringConnection `json:"productTags,omitempty"`
	// Types added to products.
	ProductTypes *StringConnection `json:"productTypes,omitempty"`
	// List of the shop's product variants.
	ProductVariants *ProductVariantConnection `json:"productVariants,omitempty"`
	// Vendors added to products.
	ProductVendors *StringConnection `json:"productVendors,omitempty"`
	// List of the shop's products.
	Products *ProductConnection `json:"products,omitempty"`
	// Exposes the number of publications.
	PublicationCount int `json:"publicationCount,omitempty"`
	// Resource limits of a shop.
	ResourceLimits *ShopResourceLimits `json:"resourceLimits,omitempty"`
	// The URL of the rich text editor.
	RichTextEditorURL null.String `json:"richTextEditorUrl,omitempty"`
	// Return admin search results.
	Search *SearchResultConnection `json:"search,omitempty"`
	// List of search filter options.
	SearchFilters *SearchFilterOptions `json:"searchFilters,omitempty"`
	// Whether the shop has outstanding setup steps.
	SetupRequired bool `json:"setupRequired,omitempty"`
	// Countries that the shop ships to.
	ShipsToCountries []CountryCode `json:"shipsToCountries,omitempty"`
	// A list of all policies associated with a shop.
	ShopPolicies []*ShopPolicy `json:"shopPolicies,omitempty"`
	// Shopify Payments account information, including balances and payouts.
	ShopifyPaymentsAccount *ShopifyPaymentsAccount `json:"shopifyPaymentsAccount,omitempty"`
	// Storefront access token of a private application. Scoped per-application.
	StorefrontAccessTokens *StorefrontAccessTokenConnection `json:"storefrontAccessTokens,omitempty"`
	// The URL of the shop's storefront.
	StorefrontURL null.String `json:"storefrontUrl,omitempty"`
	// Specifies whether or not taxes are charged for shipping.
	TaxShipping bool `json:"taxShipping,omitempty"`
	// The setting for whether applicable taxes are included in product prices.
	TaxesIncluded bool `json:"taxesIncluded,omitempty"`
	// The shop's time zone abbreviation.
	TimezoneAbbreviation null.String `json:"timezoneAbbreviation,omitempty"`
	// The shop's time zone offset.
	TimezoneOffset null.String `json:"timezoneOffset,omitempty"`
	// The shop's time zone offset expressed in number of minutes.
	TimezoneOffsetMinutes int `json:"timezoneOffsetMinutes,omitempty"`
	// The translations associated with the resource.
	Translations []*PublishedTranslation `json:"translations,omitempty"`
	// The shop's unit system.
	UnitSystem UnitSystem `json:"unitSystem,omitempty"`
	// All images uploaded to the shop.
	UploadedImages *ImageConnection `json:"uploadedImages,omitempty"`
	// Fetch list of images uploaded to shop by ids.
	UploadedImagesByIds []*Image `json:"uploadedImagesByIds,omitempty"`
	// The URL of the shop's storefront.
	URL null.String `json:"url,omitempty"`
	// The shop's primary unit of weight for products and shipping.
	WeightUnit WeightUnit `json:"weightUnit,omitempty"`
}

func (Shop) IsNode()                     {}
func (Shop) IsHasPublishedTranslations() {}
func (Shop) IsHasMetafields()            {}

// Alert message that appears in the Shopify admin.
type ShopAlert struct {
	// Button in the alert that links to related information.
	Action *ShopAlertAction `json:"action,omitempty"`
	// Description of the alert.
	Description null.String `json:"description,omitempty"`
}

// An action associated to a shop alert.
type ShopAlertAction struct {
	// Action title.
	Title null.String `json:"title,omitempty"`
	// Action target URL.
	URL null.String `json:"url,omitempty"`
}

// Represents the feature set available to the shop.
type ShopFeatures struct {
	// Whether a shop has access to avalara avatax.
	AvalaraAvatax bool `json:"avalaraAvatax,omitempty"`
	// Branding of the shop.
	Branding ShopBranding `json:"branding,omitempty"`
	// Whether a shop's storefront can have CAPTCHA protection.
	Captcha bool `json:"captcha,omitempty"`
	// Whether a shop's storefront can have CAPTCHA protection for domains not managed by Shopify.
	CaptchaExternalDomains bool `json:"captchaExternalDomains,omitempty"`
	// Whether the delivery profiles functionality is enabled for this shop.
	DeliveryProfiles bool `json:"deliveryProfiles,omitempty"`
	// Whether a shop has access to the dynamic remarketing feature.
	DynamicRemarketing bool `json:"dynamicRemarketing,omitempty"`
	// Whether a shop can be migrated to use Shopify subscriptions.
	EligibleForSubscriptionMigration bool `json:"eligibleForSubscriptionMigration,omitempty"`
	// Whether a shop is configured properly to sell subscriptions.
	EligibleForSubscriptions bool `json:"eligibleForSubscriptions,omitempty"`
	// Whether a shop can create gift cards.
	GiftCards bool `json:"giftCards,omitempty"`
	// Display Harmonized System codes on products.  Used for customs when shipping cross-border.
	HarmonizedSystemCode bool `json:"harmonizedSystemCode,omitempty"`
	// Whether a shop can enable international domains.
	InternationalDomains bool `json:"internationalDomains,omitempty"`
	// Whether a shop can enable international price overrides.
	InternationalPriceOverrides bool `json:"internationalPriceOverrides,omitempty"`
	// Whether a shop can enable international price rules.
	InternationalPriceRules bool `json:"internationalPriceRules,omitempty"`
	// Whether a shop has enabled a legacy subscription gateway to handle older subscriptions.
	LegacySubscriptionGatewayEnabled bool `json:"legacySubscriptionGatewayEnabled,omitempty"`
	// Whether to show the live view. Live view is hidden from merchants that are on a trial or don't have a storefront.
	LiveView bool `json:"liveView,omitempty"`
	// Whether the multi-location functionality is enabled for this shop.
	MultiLocation bool `json:"multiLocation,omitempty"`
	// Whether a shop has access to the onboarding visual.
	OnboardingVisual bool `json:"onboardingVisual,omitempty"`
	// Whether a shop has access to all reporting features.
	Reports bool `json:"reports,omitempty"`
	// Whether the shop has ever had subscription products.
	SellsSubscriptions bool `json:"sellsSubscriptions,omitempty"`
	// Whether the shop has a Shopify Plus subscription.
	ShopifyPlus bool `json:"shopifyPlus,omitempty"`
	// Whether to show metrics. Metrics are hidden for new merchants until they become meaningful.
	ShowMetrics bool `json:"showMetrics,omitempty"`
	// Whether the shop has an online storefront.
	Storefront bool `json:"storefront,omitempty"`
}

// Available locale for a shop.
type ShopLocale struct {
	// Locale identifier.
	Locale null.String `json:"locale,omitempty"`
	// Locale name.
	Name null.String `json:"name,omitempty"`
	// Whether or not this is the default locale for the shop.
	Primary bool `json:"primary,omitempty"`
	// Whether or not the locale is published.
	Published bool `json:"published,omitempty"`
}

// Return type for `shopLocaleDisable` mutation.
type ShopLocaleDisablePayload struct {
	// The locale identifier that was disabled.
	Locale *null.String `json:"locale,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `shopLocaleEnable` mutation.
type ShopLocaleEnablePayload struct {
	// The locale that was enabled.
	ShopLocale *ShopLocale `json:"shopLocale,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Specifies the input fields for a shop locale.
type ShopLocaleInput struct {
	// Specifies the publication state of the locale.
	Published *bool `json:"published,omitempty"`
}

// Return type for `shopLocaleUpdate` mutation.
type ShopLocaleUpdatePayload struct {
	// The locale that was updated.
	ShopLocale *ShopLocale `json:"shopLocale,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Represents the billing plan of the shop.
type ShopPlan struct {
	// The name of the shop's billing plan.
	DisplayName null.String `json:"displayName,omitempty"`
	// Whether the shop is a partner development shop for testing purposes.
	PartnerDevelopment bool `json:"partnerDevelopment,omitempty"`
	// Whether the shop has a Shopify Plus subscription.
	ShopifyPlus bool `json:"shopifyPlus,omitempty"`
}

// Policy that a merchant has configured for their store, such as their refund or privacy policy.
type ShopPolicy struct {
	// The text of the policy. The maximum size is 512kb.
	Body null.String `json:"body,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The translations associated with the resource.
	Translations []*PublishedTranslation `json:"translations,omitempty"`
	// The shop policy type.
	Type ShopPolicyType `json:"type,omitempty"`
	// The public URL of the policy.
	URL null.String `json:"url,omitempty"`
}

func (ShopPolicy) IsNode()                     {}
func (ShopPolicy) IsHasPublishedTranslations() {}

// Specifies the input fields required to update a policy.
type ShopPolicyInput struct {
	// The shop policy type.
	Type ShopPolicyType `json:"type,omitempty"`
	// Policy text, maximum size of 512kb.
	Body null.String `json:"body,omitempty"`
}

// Return type for `shopPolicyUpdate` mutation.
type ShopPolicyUpdatePayload struct {
	// The shop policy that has been updated.
	ShopPolicy *ShopPolicy `json:"shopPolicy,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*ShopPolicyUserError `json:"userErrors,omitempty"`
}

// An error that occurs during the execution of a shop policy mutation.
type ShopPolicyUserError struct {
	// Error code to uniquely identify the error.
	Code *ShopPolicyErrorCode `json:"code,omitempty"`
	// Path to the input field which caused the error.
	Field []null.String `json:"field,omitempty"`
	// The error message.
	Message null.String `json:"message,omitempty"`
}

func (ShopPolicyUserError) IsDisplayableError() {}

// Resource limits of a shop.
type ShopResourceLimits struct {
	// Maximum number of locations allowed.
	LocationLimit int `json:"locationLimit,omitempty"`
	// Maximum number of product options allowed.
	MaxProductOptions int `json:"maxProductOptions,omitempty"`
	// The maximum number of variants allowed per product.
	MaxProductVariants int `json:"maxProductVariants,omitempty"`
	// Whether the shop has reached the limit of the number of URL redirects it can make for resources.
	RedirectLimitReached bool `json:"redirectLimitReached,omitempty"`
	// The maximum number of variants allowed per shop. If the shop has unlimited SKUs, then the quantity used cannot be retrieved.
	SkuResourceLimits *ResourceLimit `json:"skuResourceLimits,omitempty"`
}

// Balance and payout information for a
// [Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
// account. Balance includes all balances for the currencies supported by the shop.
// You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
type ShopifyPaymentsAccount struct {
	// Whether the Shopify Payments setup is completed.
	Activated bool `json:"activated,omitempty"`
	// Current balances in all currencies for the account.
	Balance []*MoneyV2 `json:"balance,omitempty"`
	// All bank accounts configured for the Shopify Payments account.
	BankAccounts *ShopifyPaymentsBankAccountConnection `json:"bankAccounts,omitempty"`
	// Statement descriptor used for charges.
	//
	// This is what buyers will see on their credit card or bank statements when making a purchase.
	ChargeStatementDescriptor *null.String `json:"chargeStatementDescriptor,omitempty"`
	// Statement descriptors used for charges.
	//
	// This is what buyers will see on their credit card or bank statements when making a purchase.
	ChargeStatementDescriptors ShopifyPaymentsChargeStatementDescriptor `json:"chargeStatementDescriptors,omitempty"`
	// The Shopify Payments account country.
	Country null.String `json:"country,omitempty"`
	// The default payout currency for the Shopify Payments account.
	DefaultCurrency CurrencyCode `json:"defaultCurrency,omitempty"`
	// All disputes related to the Shopify Payments account.
	Disputes *ShopifyPaymentsDisputeConnection `json:"disputes,omitempty"`
	// The fraud settings of the Shopify Payments account.
	FraudSettings *ShopifyPaymentsFraudSettings `json:"fraudSettings,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The notifications settings for the account.
	NotificationSettings *ShopifyPaymentsNotificationSettings `json:"notificationSettings,omitempty"`
	// Whether the Shopify Payments account can be onboarded.
	Onboardable bool `json:"onboardable,omitempty"`
	// Payout schedule for the account.
	PayoutSchedule *ShopifyPaymentsPayoutSchedule `json:"payoutSchedule,omitempty"`
	// Descriptor used for payouts.
	//
	// This is what merchants will see on their bank statement when receiving a payout.
	PayoutStatementDescriptor *null.String `json:"payoutStatementDescriptor,omitempty"`
	// All current and previous payouts made between the account and the bank account.
	Payouts *ShopifyPaymentsPayoutConnection `json:"payouts,omitempty"`
	// The permitted documents for identity verification.
	PermittedVerificationDocuments []*ShopifyPaymentsVerificationDocument `json:"permittedVerificationDocuments,omitempty"`
	// The verifications necessary for this account.
	Verifications []*ShopifyPaymentsVerification `json:"verifications,omitempty"`
}

func (ShopifyPaymentsAccount) IsNode() {}

// A bank account that can receive payouts.
type ShopifyPaymentsBankAccount struct {
	// The account number of the bank account.
	AccountNumber null.String `json:"accountNumber,omitempty"`
	// The last digits of the account number (the rest is redacted).
	AccountNumberLastDigits null.String `json:"accountNumberLastDigits,omitempty"`
	// The name of the bank.
	BankName *null.String `json:"bankName,omitempty"`
	// The country of the bank.
	Country CountryCode `json:"country,omitempty"`
	// The date that the bank account was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The currency of the bank account.
	Currency CurrencyCode `json:"currency,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// All current and previous payouts made between the account and the bank account.
	Payouts *ShopifyPaymentsPayoutConnection `json:"payouts,omitempty"`
	// The routing number of the bank account.
	RoutingNumber null.String `json:"routingNumber,omitempty"`
	// The status of the bank account.
	Status ShopifyPaymentsBankAccountStatus `json:"status,omitempty"`
}

func (ShopifyPaymentsBankAccount) IsNode() {}

// An auto-generated type for paginating through multiple ShopifyPaymentsBankAccounts.
type ShopifyPaymentsBankAccountConnection struct {
	// A list of edges.
	Edges []*ShopifyPaymentsBankAccountEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ShopifyPaymentsBankAccount and a cursor during pagination.
type ShopifyPaymentsBankAccountEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of ShopifyPaymentsBankAccountEdge.
	Node *ShopifyPaymentsBankAccount `json:"node,omitempty"`
}

// The charge descriptors for a payments account.
type ShopifyPaymentsDefaultChargeStatementDescriptor struct {
	// The default charge statement descriptor.
	Default *null.String `json:"default,omitempty"`
	// The prefix of the statement descriptor.
	Prefix null.String `json:"prefix,omitempty"`
}

func (ShopifyPaymentsDefaultChargeStatementDescriptor) IsShopifyPaymentsChargeStatementDescriptor() {}

// A dispute occurs when a buyer questions the legitimacy of a charge with their financial institution.
type ShopifyPaymentsDispute struct {
	// The total amount disputed by the cardholder.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// The deadline for evidence submission.
	EvidenceDueBy *null.String `json:"evidenceDueBy,omitempty"`
	// The date when evidence was sent. Returns null if evidence has not yet been sent.
	EvidenceSentOn *null.String `json:"evidenceSentOn,omitempty"`
	// The date when this dispute was resolved. Returns null if the dispute is not yet resolved.
	FinalizedOn *null.String `json:"finalizedOn,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The date when this dispute was initiated.
	InitiatedAt null.String `json:"initiatedAt,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// The order that contains the charge that is under dispute.
	Order *Order `json:"order,omitempty"`
	// The reason of the dispute.
	ReasonDetails *ShopifyPaymentsDisputeReasonDetails `json:"reasonDetails,omitempty"`
	// The current state of the dispute.
	Status DisputeStatus `json:"status,omitempty"`
	// Indicates if this dispute is still in the inquiry phase or has turned into a chargeback.
	Type DisputeType `json:"type,omitempty"`
}

func (ShopifyPaymentsDispute) IsLegacyInteroperability() {}
func (ShopifyPaymentsDispute) IsNode()                   {}

// An auto-generated type for paginating through multiple ShopifyPaymentsDisputes.
type ShopifyPaymentsDisputeConnection struct {
	// A list of edges.
	Edges []*ShopifyPaymentsDisputeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ShopifyPaymentsDispute and a cursor during pagination.
type ShopifyPaymentsDisputeEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of ShopifyPaymentsDisputeEdge.
	Node *ShopifyPaymentsDispute `json:"node,omitempty"`
}

// Details regarding a dispute reason.
type ShopifyPaymentsDisputeReasonDetails struct {
	// The raw code provided by the payment network.
	NetworkReasonCode *null.String `json:"networkReasonCode,omitempty"`
	// The reason for the dispute provided by the cardholder's banks.
	Reason ShopifyPaymentsDisputeReason `json:"reason,omitempty"`
}

// Presents all Shopify Payments information related to an extended authorization.
type ShopifyPaymentsExtendedAuthorization struct {
	// The time after which the extended authorization expires. After the expiry, the merchant is unable to capture the payment.
	ExtendedAuthorizationExpiresAt null.String `json:"extendedAuthorizationExpiresAt,omitempty"`
	// The time after which capture will incur an additional fee.
	StandardAuthorizationExpiresAt null.String `json:"standardAuthorizationExpiresAt,omitempty"`
}

// The fraud settings of a payments account.
type ShopifyPaymentsFraudSettings struct {
	// Decline a charge if there is an AVS failure.
	DeclineChargeOnAvsFailure bool `json:"declineChargeOnAvsFailure,omitempty"`
	// Decline a charge if there is an CVC failure.
	DeclineChargeOnCvcFailure bool `json:"declineChargeOnCvcFailure,omitempty"`
}

// The charge descriptors for a Japanese payments account.
type ShopifyPaymentsJpChargeStatementDescriptor struct {
	// The default charge statement descriptor.
	Default *null.String `json:"default,omitempty"`
	// The charge statement descriptor in kana.
	Kana *null.String `json:"kana,omitempty"`
	// The charge statement descriptor in kanji.
	Kanji *null.String `json:"kanji,omitempty"`
	// The prefix of the statement descriptor.
	Prefix null.String `json:"prefix,omitempty"`
}

func (ShopifyPaymentsJpChargeStatementDescriptor) IsShopifyPaymentsChargeStatementDescriptor() {}

// The notification settings for the account.
type ShopifyPaymentsNotificationSettings struct {
	// Receive email notifications when new payouts are sent or payouts fail.
	Payouts bool `json:"payouts,omitempty"`
}

// Payouts represent the movement of money between a merchant's Shopify
// Payments balance and their bank account.
type ShopifyPaymentsPayout struct {
	// The bank account for the payout.
	BankAccount *ShopifyPaymentsBankAccount `json:"bankAccount,omitempty"`
	// The total amount and currency of the payout.
	Gross *MoneyV2 `json:"gross,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The exact time when the payout was issued. The payout only contains
	// balance transactions that were available at this time.
	IssuedAt null.String `json:"issuedAt,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// The total amount and currency of the payout.
	Net *MoneyV2 `json:"net,omitempty"`
	// The transfer status of the payout.
	Status ShopifyPaymentsPayoutStatus `json:"status,omitempty"`
	// The summary of the payout.
	Summary *ShopifyPaymentsPayoutSummary `json:"summary,omitempty"`
	// The direction of the payout.
	TransactionType ShopifyPaymentsPayoutTransactionType `json:"transactionType,omitempty"`
}

func (ShopifyPaymentsPayout) IsLegacyInteroperability() {}
func (ShopifyPaymentsPayout) IsNode()                   {}

// An auto-generated type for paginating through multiple ShopifyPaymentsPayouts.
type ShopifyPaymentsPayoutConnection struct {
	// A list of edges.
	Edges []*ShopifyPaymentsPayoutEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one ShopifyPaymentsPayout and a cursor during pagination.
type ShopifyPaymentsPayoutEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of ShopifyPaymentsPayoutEdge.
	Node *ShopifyPaymentsPayout `json:"node,omitempty"`
}

// The payment schedule for a payments account.
type ShopifyPaymentsPayoutSchedule struct {
	// The interval at which payouts are sent to the connected bank account.
	Interval ShopifyPaymentsPayoutInterval `json:"interval,omitempty"`
	// The day of the month funds will be paid out.
	//
	// The value can be any day of the month from the 1st to the 31st.
	// If the payment interval is set to monthly, this value will be used.
	// Payouts scheduled between 29-31st of the month are sent on the last day of shorter months.
	MonthlyAnchor *int `json:"monthlyAnchor,omitempty"`
	// The day of the week funds will be paid out.
	//
	// The value can be any weekday from Monday to Friday.
	// If the payment interval is set to weekly, this value will be used.
	WeeklyAnchor *DayOfTheWeek `json:"weeklyAnchor,omitempty"`
}

// Breakdown of the total fees and gross of each of the different types of transactions associated
// with the payout.
type ShopifyPaymentsPayoutSummary struct {
	// Total fees for all adjustments including disputes.
	AdjustmentsFee *MoneyV2 `json:"adjustmentsFee,omitempty"`
	// Total gross amount for all adjustments including disputes.
	AdjustmentsGross *MoneyV2 `json:"adjustmentsGross,omitempty"`
	// Total fees for all charges.
	ChargesFee *MoneyV2 `json:"chargesFee,omitempty"`
	// Total gross amount for all charges.
	ChargesGross *MoneyV2 `json:"chargesGross,omitempty"`
	// Total fees for all refunds.
	RefundsFee *MoneyV2 `json:"refundsFee,omitempty"`
	// Total gross amount for all refunds.
	RefundsFeeGross *MoneyV2 `json:"refundsFeeGross,omitempty"`
	// Total fees for all reserved funds.
	ReservedFundsFee *MoneyV2 `json:"reservedFundsFee,omitempty"`
	// Total gross amount for all reserved funds.
	ReservedFundsGross *MoneyV2 `json:"reservedFundsGross,omitempty"`
	// Total fees for all retried payouts.
	RetriedPayoutsFee *MoneyV2 `json:"retriedPayoutsFee,omitempty"`
	// Total gross amount for all retried payouts.
	RetriedPayoutsGross *MoneyV2 `json:"retriedPayoutsGross,omitempty"`
}

// Presents all Shopify Payments specific information related to an order transaction.
type ShopifyPaymentsTransactionSet struct {
	// Contains all fields related to an extended authorization.
	ExtendedAuthorizationSet *ShopifyPaymentsExtendedAuthorization `json:"extendedAuthorizationSet,omitempty"`
}

// Each subject (individual) of an account has a verification object giving
//  information about the verification state.
type ShopifyPaymentsVerification struct {
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The status of the verification.
	Status ShopifyPaymentsVerificationStatus `json:"status,omitempty"`
	// The subject/individual who has to be verified.
	Subject *ShopifyPaymentsVerificationSubject `json:"subject,omitempty"`
}

func (ShopifyPaymentsVerification) IsNode() {}

// A document which can be used to verify an individual.
type ShopifyPaymentsVerificationDocument struct {
	// True if the back side of the document is required.
	BackRequired bool `json:"backRequired,omitempty"`
	// True if the front side of the document is required.
	FrontRequired bool `json:"frontRequired,omitempty"`
	// The type of the document which can be used for verification.
	Type ShopifyPaymentsVerificationDocumentType `json:"type,omitempty"`
}

// The verification subject represents an individual that has to be verified.
type ShopifyPaymentsVerificationSubject struct {
	// The family name of the individual to verify.
	FamilyName null.String `json:"familyName,omitempty"`
	// The given name of the individual to verify.
	GivenName null.String `json:"givenName,omitempty"`
}

// Image to be uploaded.
type StageImageInput struct {
	// Image resource.
	Resource StagedUploadTargetGenerateUploadResource `json:"resource,omitempty"`
	// Image filename.
	Filename null.String `json:"filename,omitempty"`
	// Image MIME type.
	MimeType null.String `json:"mimeType,omitempty"`
	// HTTP method to be used by the Staged Upload.
	HTTPMethod *StagedUploadHTTPMethodType `json:"httpMethod,omitempty"`
}

// Staged media target information.
type StagedMediaUploadTarget struct {
	// Parameters of the media to be uploaded.
	Parameters []*StagedUploadParameter `json:"parameters,omitempty"`
	// The url to be passed as the original_source for the product create media mutation input.
	ResourceURL *null.String `json:"resourceUrl,omitempty"`
	// Media URL.
	URL *null.String `json:"url,omitempty"`
}

// Media to be uploaded.
type StagedUploadInput struct {
	// Media resource.
	Resource StagedUploadTargetGenerateUploadResource `json:"resource,omitempty"`
	// Media filename.
	Filename null.String `json:"filename,omitempty"`
	// Media MIME type.
	MimeType null.String `json:"mimeType,omitempty"`
	// HTTP method to be used by the Staged Upload.
	HTTPMethod *StagedUploadHTTPMethodType `json:"httpMethod,omitempty"`
	// Size of the file to upload, in bytes. This is required for VIDEO and MODEL_3D resources.
	FileSize *null.String `json:"fileSize,omitempty"`
}

// Upload parameter of a Media.
type StagedUploadParameter struct {
	// Parameter name.
	Name null.String `json:"name,omitempty"`
	// Parameter value.
	Value null.String `json:"value,omitempty"`
}

// Staged target information.
type StagedUploadTarget struct {
	// Parameters of an image to be uploaded.
	Parameters []*ImageUploadParameter `json:"parameters,omitempty"`
	// Image URL.
	URL null.String `json:"url,omitempty"`
}

// Specifies the fields required to generate the URL and parameters needed to upload an asset to Shopify.
type StagedUploadTargetGenerateInput struct {
	// The resource type being uploaded.
	Resource StagedUploadTargetGenerateUploadResource `json:"resource,omitempty"`
	// The filename of the asset being uploaded.
	Filename null.String `json:"filename,omitempty"`
	// The MIME type of the asset being uploaded.
	MimeType null.String `json:"mimeType,omitempty"`
	// The HTTP method to be used by the staged upload.
	HTTPMethod *StagedUploadHTTPMethodType `json:"httpMethod,omitempty"`
	// The size of the file to upload, in bytes.
	FileSize *null.String `json:"fileSize,omitempty"`
}

// Return type for `stagedUploadTargetGenerate` mutation.
type StagedUploadTargetGeneratePayload struct {
	// The signed parameters that can be used to upload the asset.
	Parameters []*MutationsStagedUploadTargetGenerateUploadParameter `json:"parameters,omitempty"`
	// The signed URL where the asset can be uploaded.
	URL null.String `json:"url,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `stagedUploadTargetsGenerate` mutation.
type StagedUploadTargetsGeneratePayload struct {
	// The staged upload targets that were generated.
	Urls []*StagedUploadTarget `json:"urls,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `stagedUploadsCreate` mutation.
type StagedUploadsCreatePayload struct {
	// The staged upload targets that were generated.
	StagedTargets []*StagedMediaUploadTarget `json:"stagedTargets,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Token used to delegate unauthenticated access scopes to clients that need to access the unautheticated Storefront API.
type StorefrontAccessToken struct {
	// List of permissions associated with the token.
	AccessScopes []*AccessScope `json:"accessScopes,omitempty"`
	// The issued public access token.
	AccessToken null.String `json:"accessToken,omitempty"`
	// The date and time when the public access token was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// An arbitrary title for each token determined by the developer, used for reference         purposes.
	Title null.String `json:"title,omitempty"`
	// The date and time when the storefront access token was updated.
	UpdatedAt null.String `json:"updatedAt,omitempty"`
}

func (StorefrontAccessToken) IsNode() {}

// An auto-generated type for paginating through multiple StorefrontAccessTokens.
type StorefrontAccessTokenConnection struct {
	// A list of edges.
	Edges []*StorefrontAccessTokenEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `storefrontAccessTokenCreate` mutation.
type StorefrontAccessTokenCreatePayload struct {
	// The user's shop.
	Shop *Shop `json:"shop,omitempty"`
	// The storefront access token.
	StorefrontAccessToken *StorefrontAccessToken `json:"storefrontAccessToken,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Specifies the input fields to delete a storefront access token.
type StorefrontAccessTokenDeleteInput struct {
	// The ID of the storefront access token to delete.
	ID null.String `json:"id,omitempty"`
}

// Return type for `storefrontAccessTokenDelete` mutation.
type StorefrontAccessTokenDeletePayload struct {
	// The ID of the deleted storefront access token.
	DeletedStorefrontAccessTokenID *null.String `json:"deletedStorefrontAccessTokenId,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one StorefrontAccessToken and a cursor during pagination.
type StorefrontAccessTokenEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of StorefrontAccessTokenEdge.
	Node *StorefrontAccessToken `json:"node,omitempty"`
}

// Specifies the input fields for a storefront access token.
type StorefrontAccessTokenInput struct {
	// A title for the storefront access token.
	Title null.String `json:"title,omitempty"`
}

// An auto-generated type for paginating through multiple Strings.
type StringConnection struct {
	// A list of edges.
	Edges []*StringEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one String and a cursor during pagination.
type StringEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of StringEdge.
	Node null.String `json:"node,omitempty"`
}

// Represents an applied code discount.
type SubscriptionAppliedCodeDiscount struct {
	// The unique identifier.
	ID null.String `json:"id,omitempty"`
	// The redeem code of the discount that applies on the subscription.
	RedeemCode null.String `json:"redeemCode,omitempty"`
	// The reason that the discount on the subscription draft is rejected.
	RejectionReason *SubscriptionDiscountRejectionReason `json:"rejectionReason,omitempty"`
}

func (SubscriptionAppliedCodeDiscount) IsSubscriptionDiscount() {}

// Record of an execution of the subscription billing schedule.
type SubscriptionBillingAttempt struct {
	// The date and time when the billing attempt was completed.
	CompletedAt *null.String `json:"completedAt,omitempty"`
	// The date and time when the billing attempt was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// A code corresponding to a payment error during processing.
	ErrorCode *SubscriptionBillingAttemptErrorCode `json:"errorCode,omitempty"`
	// A message describing a payment error during processing.
	ErrorMessage *null.String `json:"errorMessage,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// A unique key generated by the client to avoid duplicate payments.
	IdempotencyKey null.String `json:"idempotencyKey,omitempty"`
	// The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
	NextActionURL *null.String `json:"nextActionUrl,omitempty"`
	// The result of this billing attempt if completed successfully.
	Order *Order `json:"order,omitempty"`
	// Whether or not the billing attempt is still processing.
	Ready bool `json:"ready,omitempty"`
	// The subscription contract.
	SubscriptionContract *SubscriptionContract `json:"subscriptionContract,omitempty"`
}

func (SubscriptionBillingAttempt) IsNode() {}

// An auto-generated type for paginating through multiple SubscriptionBillingAttempts.
type SubscriptionBillingAttemptConnection struct {
	// A list of edges.
	Edges []*SubscriptionBillingAttemptEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `subscriptionBillingAttemptCreate` mutation.
type SubscriptionBillingAttemptCreatePayload struct {
	// The subscription billing attempt.
	SubscriptionBillingAttempt *SubscriptionBillingAttempt `json:"subscriptionBillingAttempt,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*BillingAttemptUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one SubscriptionBillingAttempt and a cursor during pagination.
type SubscriptionBillingAttemptEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of SubscriptionBillingAttemptEdge.
	Node *SubscriptionBillingAttempt `json:"node,omitempty"`
}

// Specifies the fields required to complete a subscription billing attempt.
type SubscriptionBillingAttemptInput struct {
	// A unique key generated by the client to avoid duplicate payments.
	IdempotencyKey null.String `json:"idempotencyKey,omitempty"`
}

// Represents a Subscription Billing Policy.
type SubscriptionBillingPolicy struct {
	// Specific anchor dates upon which the billing interval calculations should be made.
	Anchors []*SellingPlanAnchor `json:"anchors,omitempty"`
	// The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
	Interval SellingPlanInterval `json:"interval,omitempty"`
	// The number of billing intervals between invoices.
	IntervalCount int `json:"intervalCount,omitempty"`
	// Maximum amount of cycles after which the subscription ends.
	MaxCycles *int `json:"maxCycles,omitempty"`
	// Minimum amount of cycles required in the subscription.
	MinCycles *int `json:"minCycles,omitempty"`
}

// Specifies the input fields for a Subscription Billing Policy.
type SubscriptionBillingPolicyInput struct {
	// The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
	Interval SellingPlanInterval `json:"interval,omitempty"`
	// The number of billing intervals between invoices.
	IntervalCount int `json:"intervalCount,omitempty"`
	// Minimum amount of cycles required in the subscription.
	MinCycles *int `json:"minCycles,omitempty"`
	// Maximum amount of cycles required in the subscription.
	MaxCycles *int `json:"maxCycles,omitempty"`
	// Specific anchor dates upon which the billing interval calculations should be made.
	Anchors []*SellingPlanAnchorInput `json:"anchors,omitempty"`
}

// Represents a Subscription Contract.
type SubscriptionContract struct {
	// The subscription app that this subscription contract is registered to.
	App *App `json:"app,omitempty"`
	// URL of the subscription contract page on the subscription app.
	AppAdminURL *null.String `json:"appAdminUrl,omitempty"`
	// The list of billing attempts associated with the subscription contract.
	BillingAttempts *SubscriptionBillingAttemptConnection `json:"billingAttempts,omitempty"`
	// The billing policy associated with the subscription contract.
	BillingPolicy *SubscriptionBillingPolicy `json:"billingPolicy,omitempty"`
	// The date and time when the subscription contract was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// The currency used for the subscription contract.
	CurrencyCode CurrencyCode `json:"currencyCode,omitempty"`
	// The customer to whom the subscription contract belongs.
	Customer *Customer `json:"customer,omitempty"`
	// The customer payment method used for the subscription contract.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty"`
	// The delivery method for each billing of the subscription contract.
	DeliveryMethod SubscriptionDeliveryMethod `json:"deliveryMethod,omitempty"`
	// The delivery policy associated with the subscription contract.
	DeliveryPolicy *SubscriptionDeliveryPolicy `json:"deliveryPolicy,omitempty"`
	// The delivery price for each billing of the subscription contract.
	DeliveryPrice *MoneyV2 `json:"deliveryPrice,omitempty"`
	// The list of subscription discounts associated with the subscription contract.
	Discounts *SubscriptionManualDiscountConnection `json:"discounts,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The current status of the last payment.
	LastPaymentStatus *SubscriptionContractLastPaymentStatus `json:"lastPaymentStatus,omitempty"`
	// The number of lines associated with the subscription contract.
	LineCount int `json:"lineCount,omitempty"`
	// The list of subscription lines associated with the subscription contract.
	Lines *SubscriptionLineConnection `json:"lines,omitempty"`
	// The next billing date for the subscription contract.
	NextBillingDate *null.String `json:"nextBillingDate,omitempty"`
	// The list of orders associated with the subscription contract.
	Orders *OrderConnection `json:"orders,omitempty"`
	// The order from which this contract originated.
	OriginOrder *Order `json:"originOrder,omitempty"`
	// The current status of the subscription contract.
	Status SubscriptionContractSubscriptionStatus `json:"status,omitempty"`
	// The date and time when the subscription contract was updated.
	UpdatedAt null.String `json:"updatedAt,omitempty"`
}

func (SubscriptionContract) IsNode() {}

// An auto-generated type for paginating through multiple SubscriptionContracts.
type SubscriptionContractConnection struct {
	// A list of edges.
	Edges []*SubscriptionContractEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Specifies the input fields required to create a Subscription Contract.
type SubscriptionContractCreateInput struct {
	// The ID of the customer to associate with the subscription contract.
	CustomerID null.String `json:"customerId,omitempty"`
	// The next billing date for the subscription contract.
	NextBillingDate null.String `json:"nextBillingDate,omitempty"`
	// The currency used for the subscription contract.
	CurrencyCode CurrencyCode `json:"currencyCode,omitempty"`
	// The attributes used as input for the Subscription Draft.
	Contract *SubscriptionDraftInput `json:"contract,omitempty"`
}

// Return type for `subscriptionContractCreate` mutation.
type SubscriptionContractCreatePayload struct {
	// The Subscription Contract object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one SubscriptionContract and a cursor during pagination.
type SubscriptionContractEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of SubscriptionContractEdge.
	Node *SubscriptionContract `json:"node,omitempty"`
}

// Return type for `subscriptionContractSetNextBillingDate` mutation.
type SubscriptionContractSetNextBillingDatePayload struct {
	// The updated Subscription Contract object.
	Contract *SubscriptionContract `json:"contract,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SubscriptionContractUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionContractUpdate` mutation.
type SubscriptionContractUpdatePayload struct {
	// The Subscription Contract object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Represents a Subscription Contract error.
type SubscriptionContractUserError struct {
	// Error code to uniquely identify the error.
	Code *SubscriptionContractErrorCode `json:"code,omitempty"`
	// Path to the input field which caused the error.
	Field []null.String `json:"field,omitempty"`
	// The error message.
	Message null.String `json:"message,omitempty"`
}

func (SubscriptionContractUserError) IsDisplayableError() {}

// Represents a Subscription Line Pricing Cycle Adjustment.
type SubscriptionCyclePriceAdjustment struct {
	// Price adjustment type.
	AdjustmentType SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType,omitempty"`
	// Price adjustment value.
	AdjustmentValue SellingPlanPricingPolicyAdjustmentValue `json:"adjustmentValue,omitempty"`
	// The number of cycles required before this pricing policy applies.
	AfterCycle int `json:"afterCycle,omitempty"`
	// The computed price after the adjustments applied.
	ComputedPrice *MoneyV2 `json:"computedPrice,omitempty"`
}

// Specifies delivery method fields for a subscription draft.
// This is an input union: one, and only one, field can be provided.
// The field provided will determine which delivery method is to be used.
//
// Note: Only `shipping` is supported for now, but other inputs will be
// added as they become supported in subscriptions.
type SubscriptionDeliveryMethodInput struct {
	// Shipping delivery method input.
	Shipping *SubscriptionDeliveryMethodShippingInput `json:"shipping,omitempty"`
}

// Represents a shipping delivery method: a mailing address and a shipping option.
type SubscriptionDeliveryMethodShipping struct {
	// The address to ship to.
	Address *SubscriptionMailingAddress `json:"address,omitempty"`
	// The details of the shipping method to use.
	ShippingOption *SubscriptionDeliveryMethodShippingOption `json:"shippingOption,omitempty"`
}

func (SubscriptionDeliveryMethodShipping) IsSubscriptionDeliveryMethod() {}

// Specifies shipping delivery method fields.
//
// This input accepts partial input. When a field is not provided,
// its prior value is left unchanged.
type SubscriptionDeliveryMethodShippingInput struct {
	// The address to ship to.
	Address *MailingAddressInput `json:"address,omitempty"`
	// The details of the shipping method to use.
	ShippingOption *SubscriptionDeliveryMethodShippingOptionInput `json:"shippingOption,omitempty"`
}

// Represents the selected shipping option on a subscription contract.
type SubscriptionDeliveryMethodShippingOption struct {
	// The carrier service of the shipping option.
	CarrierService *DeliveryCarrierService `json:"carrierService,omitempty"`
	// The code of the shipping option.
	Code *null.String `json:"code,omitempty"`
	// The description of the shipping option.
	Description *null.String `json:"description,omitempty"`
	// The presentment title of the shipping option.
	PresentmentTitle *null.String `json:"presentmentTitle,omitempty"`
	// The title of the shipping option.
	Title *null.String `json:"title,omitempty"`
}

// Specifies shipping option fields.
type SubscriptionDeliveryMethodShippingOptionInput struct {
	// The title of the shipping option.
	Title *null.String `json:"title,omitempty"`
	// The presentment title of the shipping option.
	PresentmentTitle *null.String `json:"presentmentTitle,omitempty"`
	// The description of the shipping option.
	Description *null.String `json:"description,omitempty"`
	// The code of the shipping option.
	Code *null.String `json:"code,omitempty"`
	// The carrier service ID of the shipping option.
	CarrierServiceID *null.String `json:"carrierServiceId,omitempty"`
}

// Represents a Subscription Delivery Policy.
type SubscriptionDeliveryPolicy struct {
	// Specific anchor dates upon which the delivery interval calculations should be made.
	Anchors []*SellingPlanAnchor `json:"anchors,omitempty"`
	// The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
	Interval SellingPlanInterval `json:"interval,omitempty"`
	// The number of delivery intervals between deliveries.
	IntervalCount int `json:"intervalCount,omitempty"`
}

// Specifies the input fields for a Subscription Delivery Policy.
type SubscriptionDeliveryPolicyInput struct {
	// The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
	Interval SellingPlanInterval `json:"interval,omitempty"`
	// The number of billing intervals between invoices.
	IntervalCount int `json:"intervalCount,omitempty"`
	// Specific anchor dates upon which the delivery interval calculations should be made.
	Anchors []*SellingPlanAnchorInput `json:"anchors,omitempty"`
}

// Represents what a particular discount reduces from a line price.
type SubscriptionDiscountAllocation struct {
	// Allocation amount.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// Discount that created the allocation.
	Discount SubscriptionDiscount `json:"discount,omitempty"`
}

// An auto-generated type for paginating through multiple SubscriptionDiscounts.
type SubscriptionDiscountConnection struct {
	// A list of edges.
	Edges []*SubscriptionDiscountEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one SubscriptionDiscount and a cursor during pagination.
type SubscriptionDiscountEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of SubscriptionDiscountEdge.
	Node SubscriptionDiscount `json:"node,omitempty"`
}

// Represents the subscription lines the discount applies on.
type SubscriptionDiscountEntitledLines struct {
	// Specify whether the subscription discount will apply on all subscription lines.
	All bool `json:"all,omitempty"`
	// The list of subscription lines associated with the subscription discount.
	Lines *SubscriptionLineConnection `json:"lines,omitempty"`
}

// The value of the discount and how it will be applied.
type SubscriptionDiscountFixedAmountValue struct {
	// The fixed amount value of the discount.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// Whether the amount is applied per item.
	AppliesOnEachItem bool `json:"appliesOnEachItem,omitempty"`
}

func (SubscriptionDiscountFixedAmountValue) IsSubscriptionDiscountValue() {}

// The percentage value of the discount.
type SubscriptionDiscountPercentageValue struct {
	// The percentage value of the discount.
	Percentage int `json:"percentage,omitempty"`
}

func (SubscriptionDiscountPercentageValue) IsSubscriptionDiscountValue() {}

// Represents a Subscription Draft.
type SubscriptionDraft struct {
	// The billing policy for the subscription contract.
	BillingPolicy *SubscriptionBillingPolicy `json:"billingPolicy,omitempty"`
	// The currency used for the subscription contract.
	CurrencyCode CurrencyCode `json:"currencyCode,omitempty"`
	// The customer to whom the subscription contract belongs.
	Customer *Customer `json:"customer,omitempty"`
	// The customer payment method used for the subscription contract.
	CustomerPaymentMethod *CustomerPaymentMethod `json:"customerPaymentMethod,omitempty"`
	// The delivery method for each billing of the subscription contract.
	DeliveryMethod SubscriptionDeliveryMethod `json:"deliveryMethod,omitempty"`
	// The delivery policy for the subscription contract.
	DeliveryPolicy *SubscriptionDeliveryPolicy `json:"deliveryPolicy,omitempty"`
	// The delivery price for each billing the subscription contract.
	DeliveryPrice *MoneyV2 `json:"deliveryPrice,omitempty"`
	// The list of subscription discounts which will be associated with the subscription contract.
	Discounts *SubscriptionDiscountConnection `json:"discounts,omitempty"`
	// The list of subscription discounts to be added to the subscription contract.
	DiscountsAdded *SubscriptionDiscountConnection `json:"discountsAdded,omitempty"`
	// The list of subscription discounts to be removed from the subscription contract.
	DiscountsRemoved *SubscriptionDiscountConnection `json:"discountsRemoved,omitempty"`
	// The list of subscription discounts to be updated on the subscription contract.
	DiscountsUpdated *SubscriptionDiscountConnection `json:"discountsUpdated,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The list of subscription lines which will be associated with the subscription contract.
	Lines *SubscriptionLineConnection `json:"lines,omitempty"`
	// The list of subscription lines to be added to the subscription contract.
	LinesAdded *SubscriptionLineConnection `json:"linesAdded,omitempty"`
	// The list of subscription lines to be removed from the subscription contract.
	LinesRemoved *SubscriptionLineConnection `json:"linesRemoved,omitempty"`
	// The next billing date for the subscription contract.
	NextBillingDate *null.String `json:"nextBillingDate,omitempty"`
	// The original subscription contract.
	OriginalContract *SubscriptionContract `json:"originalContract,omitempty"`
	// Available Shipping Options for a given delivery address. Returns NULL for pending requests.
	ShippingOptions SubscriptionShippingOptionResult `json:"shippingOptions,omitempty"`
	// The current status of the subscription contract.
	Status *SubscriptionContractSubscriptionStatus `json:"status,omitempty"`
}

func (SubscriptionDraft) IsNode() {}

// Return type for `subscriptionDraftCommit` mutation.
type SubscriptionDraftCommitPayload struct {
	// The updated Subscription Contract object.
	Contract *SubscriptionContract `json:"contract,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftDiscountAdd` mutation.
type SubscriptionDraftDiscountAddPayload struct {
	// The added Subscription Discount.
	DiscountAdded *SubscriptionManualDiscount `json:"discountAdded,omitempty"`
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftDiscountCodeApply` mutation.
type SubscriptionDraftDiscountCodeApplyPayload struct {
	// The added subscription discount.
	AppliedDiscount *SubscriptionAppliedCodeDiscount `json:"appliedDiscount,omitempty"`
	// The subscription contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftDiscountRemove` mutation.
type SubscriptionDraftDiscountRemovePayload struct {
	// The removed subscription draft discount.
	DiscountRemoved SubscriptionDiscount `json:"discountRemoved,omitempty"`
	// The subscription contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftDiscountUpdate` mutation.
type SubscriptionDraftDiscountUpdatePayload struct {
	// The updated Subscription Discount.
	DiscountUpdated *SubscriptionManualDiscount `json:"discountUpdated,omitempty"`
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftFreeShippingDiscountAdd` mutation.
type SubscriptionDraftFreeShippingDiscountAddPayload struct {
	// The added subscription free shipping discount.
	DiscountAdded *SubscriptionManualDiscount `json:"discountAdded,omitempty"`
	// The subscription contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftFreeShippingDiscountUpdate` mutation.
type SubscriptionDraftFreeShippingDiscountUpdatePayload struct {
	// The updated Subscription Discount.
	DiscountUpdated *SubscriptionManualDiscount `json:"discountUpdated,omitempty"`
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Specifies the input fields required to create a Subscription Draft.
type SubscriptionDraftInput struct {
	// The current status of the subscription contract.
	Status *SubscriptionContractSubscriptionStatus `json:"status,omitempty"`
	// The ID of the payment method to be used for the subscription contract.
	PaymentMethodID *null.String `json:"paymentMethodId,omitempty"`
	// The next billing date for the subscription contract.
	NextBillingDate *null.String `json:"nextBillingDate,omitempty"`
	// The billing policy for the subscription contract.
	BillingPolicy *SubscriptionBillingPolicyInput `json:"billingPolicy,omitempty"`
	// The delivery policy for the subscription contract.
	DeliveryPolicy *SubscriptionDeliveryPolicyInput `json:"deliveryPolicy,omitempty"`
	// The shipping price for each renewal the subscription contract.
	DeliveryPrice *null.String `json:"deliveryPrice,omitempty"`
	// The delivery method for the subscription contract.
	DeliveryMethod *SubscriptionDeliveryMethodInput `json:"deliveryMethod,omitempty"`
}

// Return type for `subscriptionDraftLineAdd` mutation.
type SubscriptionDraftLineAddPayload struct {
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// The added Subscription Line.
	LineAdded *SubscriptionLine `json:"lineAdded,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftLineRemove` mutation.
type SubscriptionDraftLineRemovePayload struct {
	// The list of updated subscription discounts impacted by the removed line.
	DiscountsUpdated []*SubscriptionManualDiscount `json:"discountsUpdated,omitempty"`
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// The removed Subscription Line.
	LineRemoved *SubscriptionLine `json:"lineRemoved,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftLineUpdate` mutation.
type SubscriptionDraftLineUpdatePayload struct {
	// The Subscription Contract draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// The updated Subscription Line.
	LineUpdated *SubscriptionLine `json:"lineUpdated,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Return type for `subscriptionDraftUpdate` mutation.
type SubscriptionDraftUpdatePayload struct {
	// The Subscription Draft object.
	Draft *SubscriptionDraft `json:"draft,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*SubscriptionDraftUserError `json:"userErrors,omitempty"`
}

// Represents a Subscription Draft error.
type SubscriptionDraftUserError struct {
	// Error code to uniquely identify the error.
	Code *SubscriptionDraftErrorCode `json:"code,omitempty"`
	// Path to the input field which caused the error.
	Field []null.String `json:"field,omitempty"`
	// The error message.
	Message null.String `json:"message,omitempty"`
}

func (SubscriptionDraftUserError) IsDisplayableError() {}

// Specifies the input fields of a subscription free shipping discount on a contract.
type SubscriptionFreeShippingDiscountInput struct {
	// The title associated with the subscription free shipping discount.
	Title *null.String `json:"title,omitempty"`
	// The maximum number of times the subscription free shipping discount will be applied on orders.
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty"`
}

// Represents a Subscription Line.
type SubscriptionLine struct {
	// The price per unit for the subscription line in the contract's currency.
	CurrentPrice *MoneyV2 `json:"currentPrice,omitempty"`
	// List of custom attributes associated to the line item.
	CustomAttributes []*Attribute `json:"customAttributes,omitempty"`
	// Discount allocations.
	DiscountAllocations []*SubscriptionDiscountAllocation `json:"discountAllocations,omitempty"`
	// The unique identifier.
	ID null.String `json:"id,omitempty"`
	// Total line price including all discounts.
	LineDiscountedPrice *MoneyV2 `json:"lineDiscountedPrice,omitempty"`
	// Describe the price changes of the line over time.
	PricingPolicy *SubscriptionPricingPolicy `json:"pricingPolicy,omitempty"`
	// The product id associated with the subscription line.
	ProductID *null.String `json:"productId,omitempty"`
	// The quantity of the unit selected for the subscription line.
	Quantity int `json:"quantity,omitempty"`
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping,omitempty"`
	// The selling plan ID associated to the line.
	//
	// Indicates which selling plan was used to create this
	// contract line initially. The selling plan ID is also used to
	// find the associated delivery profile.
	//
	// The subscription contract, subscription line, or selling plan might have
	// changed. As a result, the selling plan's attributes might not
	// match the information on the contract.
	SellingPlanID *null.String `json:"sellingPlanId,omitempty"`
	// The selling plan name associated to the line. This name describes
	// the order line items created from this subscription line
	// for both merchants and customers.
	//
	// The value can be different from the selling plan's name, because both
	// the selling plan's name and the subscription line's selling_plan_name
	// attribute can be updated independently.
	SellingPlanName *null.String `json:"sellingPlanName,omitempty"`
	// Variant SKU number of the item associated with the subscription line.
	Sku *null.String `json:"sku,omitempty"`
	// Whether the variant is taxable.
	Taxable bool `json:"taxable,omitempty"`
	// Product title of the item associated with the subscription line.
	Title null.String `json:"title,omitempty"`
	// The product variant id associated with the subscription line.
	VariantID *null.String `json:"variantId,omitempty"`
	// The image associated with the line item's variant or product.
	VariantImage *Image `json:"variantImage,omitempty"`
	// Product variant title of the item associated with the subscription line.
	VariantTitle *null.String `json:"variantTitle,omitempty"`
}

// An auto-generated type for paginating through multiple SubscriptionLines.
type SubscriptionLineConnection struct {
	// A list of edges.
	Edges []*SubscriptionLineEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one SubscriptionLine and a cursor during pagination.
type SubscriptionLineEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of SubscriptionLineEdge.
	Node *SubscriptionLine `json:"node,omitempty"`
}

// Specifies the input fields required to add a new subscription line to a contract.
type SubscriptionLineInput struct {
	// The ID of the product variant the subscription line refers to.
	ProductVariantID null.String `json:"productVariantId,omitempty"`
	// The quantity of the product.
	Quantity int `json:"quantity,omitempty"`
	// The price of the product.
	CurrentPrice null.String `json:"currentPrice,omitempty"`
	// The custom attributes for this subscription line.
	CustomAttributes []*AttributeInput `json:"customAttributes,omitempty"`
	// The selling plan for the subscription line.
	SellingPlanID *null.String `json:"sellingPlanId,omitempty"`
	// The selling plan name for the subscription line.
	//
	// Defaults to using the selling plan's current name when not specified.
	SellingPlanName *null.String `json:"sellingPlanName,omitempty"`
	// Describes expected price changes of the subscription line over time.
	PricingPolicy *SubscriptionPricingPolicyInput `json:"pricingPolicy,omitempty"`
}

// Specifies the input fields required to update a subscription line on a contract.
type SubscriptionLineUpdateInput struct {
	// The ID of the product variant the subscription line refers to.
	ProductVariantID *null.String `json:"productVariantId,omitempty"`
	// The quantity of the product.
	Quantity *int `json:"quantity,omitempty"`
	// The selling plan for the subscription line.
	SellingPlanID *null.String `json:"sellingPlanId,omitempty"`
	// The selling plan name for the subscription line.
	SellingPlanName *null.String `json:"sellingPlanName,omitempty"`
	// The price of the product.
	CurrentPrice *null.String `json:"currentPrice,omitempty"`
	// The custom attributes for this subscription line.
	CustomAttributes []*AttributeInput `json:"customAttributes,omitempty"`
	// Describes expected price changes of the subscription line over time.
	PricingPolicy *SubscriptionPricingPolicyInput `json:"pricingPolicy,omitempty"`
}

// Represents a Mailing Address on a Subscription.
type SubscriptionMailingAddress struct {
	// The first line of the address. Typically the street address or PO Box number.
	Address1 *null.String `json:"address1,omitempty"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	Address2 *null.String `json:"address2,omitempty"`
	// The name of the city, district, village, or town.
	City *null.String `json:"city,omitempty"`
	// The name of the customer's company or organization.
	Company *null.String `json:"company,omitempty"`
	// The name of the country.
	Country *null.String `json:"country,omitempty"`
	// The two-letter code for the country of the address.
	//
	// For example, US.
	CountryCode *CountryCode `json:"countryCode,omitempty"`
	// The first name of the customer.
	FirstName *null.String `json:"firstName,omitempty"`
	// The last name of the customer.
	LastName *null.String `json:"lastName,omitempty"`
	// The full name of the customer, based on firstName and lastName.
	Name *null.String `json:"name,omitempty"`
	// A unique phone number for the customer. Formatted using E.164 standard. For example, _+16135551111_.
	Phone *null.String `json:"phone,omitempty"`
	// The region of the address, such as the province, state, or district.
	Province *null.String `json:"province,omitempty"`
	// The two-letter code for the region.
	//
	// For example, ON.
	ProvinceCode *null.String `json:"provinceCode,omitempty"`
	// The zip or postal code of the address.
	Zip *null.String `json:"zip,omitempty"`
}

// Custom subscription discount.
type SubscriptionManualDiscount struct {
	// Entitled line items used to apply the subscription discount on.
	EntitledLines *SubscriptionDiscountEntitledLines `json:"entitledLines,omitempty"`
	// The unique identifier.
	ID null.String `json:"id,omitempty"`
	// The maximum number of times the subscription discount will be applied on orders.
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty"`
	// The reason that the discount on the subscription draft is rejected.
	RejectionReason *SubscriptionDiscountRejectionReason `json:"rejectionReason,omitempty"`
	// Type of line the discount applies on.
	TargetType DiscountTargetType `json:"targetType,omitempty"`
	// The title associated with the subscription discount.
	Title *null.String `json:"title,omitempty"`
	// The type of the subscription discount.
	Type DiscountType `json:"type,omitempty"`
	// The number of times the discount was applied.
	UsageCount int `json:"usageCount,omitempty"`
	// The value of the subscription discount.
	Value SubscriptionDiscountValue `json:"value,omitempty"`
}

func (SubscriptionManualDiscount) IsSubscriptionDiscount() {}

// An auto-generated type for paginating through multiple SubscriptionManualDiscounts.
type SubscriptionManualDiscountConnection struct {
	// A list of edges.
	Edges []*SubscriptionManualDiscountEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one SubscriptionManualDiscount and a cursor during pagination.
type SubscriptionManualDiscountEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of SubscriptionManualDiscountEdge.
	Node *SubscriptionManualDiscount `json:"node,omitempty"`
}

// Represents the subscription lines the discount applies on.
type SubscriptionManualDiscountEntitledLinesInput struct {
	// Specify whether the subscription discount will apply on all subscription lines.
	All *bool `json:"all,omitempty"`
	// The ID of the lines to add to or remove from the subscription discount.
	Lines *SubscriptionManualDiscountLinesInput `json:"lines,omitempty"`
}

// Specifies the fixed amount value of the discount and distribution on the lines.
type SubscriptionManualDiscountFixedAmountInput struct {
	// Fixed amount value.
	Amount *float64 `json:"amount,omitempty"`
	// Whether the amount is intended per line item or once per subscription.
	AppliesOnEachItem *bool `json:"appliesOnEachItem,omitempty"`
}

// Specifies the input fields of a subscription discount on a contract.
type SubscriptionManualDiscountInput struct {
	// The title associated with the subscription discount.
	Title *null.String `json:"title,omitempty"`
	// Percentage or fixed amount value of the discount.
	Value *SubscriptionManualDiscountValueInput `json:"value,omitempty"`
	// The maximum number of times the subscription discount will be applied on orders.
	RecurringCycleLimit *int `json:"recurringCycleLimit,omitempty"`
	// Entitled line items used to apply the subscription discount on.
	EntitledLines *SubscriptionManualDiscountEntitledLinesInput `json:"entitledLines,omitempty"`
}

// Line items that a the discount refers to.
type SubscriptionManualDiscountLinesInput struct {
	// The ID of the lines to add to the subscription discount.
	Add []null.String `json:"add,omitempty"`
	// The ID of the lines to remove from the subscription discount.
	Remove []null.String `json:"remove,omitempty"`
}

// Specifies the discount value and its distribution.
type SubscriptionManualDiscountValueInput struct {
	// The percentage value of the discount. Value must be between 0 - 100.
	Percentage *int `json:"percentage,omitempty"`
	// Fixed amount input in the currency defined by the subscription.
	FixedAmount *SubscriptionManualDiscountFixedAmountInput `json:"fixedAmount,omitempty"`
}

// Represents a Subscription Line Pricing Policy.
type SubscriptionPricingPolicy struct {
	// The base price per unit for the subscription line in the contract's currency.
	BasePrice *MoneyV2 `json:"basePrice,omitempty"`
	// The adjustments per cycle for the subscription line.
	CycleDiscounts []*SubscriptionCyclePriceAdjustment `json:"cycleDiscounts,omitempty"`
}

// An array containing all pricing changes for each billing cycle.
type SubscriptionPricingPolicyCycleDiscountsInput struct {
	// The cycle after which the pricing policy applies.
	AfterCycle int `json:"afterCycle,omitempty"`
	// The price adjustment type.
	AdjustmentType SellingPlanPricingPolicyAdjustmentType `json:"adjustmentType,omitempty"`
	// The price adjustment value.
	AdjustmentValue *SellingPlanPricingPolicyValueInput `json:"adjustmentValue,omitempty"`
	// The computed price after the adjustments are applied.
	ComputedPrice null.String `json:"computedPrice,omitempty"`
}

// Describes expected price changes of the subscription line over time.
type SubscriptionPricingPolicyInput struct {
	// The base price per unit for the subscription line in the contract's currency.
	BasePrice null.String `json:"basePrice,omitempty"`
	// An array containing all pricing changes for each billing cycle.
	CycleDiscounts []*SubscriptionPricingPolicyCycleDiscountsInput `json:"cycleDiscounts,omitempty"`
}

// A shipping option to deliver a subscription contract.
type SubscriptionShippingOption struct {
	// The carrier service that is providing this shipping option.
	// This field isn't currently supported and returns null.
	CarrierService *DeliveryCarrierService `json:"carrierService,omitempty"`
	// The code of the shipping option.
	Code null.String `json:"code,omitempty"`
	// The description of the shipping option.
	Description *null.String `json:"description,omitempty"`
	// If a phone number is required for the shipping option.
	PhoneRequired *bool `json:"phoneRequired,omitempty"`
	// The presentment title of the shipping option.
	PresentmentTitle *null.String `json:"presentmentTitle,omitempty"`
	// The price of the shipping option.
	Price *MoneyV2 `json:"price,omitempty"`
	// The title of the shipping option.
	Title null.String `json:"title,omitempty"`
}

// Failure determining available shipping options for delivery of a subscription contract.
type SubscriptionShippingOptionResultFailure struct {
	// Failure reason.
	Message *null.String `json:"message,omitempty"`
}

func (SubscriptionShippingOptionResultFailure) IsSubscriptionShippingOptionResult() {}

// A shipping option for delivery of a subscription contract.
type SubscriptionShippingOptionResultSuccess struct {
	// Available shipping options.
	ShippingOptions []*SubscriptionShippingOption `json:"shippingOptions,omitempty"`
}

func (SubscriptionShippingOptionResultSuccess) IsSubscriptionShippingOptionResult() {}

// Represents a suggested transaction.
type SuggestedOrderTransaction struct {
	// The masked account number associated with the payment method.
	AccountNumber *null.String `json:"accountNumber,omitempty"`
	// The amount of the transaction.
	Amount null.String `json:"amount,omitempty"`
	// The amount on the order transaction in applicable currencies.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// The human-readable payment gateway name used to process the transaction.
	FormattedGateway *null.String `json:"formattedGateway,omitempty"`
	// The payment gateway used to process the transaction.
	Gateway *null.String `json:"gateway,omitempty"`
	// Specifies the kind of the suggested order transaction.
	Kind SuggestedOrderTransactionKind `json:"kind,omitempty"`
	// Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
	MaximumRefundable *null.String `json:"maximumRefundable,omitempty"`
	// Specifies the available amount to refund on the gateway in shop and presentment currencies. Only available within SuggestedRefund.
	MaximumRefundableSet *MoneyBag `json:"maximumRefundableSet,omitempty"`
	// The associated parent transaction, for example the authorization of a capture.
	ParentTransaction *OrderTransaction `json:"parentTransaction,omitempty"`
}

// Represents the suggested refund to be submitted based on the items being returned.
type SuggestedRefund struct {
	// The total monetary value to be refunded.
	Amount null.String `json:"amount,omitempty"`
	// The total monetary value to be refunded in shop and presentment currencies.
	AmountSet *MoneyBag `json:"amountSet,omitempty"`
	// The sum of all the discounted prices of the line items being refunded.
	DiscountedSubtotalSet *MoneyBag `json:"discountedSubtotalSet,omitempty"`
	// The total monetary value available to refund.
	MaximumRefundable null.String `json:"maximumRefundable,omitempty"`
	// The total monetary value available to refund in shop and presentment currencies.
	MaximumRefundableSet *MoneyBag `json:"maximumRefundableSet,omitempty"`
	// An array of duties that will be refunded to the customer.
	RefundDuties []*RefundDuty `json:"refundDuties,omitempty"`
	// An array of line items that will be returned to the customer.
	RefundLineItems []*RefundLineItem `json:"refundLineItems,omitempty"`
	// Refund details for shipping costs paid by customer.
	Shipping *ShippingRefund `json:"shipping,omitempty"`
	// The sum of all the prices of the line items being refunded.
	Subtotal null.String `json:"subtotal,omitempty"`
	// The sum of all the prices of the line items being refunded in shop and presentment currencies.
	SubtotalSet *MoneyBag `json:"subtotalSet,omitempty"`
	// Array of SuggestedOrderTransaction items.
	SuggestedTransactions []*SuggestedOrderTransaction `json:"suggestedTransactions,omitempty"`
	// The total cart discount amount that was applied to all line items in this refund.
	TotalCartDiscountAmountSet *MoneyBag `json:"totalCartDiscountAmountSet,omitempty"`
	// The sum of all the duties being refunded from the order in shop and presentment currencies. Must be positive.
	TotalDutiesSet *MoneyBag `json:"totalDutiesSet,omitempty"`
	// The sum of all the taxes being refunded from the order (must be positive) in shop and presentment currencies.
	TotalTaxSet *MoneyBag `json:"totalTaxSet,omitempty"`
	// The sum of all the taxes being refunded from the order (must be positive).
	TotalTaxes null.String `json:"totalTaxes,omitempty"`
}

// Return type for `tagsAdd` mutation.
type TagsAddPayload struct {
	// The object that was updated.
	Node Node `json:"node,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `tagsRemove` mutation.
type TagsRemovePayload struct {
	// The object that was updated.
	Node Node `json:"node,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Represents the information about the tax charged on the associated line item.
type TaxLine struct {
	// The amount of tax to be charged.
	Price null.String `json:"price,omitempty"`
	// The amount of tax to be charged in shop and presentment currencies.
	PriceSet *MoneyBag `json:"priceSet,omitempty"`
	// The tax rate to be applied.
	Rate *float64 `json:"rate,omitempty"`
	// The percentage of the price that the tax rate represents.
	RatePercentage *float64 `json:"ratePercentage,omitempty"`
	// The name of the tax.
	Title null.String `json:"title,omitempty"`
}

// A tender transaction represents a transaction which modifies the shop's balance.
type TenderTransaction struct {
	// The amount and currency of the tender transaction.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Information about the payment method used for this transaction.
	PaymentMethod *null.String `json:"paymentMethod,omitempty"`
	// Date and time when the transaction was processed.
	ProcessedAt *null.String `json:"processedAt,omitempty"`
	// The remote gateway reference associated with the tender transaction.
	RemoteReference *null.String `json:"remoteReference,omitempty"`
	// Whether the transaction is a test transaction.
	Test bool `json:"test,omitempty"`
	// Information about the payment instrument used for this transaction.
	TransactionDetails TenderTransactionDetails `json:"transactionDetails,omitempty"`
}

func (TenderTransaction) IsNode() {}

// An auto-generated type for paginating through multiple TenderTransactions.
type TenderTransactionConnection struct {
	// A list of edges.
	Edges []*TenderTransactionEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Information about the credit card used for this transaction.
type TenderTransactionCreditCardDetails struct {
	// The name of the company that issued the customer's credit card.
	CreditCardCompany *null.String `json:"creditCardCompany,omitempty"`
	// The customer's credit card number, with most of the leading digits redacted.
	CreditCardNumber *null.String `json:"creditCardNumber,omitempty"`
}

func (TenderTransactionCreditCardDetails) IsTenderTransactionDetails() {}

// An auto-generated type which holds one TenderTransaction and a cursor during pagination.
type TenderTransactionEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of TenderTransactionEdge.
	Node *TenderTransaction `json:"node,omitempty"`
}

// Specifies the fields for tracking information.
type TrackingInfoInput struct {
	// The tracking number of the fulfillment.
	Number *null.String `json:"number,omitempty"`
	// The URL to track the fulfillment.
	URL *null.String `json:"url,omitempty"`
}

// Specifies all possible fields for updating tracking information.
type TrackingInfoUpdateInput struct {
	// Tracking information consisting of one or more tracking URLs and numbers associated with the fulfillment.
	TrackingDetails []*TrackingInfoInput `json:"trackingDetails,omitempty"`
	// The name of the tracking company.
	TrackingCompany *null.String `json:"trackingCompany,omitempty"`
	// Indicates whether the customer will be notified of this update and future updates for this fulfillment.
	NotifyCustomer *bool `json:"notifyCustomer,omitempty"`
}

// Transaction fee related to an order transaction.
type TransactionFee struct {
	// Amount of the fee.
	Amount *MoneyV2 `json:"amount,omitempty"`
	// Flat rate charge for a transaction.
	FlatFee *MoneyV2 `json:"flatFee,omitempty"`
	// Name of the credit card flat fee.
	FlatFeeName *null.String `json:"flatFeeName,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// Percentage charge.
	Rate null.String `json:"rate,omitempty"`
	// Name of the credit card rate.
	RateName *null.String `json:"rateName,omitempty"`
	// Tax amount charged on the fee.
	TaxAmount *MoneyV2 `json:"taxAmount,omitempty"`
	// Name of the type of fee.
	Type null.String `json:"type,omitempty"`
}

func (TransactionFee) IsNode() {}

// Translatable content of a resource's field.
type TranslatableContent struct {
	// Digest (hash) of the content.
	Digest *null.String `json:"digest,omitempty"`
	// Content key.
	Key null.String `json:"key,omitempty"`
	// Content locale.
	Locale null.String `json:"locale,omitempty"`
	// Content value.
	Value *null.String `json:"value,omitempty"`
}

// A resource that has translatable fields.
type TranslatableResource struct {
	// GID of the resource.
	ResourceID null.String `json:"resourceId,omitempty"`
	// Translatable content.
	TranslatableContent []*TranslatableContent `json:"translatableContent,omitempty"`
	// Translatable content translations.
	Translations []*Translation `json:"translations,omitempty"`
}

// An auto-generated type for paginating through multiple TranslatableResources.
type TranslatableResourceConnection struct {
	// A list of edges.
	Edges []*TranslatableResourceEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// An auto-generated type which holds one TranslatableResource and a cursor during pagination.
type TranslatableResourceEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of TranslatableResourceEdge.
	Node *TranslatableResource `json:"node,omitempty"`
}

// Translation of a field of a resource.
type Translation struct {
	// Translation key.
	Key null.String `json:"key,omitempty"`
	// Translation locale.
	Locale null.String `json:"locale,omitempty"`
	// Marked as outdated.
	Outdated bool `json:"outdated,omitempty"`
	// Translation value.
	Value *null.String `json:"value,omitempty"`
}

// Provides the fields and values to use when creating or updating a translation.
type TranslationInput struct {
	// The locale of the translation.
	Locale null.String `json:"locale,omitempty"`
	// The key of the translation.
	Key null.String `json:"key,omitempty"`
	// The value of the translation.
	Value null.String `json:"value,omitempty"`
	// The digest (hash) of the content being translated.
	TranslatableContentDigest null.String `json:"translatableContentDigest,omitempty"`
}

// Represents an error that happens during the execution of a translation mutation.
type TranslationUserError struct {
	// Error code to uniquely identify the error.
	Code *TranslationErrorCode `json:"code,omitempty"`
	// Path to the input field which caused the error.
	Field []null.String `json:"field,omitempty"`
	// The error message.
	Message null.String `json:"message,omitempty"`
}

func (TranslationUserError) IsDisplayableError() {}

// Return type for `translationsRegister` mutation.
type TranslationsRegisterPayload struct {
	// The translations that were created or updated.
	Translations []*Translation `json:"translations,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*TranslationUserError `json:"userErrors,omitempty"`
}

// Return type for `translationsRemove` mutation.
type TranslationsRemovePayload struct {
	// The translations that were deleted.
	Translations []*Translation `json:"translations,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*TranslationUserError `json:"userErrors,omitempty"`
}

// Specifies the
// [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
// that are associated with a related marketing campaign.
type UTMInput struct {
	// The name of the UTM campaign.
	Campaign null.String `json:"campaign,omitempty"`
	// The name of the website or application where the referral link exists.
	Source null.String `json:"source,omitempty"`
	// The UTM campaign medium.
	Medium null.String `json:"medium,omitempty"`
}

// Represents a set of UTM parameters.
type UTMParameters struct {
	// The name of a marketing campaign.
	Campaign *null.String `json:"campaign,omitempty"`
	// Identifies specific content in a marketing campaign. Used to differentiate between similar content or links in a marketing campaign to determine which is the most effective.
	Content *null.String `json:"content,omitempty"`
	// The medium of a marketing campaign, such as a banner or email newsletter.
	Medium *null.String `json:"medium,omitempty"`
	// The source of traffic to the merchant's store, such as Google or an email newsletter.
	Source *null.String `json:"source,omitempty"`
	// Paid search terms used by a marketing campaign.
	Term *null.String `json:"term,omitempty"`
}

// Specifies the input fields required to update a media object.
type UpdateMediaInput struct {
	// Specifies the media to update.
	ID null.String `json:"id,omitempty"`
	// The source from which to update the media preview image. May be an external URL or signed upload URL.
	PreviewImageSource *null.String `json:"previewImageSource,omitempty"`
	// The alt text associated to the media.
	Alt *null.String `json:"alt,omitempty"`
}

// Represents an error in the input of a mutation.
type UserError struct {
	// Path to the input field which caused the error.
	Field []null.String `json:"field,omitempty"`
	// The error message.
	Message null.String `json:"message,omitempty"`
}

func (UserError) IsDisplayableError() {}

// Represents a Shopify hosted video.
type Video struct {
	// A word or phrase to share the nature or contents of a media.
	Alt *null.String `json:"alt,omitempty"`
	// The filename of the video.
	Filename null.String `json:"filename,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The media content type.
	MediaContentType MediaContentType `json:"mediaContentType,omitempty"`
	// Any errors which have occurred on the media.
	MediaErrors []*MediaError `json:"mediaErrors,omitempty"`
	// The original source for a video.
	OriginalSource *VideoSource `json:"originalSource,omitempty"`
	// The preview image for the media.
	Preview *MediaPreviewImage `json:"preview,omitempty"`
	// The sources for a video.
	Sources []*VideoSource `json:"sources,omitempty"`
	// Current status of the media.
	Status MediaStatus `json:"status,omitempty"`
}

func (Video) IsNode()  {}
func (Video) IsMedia() {}

// Represents a source for a Shopify hosted video.
type VideoSource struct {
	// The format of the video source.
	Format null.String `json:"format,omitempty"`
	// The height of the video.
	Height int `json:"height,omitempty"`
	// The video MIME type.
	MimeType null.String `json:"mimeType,omitempty"`
	// The URL of the video.
	URL null.String `json:"url,omitempty"`
	// The width of the video.
	Width int `json:"width,omitempty"`
}

// Amazon EventBridge event source.
type WebhookEventBridgeEndpoint struct {
	// ARN of this EventBridge event source.
	Arn null.String `json:"arn,omitempty"`
}

func (WebhookEventBridgeEndpoint) IsWebhookSubscriptionEndpoint() {}

// HTTP endpoint where POST requests will be made to.
type WebhookHTTPEndpoint struct {
	// URL of webhook endpoint to deliver webhooks to.
	CallbackURL null.String `json:"callbackUrl,omitempty"`
}

func (WebhookHTTPEndpoint) IsWebhookSubscriptionEndpoint() {}

// Represents a subscription to a webhook.
type WebhookSubscription struct {
	// URL where the webhook subscription should send the POST request when the event occurs.
	CallbackURL null.String `json:"callbackUrl,omitempty"`
	// The date and time when the webhook subscription was created.
	CreatedAt null.String `json:"createdAt,omitempty"`
	// Endpoint where webhooks will be delivered to.
	Endpoint WebhookSubscriptionEndpoint `json:"endpoint,omitempty"`
	// The format in which the webhook subscription should send the data.
	Format WebhookSubscriptionFormat `json:"format,omitempty"`
	// Globally unique identifier.
	ID null.String `json:"id,omitempty"`
	// The list of fields to be included in the webhook subscription.
	IncludeFields []null.String `json:"includeFields,omitempty"`
	// The ID of the corresponding resource in the REST Admin API.
	LegacyResourceID null.String `json:"legacyResourceId,omitempty"`
	// The list of namespaces for any metafields that should be included in the webhook subscription.
	MetafieldNamespaces []null.String `json:"metafieldNamespaces,omitempty"`
	// The type of event that triggers the webhook.
	Topic WebhookSubscriptionTopic `json:"topic,omitempty"`
	// The date and time when the webhook subscription was updated.
	UpdatedAt null.String `json:"updatedAt,omitempty"`
}

func (WebhookSubscription) IsNode()                   {}
func (WebhookSubscription) IsLegacyInteroperability() {}

// An auto-generated type for paginating through multiple WebhookSubscriptions.
type WebhookSubscriptionConnection struct {
	// A list of edges.
	Edges []*WebhookSubscriptionEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

// Return type for `webhookSubscriptionCreate` mutation.
type WebhookSubscriptionCreatePayload struct {
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
	// The webhook subscription that was created.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty"`
}

// Return type for `webhookSubscriptionDelete` mutation.
type WebhookSubscriptionDeletePayload struct {
	// The ID of the deleted webhook subscription.
	DeletedWebhookSubscriptionID *null.String `json:"deletedWebhookSubscriptionId,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// An auto-generated type which holds one WebhookSubscription and a cursor during pagination.
type WebhookSubscriptionEdge struct {
	// A cursor for use in pagination.
	Cursor null.String `json:"cursor,omitempty"`
	// The item at the end of WebhookSubscriptionEdge.
	Node *WebhookSubscription `json:"node,omitempty"`
}

// Specifies the input fields for a webhook subscription.
type WebhookSubscriptionInput struct {
	// URL where the webhook subscription should send the POST request when the event occurs.
	CallbackURL *null.String `json:"callbackUrl,omitempty"`
	// The format in which the webhook subscription should send the data.
	Format *WebhookSubscriptionFormat `json:"format,omitempty"`
	// The list of fields to be included in the webhook subscription.
	IncludeFields []null.String `json:"includeFields,omitempty"`
	// The list of namespaces for any metafields that should be included in the webhook subscription.
	MetafieldNamespaces []null.String `json:"metafieldNamespaces,omitempty"`
}

// Return type for `webhookSubscriptionUpdate` mutation.
type WebhookSubscriptionUpdatePayload struct {
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
	// The webhook subscription that was updated.
	WebhookSubscription *WebhookSubscription `json:"webhookSubscription,omitempty"`
}

// Represents weight unit and value.
type Weight struct {
	// Unit of measurement for `value`.
	Unit WeightUnit `json:"unit,omitempty"`
	// The weight using the unit system specified with `unit`.
	Value float64 `json:"value,omitempty"`
}

func (Weight) IsDeliveryConditionCriteria() {}

// Specifies the weight unit and value inputs.
type WeightInput struct {
	// The weight value using the unit system specified with `weight_unit`.
	Value float64 `json:"value,omitempty"`
	// Unit of measurement for `value`.
	Unit WeightUnit `json:"unit,omitempty"`
}

// Return type for `deliveryProfileCreate` mutation.
type DeliveryProfileCreatePayload struct {
	// The delivery profile that was created.
	Profile *DeliveryProfile `json:"profile,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `deliveryProfileRemove` mutation.
type DeliveryProfileRemovePayload struct {
	// The profile deletion job triggered by the mutation.
	Job *Job `json:"job,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Return type for `deliveryProfileUpdate` mutation.
type DeliveryProfileUpdatePayload struct {
	// The delivery profile that was updated.
	Profile *DeliveryProfile `json:"profile,omitempty"`
	// List of errors that occurred executing the mutation.
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// Possible categories of an app installation.
type AppInstallationCategory string

const (
	// Sales channel apps.
	AppInstallationCategoryChannel AppInstallationCategory = "CHANNEL"
	// Apps that can be used in the POS mobile client.
	AppInstallationCategoryPosEmbedded AppInstallationCategory = "POS_EMBEDDED"
)

var AllAppInstallationCategory = []AppInstallationCategory{
	AppInstallationCategoryChannel,
	AppInstallationCategoryPosEmbedded,
}

func (e AppInstallationCategory) IsValid() bool {
	switch e {
	case AppInstallationCategoryChannel, AppInstallationCategoryPosEmbedded:
		return true
	}
	return false
}

func (e AppInstallationCategory) String() string {
	return string(e)
}

func (e *AppInstallationCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppInstallationCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppInstallationCategory", str)
	}
	return nil
}

func (e AppInstallationCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible privacy types of an app installation.
type AppInstallationPrivacy string

const (
	AppInstallationPrivacyPublic  AppInstallationPrivacy = "PUBLIC"
	AppInstallationPrivacyPrivate AppInstallationPrivacy = "PRIVATE"
)

var AllAppInstallationPrivacy = []AppInstallationPrivacy{
	AppInstallationPrivacyPublic,
	AppInstallationPrivacyPrivate,
}

func (e AppInstallationPrivacy) IsValid() bool {
	switch e {
	case AppInstallationPrivacyPublic, AppInstallationPrivacyPrivate:
		return true
	}
	return false
}

func (e AppInstallationPrivacy) String() string {
	return string(e)
}

func (e *AppInstallationPrivacy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppInstallationPrivacy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppInstallationPrivacy", str)
	}
	return nil
}

func (e AppInstallationPrivacy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the AppInstallation query.
type AppInstallationSortKeys string

const (
	// Sort by the `installed_at` value.
	AppInstallationSortKeysInstalledAt AppInstallationSortKeys = "INSTALLED_AT"
	// Sort by the `app_title` value.
	AppInstallationSortKeysAppTitle AppInstallationSortKeys = "APP_TITLE"
	// Sort by the `id` value.
	AppInstallationSortKeysID AppInstallationSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	AppInstallationSortKeysRelevance AppInstallationSortKeys = "RELEVANCE"
)

var AllAppInstallationSortKeys = []AppInstallationSortKeys{
	AppInstallationSortKeysInstalledAt,
	AppInstallationSortKeysAppTitle,
	AppInstallationSortKeysID,
	AppInstallationSortKeysRelevance,
}

func (e AppInstallationSortKeys) IsValid() bool {
	switch e {
	case AppInstallationSortKeysInstalledAt, AppInstallationSortKeysAppTitle, AppInstallationSortKeysID, AppInstallationSortKeysRelevance:
		return true
	}
	return false
}

func (e AppInstallationSortKeys) String() string {
	return string(e)
}

func (e *AppInstallationSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppInstallationSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppInstallationSortKeys", str)
	}
	return nil
}

func (e AppInstallationSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The billing frequency for the app.
type AppPricingInterval string

const (
	// The merchant is billed for this app annually.
	AppPricingIntervalAnnual AppPricingInterval = "ANNUAL"
	// The merchant is billed for this app every 30 days.
	AppPricingIntervalEvery30Days AppPricingInterval = "EVERY_30_DAYS"
)

var AllAppPricingInterval = []AppPricingInterval{
	AppPricingIntervalAnnual,
	AppPricingIntervalEvery30Days,
}

func (e AppPricingInterval) IsValid() bool {
	switch e {
	case AppPricingIntervalAnnual, AppPricingIntervalEvery30Days:
		return true
	}
	return false
}

func (e AppPricingInterval) String() string {
	return string(e)
}

func (e *AppPricingInterval) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppPricingInterval(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppPricingInterval", str)
	}
	return nil
}

func (e AppPricingInterval) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of the purchase.
type AppPurchaseStatus string

const (
	// The app purchase has been approved by the merchant and is ready to be activated by the app. App purchases created through the GraphQL Admin API are activated upon approval.
	AppPurchaseStatusAccepted AppPurchaseStatus = "ACCEPTED"
	// The app purchase has been activated by the app. Active app purchases are charged to the store and partners receive payouts for active app purchase.
	AppPurchaseStatusActive AppPurchaseStatus = "ACTIVE"
	// The app purchase was declined by the merchant.
	AppPurchaseStatusDeclined AppPurchaseStatus = "DECLINED"
	// The app purchase was not accepted within 2 days of being created.
	AppPurchaseStatusExpired AppPurchaseStatus = "EXPIRED"
	// The app purchase is pending approval by the merchant.
	AppPurchaseStatusPending AppPurchaseStatus = "PENDING"
)

var AllAppPurchaseStatus = []AppPurchaseStatus{
	AppPurchaseStatusAccepted,
	AppPurchaseStatusActive,
	AppPurchaseStatusDeclined,
	AppPurchaseStatusExpired,
	AppPurchaseStatusPending,
}

func (e AppPurchaseStatus) IsValid() bool {
	switch e {
	case AppPurchaseStatusAccepted, AppPurchaseStatusActive, AppPurchaseStatusDeclined, AppPurchaseStatusExpired, AppPurchaseStatusPending:
		return true
	}
	return false
}

func (e AppPurchaseStatus) String() string {
	return string(e)
}

func (e *AppPurchaseStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppPurchaseStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppPurchaseStatus", str)
	}
	return nil
}

func (e AppPurchaseStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the AppSubscription query.
type AppSubscriptionSortKeys string

const (
	// Sort by the `created_at` value.
	AppSubscriptionSortKeysCreatedAt AppSubscriptionSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	AppSubscriptionSortKeysID AppSubscriptionSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	AppSubscriptionSortKeysRelevance AppSubscriptionSortKeys = "RELEVANCE"
)

var AllAppSubscriptionSortKeys = []AppSubscriptionSortKeys{
	AppSubscriptionSortKeysCreatedAt,
	AppSubscriptionSortKeysID,
	AppSubscriptionSortKeysRelevance,
}

func (e AppSubscriptionSortKeys) IsValid() bool {
	switch e {
	case AppSubscriptionSortKeysCreatedAt, AppSubscriptionSortKeysID, AppSubscriptionSortKeysRelevance:
		return true
	}
	return false
}

func (e AppSubscriptionSortKeys) String() string {
	return string(e)
}

func (e *AppSubscriptionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppSubscriptionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppSubscriptionSortKeys", str)
	}
	return nil
}

func (e AppSubscriptionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of the app subscription.
type AppSubscriptionStatus string

const (
	// The app subscription is pending approval by the merchant.
	AppSubscriptionStatusPending AppSubscriptionStatus = "PENDING"
	// The app subscription has been approved by the merchant and is ready to be activated by the app. App subscriptions created through the GraphQL Admin API are activated upon approval.
	AppSubscriptionStatusAccepted AppSubscriptionStatus = "ACCEPTED"
	// The app subscription has been activated by the app. Active app subscriptions are charged to the store and partners recieve payouts for active app subscriptions.
	AppSubscriptionStatusActive AppSubscriptionStatus = "ACTIVE"
	// The app subscription was declined by the merchant.
	AppSubscriptionStatusDeclined AppSubscriptionStatus = "DECLINED"
	// The app subscription was not accepted within 2 days of being created.
	AppSubscriptionStatusExpired AppSubscriptionStatus = "EXPIRED"
	// The app subscription is on hold due to a store subscription non-payment. The charge will re-activate once subscription payments resume.
	AppSubscriptionStatusFrozen AppSubscriptionStatus = "FROZEN"
	// The app subscription was cancelled by the app.
	AppSubscriptionStatusCancelled AppSubscriptionStatus = "CANCELLED"
)

var AllAppSubscriptionStatus = []AppSubscriptionStatus{
	AppSubscriptionStatusPending,
	AppSubscriptionStatusAccepted,
	AppSubscriptionStatusActive,
	AppSubscriptionStatusDeclined,
	AppSubscriptionStatusExpired,
	AppSubscriptionStatusFrozen,
	AppSubscriptionStatusCancelled,
}

func (e AppSubscriptionStatus) IsValid() bool {
	switch e {
	case AppSubscriptionStatusPending, AppSubscriptionStatusAccepted, AppSubscriptionStatusActive, AppSubscriptionStatusDeclined, AppSubscriptionStatusExpired, AppSubscriptionStatusFrozen, AppSubscriptionStatusCancelled:
		return true
	}
	return false
}

func (e AppSubscriptionStatus) String() string {
	return string(e)
}

func (e *AppSubscriptionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppSubscriptionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppSubscriptionStatus", str)
	}
	return nil
}

func (e AppSubscriptionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the AppTransaction query.
type AppTransactionSortKeys string

const (
	// Sort by the `created_at` value.
	AppTransactionSortKeysCreatedAt AppTransactionSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	AppTransactionSortKeysID AppTransactionSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	AppTransactionSortKeysRelevance AppTransactionSortKeys = "RELEVANCE"
)

var AllAppTransactionSortKeys = []AppTransactionSortKeys{
	AppTransactionSortKeysCreatedAt,
	AppTransactionSortKeysID,
	AppTransactionSortKeysRelevance,
}

func (e AppTransactionSortKeys) IsValid() bool {
	switch e {
	case AppTransactionSortKeysCreatedAt, AppTransactionSortKeysID, AppTransactionSortKeysRelevance:
		return true
	}
	return false
}

func (e AppTransactionSortKeys) String() string {
	return string(e)
}

func (e *AppTransactionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppTransactionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppTransactionSortKeys", str)
	}
	return nil
}

func (e AppTransactionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the AppUsageRecord query.
type AppUsageRecordSortKeys string

const (
	// Sort by the `created_at` value.
	AppUsageRecordSortKeysCreatedAt AppUsageRecordSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	AppUsageRecordSortKeysID AppUsageRecordSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	AppUsageRecordSortKeysRelevance AppUsageRecordSortKeys = "RELEVANCE"
)

var AllAppUsageRecordSortKeys = []AppUsageRecordSortKeys{
	AppUsageRecordSortKeysCreatedAt,
	AppUsageRecordSortKeysID,
	AppUsageRecordSortKeysRelevance,
}

func (e AppUsageRecordSortKeys) IsValid() bool {
	switch e {
	case AppUsageRecordSortKeysCreatedAt, AppUsageRecordSortKeysID, AppUsageRecordSortKeysRelevance:
		return true
	}
	return false
}

func (e AppUsageRecordSortKeys) String() string {
	return string(e)
}

func (e *AppUsageRecordSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppUsageRecordSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppUsageRecordSortKeys", str)
	}
	return nil
}

func (e AppUsageRecordSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the AutomaticDiscount query.
type AutomaticDiscountSortKeys string

const (
	// Sort by the `created_at` value.
	AutomaticDiscountSortKeysCreatedAt AutomaticDiscountSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	AutomaticDiscountSortKeysID AutomaticDiscountSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	AutomaticDiscountSortKeysRelevance AutomaticDiscountSortKeys = "RELEVANCE"
)

var AllAutomaticDiscountSortKeys = []AutomaticDiscountSortKeys{
	AutomaticDiscountSortKeysCreatedAt,
	AutomaticDiscountSortKeysID,
	AutomaticDiscountSortKeysRelevance,
}

func (e AutomaticDiscountSortKeys) IsValid() bool {
	switch e {
	case AutomaticDiscountSortKeysCreatedAt, AutomaticDiscountSortKeysID, AutomaticDiscountSortKeysRelevance:
		return true
	}
	return false
}

func (e AutomaticDiscountSortKeys) String() string {
	return string(e)
}

func (e *AutomaticDiscountSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AutomaticDiscountSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AutomaticDiscountSortKeys", str)
	}
	return nil
}

func (e AutomaticDiscountSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that could be returned by BillingAttemptUserError.
type BillingAttemptUserErrorCode string

const (
	// Input value is invalid.
	BillingAttemptUserErrorCodeInvalid BillingAttemptUserErrorCode = "INVALID"
	// Input value is blank.
	BillingAttemptUserErrorCodeBlank BillingAttemptUserErrorCode = "BLANK"
	// Subscription contract does not exist.
	BillingAttemptUserErrorCodeContractNotFound BillingAttemptUserErrorCode = "CONTRACT_NOT_FOUND"
)

var AllBillingAttemptUserErrorCode = []BillingAttemptUserErrorCode{
	BillingAttemptUserErrorCodeInvalid,
	BillingAttemptUserErrorCodeBlank,
	BillingAttemptUserErrorCodeContractNotFound,
}

func (e BillingAttemptUserErrorCode) IsValid() bool {
	switch e {
	case BillingAttemptUserErrorCodeInvalid, BillingAttemptUserErrorCodeBlank, BillingAttemptUserErrorCodeContractNotFound:
		return true
	}
	return false
}

func (e BillingAttemptUserErrorCode) String() string {
	return string(e)
}

func (e *BillingAttemptUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BillingAttemptUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BillingAttemptUserErrorCode", str)
	}
	return nil
}

func (e BillingAttemptUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Error codes for failed bulk operations.
type BulkOperationErrorCode string

const (
	// The provided operation `query` returned access denied due to missing
	// [access scopes](https://help.shopify.com/api/getting-started/authentication/oauth/scopes).
	// Review the requested object permissions and execute the query as a normal non-bulk GraphQL request to see more details.
	BulkOperationErrorCodeAccessDenied BulkOperationErrorCode = "ACCESS_DENIED"
	// Operation resulted in partial or incomplete data due to internal server errors during execution.
	BulkOperationErrorCodeInternalServerError BulkOperationErrorCode = "INTERNAL_SERVER_ERROR"
	// Operation resulted in partial or incomplete data due to query timeouts during execution.
	// In some cases, timeouts can be avoided by modifying your `query` to select fewer fields.
	BulkOperationErrorCodeTimeout BulkOperationErrorCode = "TIMEOUT"
)

var AllBulkOperationErrorCode = []BulkOperationErrorCode{
	BulkOperationErrorCodeAccessDenied,
	BulkOperationErrorCodeInternalServerError,
	BulkOperationErrorCodeTimeout,
}

func (e BulkOperationErrorCode) IsValid() bool {
	switch e {
	case BulkOperationErrorCodeAccessDenied, BulkOperationErrorCodeInternalServerError, BulkOperationErrorCodeTimeout:
		return true
	}
	return false
}

func (e BulkOperationErrorCode) String() string {
	return string(e)
}

func (e *BulkOperationErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BulkOperationErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BulkOperationErrorCode", str)
	}
	return nil
}

func (e BulkOperationErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Statuses of a bulk operation.
type BulkOperationStatus string

const (
	// Operation created.
	BulkOperationStatusCreated BulkOperationStatus = "CREATED"
	// Operation running.
	BulkOperationStatusRunning BulkOperationStatus = "RUNNING"
	// Operation completed.
	BulkOperationStatusCompleted BulkOperationStatus = "COMPLETED"
	// Operation canceling.
	BulkOperationStatusCanceling BulkOperationStatus = "CANCELING"
	// Operation canceled.
	BulkOperationStatusCanceled BulkOperationStatus = "CANCELED"
	// Operation failed.
	BulkOperationStatusFailed BulkOperationStatus = "FAILED"
	// Operation URL has expired.
	BulkOperationStatusExpired BulkOperationStatus = "EXPIRED"
)

var AllBulkOperationStatus = []BulkOperationStatus{
	BulkOperationStatusCreated,
	BulkOperationStatusRunning,
	BulkOperationStatusCompleted,
	BulkOperationStatusCanceling,
	BulkOperationStatusCanceled,
	BulkOperationStatusFailed,
	BulkOperationStatusExpired,
}

func (e BulkOperationStatus) IsValid() bool {
	switch e {
	case BulkOperationStatusCreated, BulkOperationStatusRunning, BulkOperationStatusCompleted, BulkOperationStatusCanceling, BulkOperationStatusCanceled, BulkOperationStatusFailed, BulkOperationStatusExpired:
		return true
	}
	return false
}

func (e BulkOperationStatus) String() string {
	return string(e)
}

func (e *BulkOperationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BulkOperationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BulkOperationStatus", str)
	}
	return nil
}

func (e BulkOperationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the CodeDiscount query.
type CodeDiscountSortKeys string

const (
	// Sort by the `starts_at` value.
	CodeDiscountSortKeysStartsAt CodeDiscountSortKeys = "STARTS_AT"
	// Sort by the `ends_at` value.
	CodeDiscountSortKeysEndsAt CodeDiscountSortKeys = "ENDS_AT"
	// Sort by the `title` value.
	CodeDiscountSortKeysTitle CodeDiscountSortKeys = "TITLE"
	// Sort by the `created_at` value.
	CodeDiscountSortKeysCreatedAt CodeDiscountSortKeys = "CREATED_AT"
	// Sort by the `updated_at` value.
	CodeDiscountSortKeysUpdatedAt CodeDiscountSortKeys = "UPDATED_AT"
	// Sort by the `id` value.
	CodeDiscountSortKeysID CodeDiscountSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	CodeDiscountSortKeysRelevance CodeDiscountSortKeys = "RELEVANCE"
)

var AllCodeDiscountSortKeys = []CodeDiscountSortKeys{
	CodeDiscountSortKeysStartsAt,
	CodeDiscountSortKeysEndsAt,
	CodeDiscountSortKeysTitle,
	CodeDiscountSortKeysCreatedAt,
	CodeDiscountSortKeysUpdatedAt,
	CodeDiscountSortKeysID,
	CodeDiscountSortKeysRelevance,
}

func (e CodeDiscountSortKeys) IsValid() bool {
	switch e {
	case CodeDiscountSortKeysStartsAt, CodeDiscountSortKeysEndsAt, CodeDiscountSortKeysTitle, CodeDiscountSortKeysCreatedAt, CodeDiscountSortKeysUpdatedAt, CodeDiscountSortKeysID, CodeDiscountSortKeysRelevance:
		return true
	}
	return false
}

func (e CodeDiscountSortKeys) String() string {
	return string(e)
}

func (e *CodeDiscountSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CodeDiscountSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CodeDiscountSortKeys", str)
	}
	return nil
}

func (e CodeDiscountSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the property of a product being used to populate the smart collection.
type CollectionRuleColumn string

const (
	// The `tag` attribute.
	CollectionRuleColumnTag CollectionRuleColumn = "TAG"
	// The `title` attribute.
	CollectionRuleColumnTitle CollectionRuleColumn = "TITLE"
	// The `type` attribute.
	CollectionRuleColumnType CollectionRuleColumn = "TYPE"
	// The `vendor` attribute.
	CollectionRuleColumnVendor CollectionRuleColumn = "VENDOR"
	// The `variant_price` attribute.
	CollectionRuleColumnVariantPrice CollectionRuleColumn = "VARIANT_PRICE"
	// The `is_price_reduced` attribute.
	CollectionRuleColumnIsPriceReduced CollectionRuleColumn = "IS_PRICE_REDUCED"
	// The `variant_compare_at_price` attribute.
	CollectionRuleColumnVariantCompareAtPrice CollectionRuleColumn = "VARIANT_COMPARE_AT_PRICE"
	// The `variant_weight` attribute.
	CollectionRuleColumnVariantWeight CollectionRuleColumn = "VARIANT_WEIGHT"
	// The `variant_inventory` attribute.
	CollectionRuleColumnVariantInventory CollectionRuleColumn = "VARIANT_INVENTORY"
	// The `variant_title` attribute.
	CollectionRuleColumnVariantTitle CollectionRuleColumn = "VARIANT_TITLE"
)

var AllCollectionRuleColumn = []CollectionRuleColumn{
	CollectionRuleColumnTag,
	CollectionRuleColumnTitle,
	CollectionRuleColumnType,
	CollectionRuleColumnVendor,
	CollectionRuleColumnVariantPrice,
	CollectionRuleColumnIsPriceReduced,
	CollectionRuleColumnVariantCompareAtPrice,
	CollectionRuleColumnVariantWeight,
	CollectionRuleColumnVariantInventory,
	CollectionRuleColumnVariantTitle,
}

func (e CollectionRuleColumn) IsValid() bool {
	switch e {
	case CollectionRuleColumnTag, CollectionRuleColumnTitle, CollectionRuleColumnType, CollectionRuleColumnVendor, CollectionRuleColumnVariantPrice, CollectionRuleColumnIsPriceReduced, CollectionRuleColumnVariantCompareAtPrice, CollectionRuleColumnVariantWeight, CollectionRuleColumnVariantInventory, CollectionRuleColumnVariantTitle:
		return true
	}
	return false
}

func (e CollectionRuleColumn) String() string {
	return string(e)
}

func (e *CollectionRuleColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CollectionRuleColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CollectionRuleColumn", str)
	}
	return nil
}

func (e CollectionRuleColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the relationship between the `column` and the condition.
type CollectionRuleRelation string

const (
	// The attribute contains the condition.
	CollectionRuleRelationContains CollectionRuleRelation = "CONTAINS"
	// The attribute ends with the condition.
	CollectionRuleRelationEndsWith CollectionRuleRelation = "ENDS_WITH"
	// The attribute is equal to the condition.
	CollectionRuleRelationEquals CollectionRuleRelation = "EQUALS"
	// The attribute is greater than the condition.
	CollectionRuleRelationGreaterThan CollectionRuleRelation = "GREATER_THAN"
	// The attribute is not set.
	CollectionRuleRelationIsNotSet CollectionRuleRelation = "IS_NOT_SET"
	// The attribute is set.
	CollectionRuleRelationIsSet CollectionRuleRelation = "IS_SET"
	// The attribute is less than the condition.
	CollectionRuleRelationLessThan CollectionRuleRelation = "LESS_THAN"
	// The attribute does not contain the condition.
	CollectionRuleRelationNotContains CollectionRuleRelation = "NOT_CONTAINS"
	// The attribute does not equal the condition.
	CollectionRuleRelationNotEquals CollectionRuleRelation = "NOT_EQUALS"
	// The attribute starts with the condition.
	CollectionRuleRelationStartsWith CollectionRuleRelation = "STARTS_WITH"
)

var AllCollectionRuleRelation = []CollectionRuleRelation{
	CollectionRuleRelationContains,
	CollectionRuleRelationEndsWith,
	CollectionRuleRelationEquals,
	CollectionRuleRelationGreaterThan,
	CollectionRuleRelationIsNotSet,
	CollectionRuleRelationIsSet,
	CollectionRuleRelationLessThan,
	CollectionRuleRelationNotContains,
	CollectionRuleRelationNotEquals,
	CollectionRuleRelationStartsWith,
}

func (e CollectionRuleRelation) IsValid() bool {
	switch e {
	case CollectionRuleRelationContains, CollectionRuleRelationEndsWith, CollectionRuleRelationEquals, CollectionRuleRelationGreaterThan, CollectionRuleRelationIsNotSet, CollectionRuleRelationIsSet, CollectionRuleRelationLessThan, CollectionRuleRelationNotContains, CollectionRuleRelationNotEquals, CollectionRuleRelationStartsWith:
		return true
	}
	return false
}

func (e CollectionRuleRelation) String() string {
	return string(e)
}

func (e *CollectionRuleRelation) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CollectionRuleRelation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CollectionRuleRelation", str)
	}
	return nil
}

func (e CollectionRuleRelation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Collection query.
type CollectionSortKeys string

const (
	// Sort by the `title` value.
	CollectionSortKeysTitle CollectionSortKeys = "TITLE"
	// Sort by the `updated_at` value.
	CollectionSortKeysUpdatedAt CollectionSortKeys = "UPDATED_AT"
	// Sort by the `id` value.
	CollectionSortKeysID CollectionSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	CollectionSortKeysRelevance CollectionSortKeys = "RELEVANCE"
)

var AllCollectionSortKeys = []CollectionSortKeys{
	CollectionSortKeysTitle,
	CollectionSortKeysUpdatedAt,
	CollectionSortKeysID,
	CollectionSortKeysRelevance,
}

func (e CollectionSortKeys) IsValid() bool {
	switch e {
	case CollectionSortKeysTitle, CollectionSortKeysUpdatedAt, CollectionSortKeysID, CollectionSortKeysRelevance:
		return true
	}
	return false
}

func (e CollectionSortKeys) String() string {
	return string(e)
}

func (e *CollectionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CollectionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CollectionSortKeys", str)
	}
	return nil
}

func (e CollectionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the sort order for the products in the collection.
type CollectionSortOrder string

const (
	// Alphabetically, in ascending order (A - Z).
	CollectionSortOrderAlphaAsc CollectionSortOrder = "ALPHA_ASC"
	// Alphabetically, in descending order (Z - A).
	CollectionSortOrderAlphaDesc CollectionSortOrder = "ALPHA_DESC"
	// By best-selling products.
	CollectionSortOrderBestSelling CollectionSortOrder = "BEST_SELLING"
	// By date created, in ascending order (oldest - newest).
	CollectionSortOrderCreated CollectionSortOrder = "CREATED"
	// By date created, in descending order (newest - oldest).
	CollectionSortOrderCreatedDesc CollectionSortOrder = "CREATED_DESC"
	// In the order set manually by the merchant.
	CollectionSortOrderManual CollectionSortOrder = "MANUAL"
	// By price, in ascending order (lowest - highest).
	CollectionSortOrderPriceAsc CollectionSortOrder = "PRICE_ASC"
	// By price, in descending order (highest - lowest).
	CollectionSortOrderPriceDesc CollectionSortOrder = "PRICE_DESC"
)

var AllCollectionSortOrder = []CollectionSortOrder{
	CollectionSortOrderAlphaAsc,
	CollectionSortOrderAlphaDesc,
	CollectionSortOrderBestSelling,
	CollectionSortOrderCreated,
	CollectionSortOrderCreatedDesc,
	CollectionSortOrderManual,
	CollectionSortOrderPriceAsc,
	CollectionSortOrderPriceDesc,
}

func (e CollectionSortOrder) IsValid() bool {
	switch e {
	case CollectionSortOrderAlphaAsc, CollectionSortOrderAlphaDesc, CollectionSortOrderBestSelling, CollectionSortOrderCreated, CollectionSortOrderCreatedDesc, CollectionSortOrderManual, CollectionSortOrderPriceAsc, CollectionSortOrderPriceDesc:
		return true
	}
	return false
}

func (e CollectionSortOrder) String() string {
	return string(e)
}

func (e *CollectionSortOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CollectionSortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CollectionSortOrder", str)
	}
	return nil
}

func (e CollectionSortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// ISO 3166-1 alpha-2 country codes with some differences.
type CountryCode string

const (
	// Afghanistan.
	CountryCodeAf CountryCode = "AF"
	// Åland Islands.
	CountryCodeAx CountryCode = "AX"
	// Albania.
	CountryCodeAl CountryCode = "AL"
	// Algeria.
	CountryCodeDz CountryCode = "DZ"
	// Andorra.
	CountryCodeAd CountryCode = "AD"
	// Angola.
	CountryCodeAo CountryCode = "AO"
	// Anguilla.
	CountryCodeAi CountryCode = "AI"
	// Antigua & Barbuda.
	CountryCodeAg CountryCode = "AG"
	// Argentina.
	CountryCodeAr CountryCode = "AR"
	// Armenia.
	CountryCodeAm CountryCode = "AM"
	// Aruba.
	CountryCodeAw CountryCode = "AW"
	// Ascension Island.
	CountryCodeAc CountryCode = "AC"
	// Australia.
	CountryCodeAu CountryCode = "AU"
	// Austria.
	CountryCodeAt CountryCode = "AT"
	// Azerbaijan.
	CountryCodeAz CountryCode = "AZ"
	// Bahamas.
	CountryCodeBs CountryCode = "BS"
	// Bahrain.
	CountryCodeBh CountryCode = "BH"
	// Bangladesh.
	CountryCodeBd CountryCode = "BD"
	// Barbados.
	CountryCodeBb CountryCode = "BB"
	// Belarus.
	CountryCodeBy CountryCode = "BY"
	// Belgium.
	CountryCodeBe CountryCode = "BE"
	// Belize.
	CountryCodeBz CountryCode = "BZ"
	// Benin.
	CountryCodeBj CountryCode = "BJ"
	// Bermuda.
	CountryCodeBm CountryCode = "BM"
	// Bhutan.
	CountryCodeBt CountryCode = "BT"
	// Bolivia.
	CountryCodeBo CountryCode = "BO"
	// Bosnia & Herzegovina.
	CountryCodeBa CountryCode = "BA"
	// Botswana.
	CountryCodeBw CountryCode = "BW"
	// Bouvet Island.
	CountryCodeBv CountryCode = "BV"
	// Brazil.
	CountryCodeBr CountryCode = "BR"
	// British Indian Ocean Territory.
	CountryCodeIo CountryCode = "IO"
	// Brunei.
	CountryCodeBn CountryCode = "BN"
	// Bulgaria.
	CountryCodeBg CountryCode = "BG"
	// Burkina Faso.
	CountryCodeBf CountryCode = "BF"
	// Burundi.
	CountryCodeBi CountryCode = "BI"
	// Cambodia.
	CountryCodeKh CountryCode = "KH"
	// Canada.
	CountryCodeCa CountryCode = "CA"
	// Cape Verde.
	CountryCodeCv CountryCode = "CV"
	// Caribbean Netherlands.
	CountryCodeBq CountryCode = "BQ"
	// Cayman Islands.
	CountryCodeKy CountryCode = "KY"
	// Central African Republic.
	CountryCodeCf CountryCode = "CF"
	// Chad.
	CountryCodeTd CountryCode = "TD"
	// Chile.
	CountryCodeCl CountryCode = "CL"
	// China.
	CountryCodeCn CountryCode = "CN"
	// Christmas Island.
	CountryCodeCx CountryCode = "CX"
	// Cocos (Keeling) Islands.
	CountryCodeCc CountryCode = "CC"
	// Colombia.
	CountryCodeCo CountryCode = "CO"
	// Comoros.
	CountryCodeKm CountryCode = "KM"
	// Congo - Brazzaville.
	CountryCodeCg CountryCode = "CG"
	// Congo - Kinshasa.
	CountryCodeCd CountryCode = "CD"
	// Cook Islands.
	CountryCodeCk CountryCode = "CK"
	// Costa Rica.
	CountryCodeCr CountryCode = "CR"
	// Croatia.
	CountryCodeHr CountryCode = "HR"
	// Cuba.
	CountryCodeCu CountryCode = "CU"
	// Curaçao.
	CountryCodeCw CountryCode = "CW"
	// Cyprus.
	CountryCodeCy CountryCode = "CY"
	// Czechia.
	CountryCodeCz CountryCode = "CZ"
	// Côte d’Ivoire.
	CountryCodeCi CountryCode = "CI"
	// Denmark.
	CountryCodeDk CountryCode = "DK"
	// Djibouti.
	CountryCodeDj CountryCode = "DJ"
	// Dominica.
	CountryCodeDm CountryCode = "DM"
	// Dominican Republic.
	CountryCodeDo CountryCode = "DO"
	// Ecuador.
	CountryCodeEc CountryCode = "EC"
	// Egypt.
	CountryCodeEg CountryCode = "EG"
	// El Salvador.
	CountryCodeSv CountryCode = "SV"
	// Equatorial Guinea.
	CountryCodeGq CountryCode = "GQ"
	// Eritrea.
	CountryCodeEr CountryCode = "ER"
	// Estonia.
	CountryCodeEe CountryCode = "EE"
	// Eswatini.
	CountryCodeSz CountryCode = "SZ"
	// Ethiopia.
	CountryCodeEt CountryCode = "ET"
	// Falkland Islands.
	CountryCodeFk CountryCode = "FK"
	// Faroe Islands.
	CountryCodeFo CountryCode = "FO"
	// Fiji.
	CountryCodeFj CountryCode = "FJ"
	// Finland.
	CountryCodeFi CountryCode = "FI"
	// France.
	CountryCodeFr CountryCode = "FR"
	// French Guiana.
	CountryCodeGf CountryCode = "GF"
	// French Polynesia.
	CountryCodePf CountryCode = "PF"
	// French Southern Territories.
	CountryCodeTf CountryCode = "TF"
	// Gabon.
	CountryCodeGa CountryCode = "GA"
	// Gambia.
	CountryCodeGm CountryCode = "GM"
	// Georgia.
	CountryCodeGe CountryCode = "GE"
	// Germany.
	CountryCodeDe CountryCode = "DE"
	// Ghana.
	CountryCodeGh CountryCode = "GH"
	// Gibraltar.
	CountryCodeGi CountryCode = "GI"
	// Greece.
	CountryCodeGr CountryCode = "GR"
	// Greenland.
	CountryCodeGl CountryCode = "GL"
	// Grenada.
	CountryCodeGd CountryCode = "GD"
	// Guadeloupe.
	CountryCodeGp CountryCode = "GP"
	// Guatemala.
	CountryCodeGt CountryCode = "GT"
	// Guernsey.
	CountryCodeGg CountryCode = "GG"
	// Guinea.
	CountryCodeGn CountryCode = "GN"
	// Guinea-Bissau.
	CountryCodeGw CountryCode = "GW"
	// Guyana.
	CountryCodeGy CountryCode = "GY"
	// Haiti.
	CountryCodeHt CountryCode = "HT"
	// Heard & McDonald Islands.
	CountryCodeHm CountryCode = "HM"
	// Vatican City.
	CountryCodeVa CountryCode = "VA"
	// Honduras.
	CountryCodeHn CountryCode = "HN"
	// Hong Kong SAR.
	CountryCodeHk CountryCode = "HK"
	// Hungary.
	CountryCodeHu CountryCode = "HU"
	// Iceland.
	CountryCodeIs CountryCode = "IS"
	// India.
	CountryCodeIn CountryCode = "IN"
	// Indonesia.
	CountryCodeID CountryCode = "ID"
	// Iran.
	CountryCodeIr CountryCode = "IR"
	// Iraq.
	CountryCodeIq CountryCode = "IQ"
	// Ireland.
	CountryCodeIe CountryCode = "IE"
	// Isle of Man.
	CountryCodeIm CountryCode = "IM"
	// Israel.
	CountryCodeIl CountryCode = "IL"
	// Italy.
	CountryCodeIt CountryCode = "IT"
	// Jamaica.
	CountryCodeJm CountryCode = "JM"
	// Japan.
	CountryCodeJp CountryCode = "JP"
	// Jersey.
	CountryCodeJe CountryCode = "JE"
	// Jordan.
	CountryCodeJo CountryCode = "JO"
	// Kazakhstan.
	CountryCodeKz CountryCode = "KZ"
	// Kenya.
	CountryCodeKe CountryCode = "KE"
	// Kiribati.
	CountryCodeKi CountryCode = "KI"
	// North Korea.
	CountryCodeKp CountryCode = "KP"
	// Kosovo.
	CountryCodeXk CountryCode = "XK"
	// Kuwait.
	CountryCodeKw CountryCode = "KW"
	// Kyrgyzstan.
	CountryCodeKg CountryCode = "KG"
	// Laos.
	CountryCodeLa CountryCode = "LA"
	// Latvia.
	CountryCodeLv CountryCode = "LV"
	// Lebanon.
	CountryCodeLb CountryCode = "LB"
	// Lesotho.
	CountryCodeLs CountryCode = "LS"
	// Liberia.
	CountryCodeLr CountryCode = "LR"
	// Libya.
	CountryCodeLy CountryCode = "LY"
	// Liechtenstein.
	CountryCodeLi CountryCode = "LI"
	// Lithuania.
	CountryCodeLt CountryCode = "LT"
	// Luxembourg.
	CountryCodeLu CountryCode = "LU"
	// Macao SAR.
	CountryCodeMo CountryCode = "MO"
	// Madagascar.
	CountryCodeMg CountryCode = "MG"
	// Malawi.
	CountryCodeMw CountryCode = "MW"
	// Malaysia.
	CountryCodeMy CountryCode = "MY"
	// Maldives.
	CountryCodeMv CountryCode = "MV"
	// Mali.
	CountryCodeMl CountryCode = "ML"
	// Malta.
	CountryCodeMt CountryCode = "MT"
	// Martinique.
	CountryCodeMq CountryCode = "MQ"
	// Mauritania.
	CountryCodeMr CountryCode = "MR"
	// Mauritius.
	CountryCodeMu CountryCode = "MU"
	// Mayotte.
	CountryCodeYt CountryCode = "YT"
	// Mexico.
	CountryCodeMx CountryCode = "MX"
	// Moldova.
	CountryCodeMd CountryCode = "MD"
	// Monaco.
	CountryCodeMc CountryCode = "MC"
	// Mongolia.
	CountryCodeMn CountryCode = "MN"
	// Montenegro.
	CountryCodeMe CountryCode = "ME"
	// Montserrat.
	CountryCodeMs CountryCode = "MS"
	// Morocco.
	CountryCodeMa CountryCode = "MA"
	// Mozambique.
	CountryCodeMz CountryCode = "MZ"
	// Myanmar (Burma).
	CountryCodeMm CountryCode = "MM"
	// Namibia.
	CountryCodeNa CountryCode = "NA"
	// Nauru.
	CountryCodeNr CountryCode = "NR"
	// Nepal.
	CountryCodeNp CountryCode = "NP"
	// Netherlands.
	CountryCodeNl CountryCode = "NL"
	// Netherlands Antilles.
	CountryCodeAn CountryCode = "AN"
	// New Caledonia.
	CountryCodeNc CountryCode = "NC"
	// New Zealand.
	CountryCodeNz CountryCode = "NZ"
	// Nicaragua.
	CountryCodeNi CountryCode = "NI"
	// Niger.
	CountryCodeNe CountryCode = "NE"
	// Nigeria.
	CountryCodeNg CountryCode = "NG"
	// Niue.
	CountryCodeNu CountryCode = "NU"
	// Norfolk Island.
	CountryCodeNf CountryCode = "NF"
	// North Macedonia.
	CountryCodeMk CountryCode = "MK"
	// Norway.
	CountryCodeNo CountryCode = "NO"
	// Oman.
	CountryCodeOm CountryCode = "OM"
	// Pakistan.
	CountryCodePk CountryCode = "PK"
	// Palestinian Territories.
	CountryCodePs CountryCode = "PS"
	// Panama.
	CountryCodePa CountryCode = "PA"
	// Papua New Guinea.
	CountryCodePg CountryCode = "PG"
	// Paraguay.
	CountryCodePy CountryCode = "PY"
	// Peru.
	CountryCodePe CountryCode = "PE"
	// Philippines.
	CountryCodePh CountryCode = "PH"
	// Pitcairn Islands.
	CountryCodePn CountryCode = "PN"
	// Poland.
	CountryCodePl CountryCode = "PL"
	// Portugal.
	CountryCodePt CountryCode = "PT"
	// Qatar.
	CountryCodeQa CountryCode = "QA"
	// Cameroon.
	CountryCodeCm CountryCode = "CM"
	// Réunion.
	CountryCodeRe CountryCode = "RE"
	// Romania.
	CountryCodeRo CountryCode = "RO"
	// Russia.
	CountryCodeRu CountryCode = "RU"
	// Rwanda.
	CountryCodeRw CountryCode = "RW"
	// St. Barthélemy.
	CountryCodeBl CountryCode = "BL"
	// St. Helena.
	CountryCodeSh CountryCode = "SH"
	// St. Kitts & Nevis.
	CountryCodeKn CountryCode = "KN"
	// St. Lucia.
	CountryCodeLc CountryCode = "LC"
	// St. Martin.
	CountryCodeMf CountryCode = "MF"
	// St. Pierre & Miquelon.
	CountryCodePm CountryCode = "PM"
	// Samoa.
	CountryCodeWs CountryCode = "WS"
	// San Marino.
	CountryCodeSm CountryCode = "SM"
	// São Tomé & Príncipe.
	CountryCodeSt CountryCode = "ST"
	// Saudi Arabia.
	CountryCodeSa CountryCode = "SA"
	// Senegal.
	CountryCodeSn CountryCode = "SN"
	// Serbia.
	CountryCodeRs CountryCode = "RS"
	// Seychelles.
	CountryCodeSc CountryCode = "SC"
	// Sierra Leone.
	CountryCodeSl CountryCode = "SL"
	// Singapore.
	CountryCodeSg CountryCode = "SG"
	// Sint Maarten.
	CountryCodeSx CountryCode = "SX"
	// Slovakia.
	CountryCodeSk CountryCode = "SK"
	// Slovenia.
	CountryCodeSi CountryCode = "SI"
	// Solomon Islands.
	CountryCodeSb CountryCode = "SB"
	// Somalia.
	CountryCodeSo CountryCode = "SO"
	// South Africa.
	CountryCodeZa CountryCode = "ZA"
	// South Georgia & South Sandwich Islands.
	CountryCodeGs CountryCode = "GS"
	// South Korea.
	CountryCodeKr CountryCode = "KR"
	// South Sudan.
	CountryCodeSs CountryCode = "SS"
	// Spain.
	CountryCodeEs CountryCode = "ES"
	// Sri Lanka.
	CountryCodeLk CountryCode = "LK"
	// St. Vincent & Grenadines.
	CountryCodeVc CountryCode = "VC"
	// Sudan.
	CountryCodeSd CountryCode = "SD"
	// Suriname.
	CountryCodeSr CountryCode = "SR"
	// Svalbard & Jan Mayen.
	CountryCodeSj CountryCode = "SJ"
	// Sweden.
	CountryCodeSe CountryCode = "SE"
	// Switzerland.
	CountryCodeCh CountryCode = "CH"
	// Syria.
	CountryCodeSy CountryCode = "SY"
	// Taiwan.
	CountryCodeTw CountryCode = "TW"
	// Tajikistan.
	CountryCodeTj CountryCode = "TJ"
	// Tanzania.
	CountryCodeTz CountryCode = "TZ"
	// Thailand.
	CountryCodeTh CountryCode = "TH"
	// Timor-Leste.
	CountryCodeTl CountryCode = "TL"
	// Togo.
	CountryCodeTg CountryCode = "TG"
	// Tokelau.
	CountryCodeTk CountryCode = "TK"
	// Tonga.
	CountryCodeTo CountryCode = "TO"
	// Trinidad & Tobago.
	CountryCodeTt CountryCode = "TT"
	// Tristan da Cunha.
	CountryCodeTa CountryCode = "TA"
	// Tunisia.
	CountryCodeTn CountryCode = "TN"
	// Turkey.
	CountryCodeTr CountryCode = "TR"
	// Turkmenistan.
	CountryCodeTm CountryCode = "TM"
	// Turks & Caicos Islands.
	CountryCodeTc CountryCode = "TC"
	// Tuvalu.
	CountryCodeTv CountryCode = "TV"
	// Uganda.
	CountryCodeUg CountryCode = "UG"
	// Ukraine.
	CountryCodeUa CountryCode = "UA"
	// United Arab Emirates.
	CountryCodeAe CountryCode = "AE"
	// United Kingdom.
	CountryCodeGb CountryCode = "GB"
	// United States.
	CountryCodeUs CountryCode = "US"
	// U.S. Outlying Islands.
	CountryCodeUm CountryCode = "UM"
	// Uruguay.
	CountryCodeUy CountryCode = "UY"
	// Uzbekistan.
	CountryCodeUz CountryCode = "UZ"
	// Vanuatu.
	CountryCodeVu CountryCode = "VU"
	// Venezuela.
	CountryCodeVe CountryCode = "VE"
	// Vietnam.
	CountryCodeVn CountryCode = "VN"
	// British Virgin Islands.
	CountryCodeVg CountryCode = "VG"
	// Wallis & Futuna.
	CountryCodeWf CountryCode = "WF"
	// Western Sahara.
	CountryCodeEh CountryCode = "EH"
	// Yemen.
	CountryCodeYe CountryCode = "YE"
	// Zambia.
	CountryCodeZm CountryCode = "ZM"
	// Zimbabwe.
	CountryCodeZw CountryCode = "ZW"
)

var AllCountryCode = []CountryCode{
	CountryCodeAf,
	CountryCodeAx,
	CountryCodeAl,
	CountryCodeDz,
	CountryCodeAd,
	CountryCodeAo,
	CountryCodeAi,
	CountryCodeAg,
	CountryCodeAr,
	CountryCodeAm,
	CountryCodeAw,
	CountryCodeAc,
	CountryCodeAu,
	CountryCodeAt,
	CountryCodeAz,
	CountryCodeBs,
	CountryCodeBh,
	CountryCodeBd,
	CountryCodeBb,
	CountryCodeBy,
	CountryCodeBe,
	CountryCodeBz,
	CountryCodeBj,
	CountryCodeBm,
	CountryCodeBt,
	CountryCodeBo,
	CountryCodeBa,
	CountryCodeBw,
	CountryCodeBv,
	CountryCodeBr,
	CountryCodeIo,
	CountryCodeBn,
	CountryCodeBg,
	CountryCodeBf,
	CountryCodeBi,
	CountryCodeKh,
	CountryCodeCa,
	CountryCodeCv,
	CountryCodeBq,
	CountryCodeKy,
	CountryCodeCf,
	CountryCodeTd,
	CountryCodeCl,
	CountryCodeCn,
	CountryCodeCx,
	CountryCodeCc,
	CountryCodeCo,
	CountryCodeKm,
	CountryCodeCg,
	CountryCodeCd,
	CountryCodeCk,
	CountryCodeCr,
	CountryCodeHr,
	CountryCodeCu,
	CountryCodeCw,
	CountryCodeCy,
	CountryCodeCz,
	CountryCodeCi,
	CountryCodeDk,
	CountryCodeDj,
	CountryCodeDm,
	CountryCodeDo,
	CountryCodeEc,
	CountryCodeEg,
	CountryCodeSv,
	CountryCodeGq,
	CountryCodeEr,
	CountryCodeEe,
	CountryCodeSz,
	CountryCodeEt,
	CountryCodeFk,
	CountryCodeFo,
	CountryCodeFj,
	CountryCodeFi,
	CountryCodeFr,
	CountryCodeGf,
	CountryCodePf,
	CountryCodeTf,
	CountryCodeGa,
	CountryCodeGm,
	CountryCodeGe,
	CountryCodeDe,
	CountryCodeGh,
	CountryCodeGi,
	CountryCodeGr,
	CountryCodeGl,
	CountryCodeGd,
	CountryCodeGp,
	CountryCodeGt,
	CountryCodeGg,
	CountryCodeGn,
	CountryCodeGw,
	CountryCodeGy,
	CountryCodeHt,
	CountryCodeHm,
	CountryCodeVa,
	CountryCodeHn,
	CountryCodeHk,
	CountryCodeHu,
	CountryCodeIs,
	CountryCodeIn,
	CountryCodeID,
	CountryCodeIr,
	CountryCodeIq,
	CountryCodeIe,
	CountryCodeIm,
	CountryCodeIl,
	CountryCodeIt,
	CountryCodeJm,
	CountryCodeJp,
	CountryCodeJe,
	CountryCodeJo,
	CountryCodeKz,
	CountryCodeKe,
	CountryCodeKi,
	CountryCodeKp,
	CountryCodeXk,
	CountryCodeKw,
	CountryCodeKg,
	CountryCodeLa,
	CountryCodeLv,
	CountryCodeLb,
	CountryCodeLs,
	CountryCodeLr,
	CountryCodeLy,
	CountryCodeLi,
	CountryCodeLt,
	CountryCodeLu,
	CountryCodeMo,
	CountryCodeMg,
	CountryCodeMw,
	CountryCodeMy,
	CountryCodeMv,
	CountryCodeMl,
	CountryCodeMt,
	CountryCodeMq,
	CountryCodeMr,
	CountryCodeMu,
	CountryCodeYt,
	CountryCodeMx,
	CountryCodeMd,
	CountryCodeMc,
	CountryCodeMn,
	CountryCodeMe,
	CountryCodeMs,
	CountryCodeMa,
	CountryCodeMz,
	CountryCodeMm,
	CountryCodeNa,
	CountryCodeNr,
	CountryCodeNp,
	CountryCodeNl,
	CountryCodeAn,
	CountryCodeNc,
	CountryCodeNz,
	CountryCodeNi,
	CountryCodeNe,
	CountryCodeNg,
	CountryCodeNu,
	CountryCodeNf,
	CountryCodeMk,
	CountryCodeNo,
	CountryCodeOm,
	CountryCodePk,
	CountryCodePs,
	CountryCodePa,
	CountryCodePg,
	CountryCodePy,
	CountryCodePe,
	CountryCodePh,
	CountryCodePn,
	CountryCodePl,
	CountryCodePt,
	CountryCodeQa,
	CountryCodeCm,
	CountryCodeRe,
	CountryCodeRo,
	CountryCodeRu,
	CountryCodeRw,
	CountryCodeBl,
	CountryCodeSh,
	CountryCodeKn,
	CountryCodeLc,
	CountryCodeMf,
	CountryCodePm,
	CountryCodeWs,
	CountryCodeSm,
	CountryCodeSt,
	CountryCodeSa,
	CountryCodeSn,
	CountryCodeRs,
	CountryCodeSc,
	CountryCodeSl,
	CountryCodeSg,
	CountryCodeSx,
	CountryCodeSk,
	CountryCodeSi,
	CountryCodeSb,
	CountryCodeSo,
	CountryCodeZa,
	CountryCodeGs,
	CountryCodeKr,
	CountryCodeSs,
	CountryCodeEs,
	CountryCodeLk,
	CountryCodeVc,
	CountryCodeSd,
	CountryCodeSr,
	CountryCodeSj,
	CountryCodeSe,
	CountryCodeCh,
	CountryCodeSy,
	CountryCodeTw,
	CountryCodeTj,
	CountryCodeTz,
	CountryCodeTh,
	CountryCodeTl,
	CountryCodeTg,
	CountryCodeTk,
	CountryCodeTo,
	CountryCodeTt,
	CountryCodeTa,
	CountryCodeTn,
	CountryCodeTr,
	CountryCodeTm,
	CountryCodeTc,
	CountryCodeTv,
	CountryCodeUg,
	CountryCodeUa,
	CountryCodeAe,
	CountryCodeGb,
	CountryCodeUs,
	CountryCodeUm,
	CountryCodeUy,
	CountryCodeUz,
	CountryCodeVu,
	CountryCodeVe,
	CountryCodeVn,
	CountryCodeVg,
	CountryCodeWf,
	CountryCodeEh,
	CountryCodeYe,
	CountryCodeZm,
	CountryCodeZw,
}

func (e CountryCode) IsValid() bool {
	switch e {
	case CountryCodeAf, CountryCodeAx, CountryCodeAl, CountryCodeDz, CountryCodeAd, CountryCodeAo, CountryCodeAi, CountryCodeAg, CountryCodeAr, CountryCodeAm, CountryCodeAw, CountryCodeAc, CountryCodeAu, CountryCodeAt, CountryCodeAz, CountryCodeBs, CountryCodeBh, CountryCodeBd, CountryCodeBb, CountryCodeBy, CountryCodeBe, CountryCodeBz, CountryCodeBj, CountryCodeBm, CountryCodeBt, CountryCodeBo, CountryCodeBa, CountryCodeBw, CountryCodeBv, CountryCodeBr, CountryCodeIo, CountryCodeBn, CountryCodeBg, CountryCodeBf, CountryCodeBi, CountryCodeKh, CountryCodeCa, CountryCodeCv, CountryCodeBq, CountryCodeKy, CountryCodeCf, CountryCodeTd, CountryCodeCl, CountryCodeCn, CountryCodeCx, CountryCodeCc, CountryCodeCo, CountryCodeKm, CountryCodeCg, CountryCodeCd, CountryCodeCk, CountryCodeCr, CountryCodeHr, CountryCodeCu, CountryCodeCw, CountryCodeCy, CountryCodeCz, CountryCodeCi, CountryCodeDk, CountryCodeDj, CountryCodeDm, CountryCodeDo, CountryCodeEc, CountryCodeEg, CountryCodeSv, CountryCodeGq, CountryCodeEr, CountryCodeEe, CountryCodeSz, CountryCodeEt, CountryCodeFk, CountryCodeFo, CountryCodeFj, CountryCodeFi, CountryCodeFr, CountryCodeGf, CountryCodePf, CountryCodeTf, CountryCodeGa, CountryCodeGm, CountryCodeGe, CountryCodeDe, CountryCodeGh, CountryCodeGi, CountryCodeGr, CountryCodeGl, CountryCodeGd, CountryCodeGp, CountryCodeGt, CountryCodeGg, CountryCodeGn, CountryCodeGw, CountryCodeGy, CountryCodeHt, CountryCodeHm, CountryCodeVa, CountryCodeHn, CountryCodeHk, CountryCodeHu, CountryCodeIs, CountryCodeIn, CountryCodeID, CountryCodeIr, CountryCodeIq, CountryCodeIe, CountryCodeIm, CountryCodeIl, CountryCodeIt, CountryCodeJm, CountryCodeJp, CountryCodeJe, CountryCodeJo, CountryCodeKz, CountryCodeKe, CountryCodeKi, CountryCodeKp, CountryCodeXk, CountryCodeKw, CountryCodeKg, CountryCodeLa, CountryCodeLv, CountryCodeLb, CountryCodeLs, CountryCodeLr, CountryCodeLy, CountryCodeLi, CountryCodeLt, CountryCodeLu, CountryCodeMo, CountryCodeMg, CountryCodeMw, CountryCodeMy, CountryCodeMv, CountryCodeMl, CountryCodeMt, CountryCodeMq, CountryCodeMr, CountryCodeMu, CountryCodeYt, CountryCodeMx, CountryCodeMd, CountryCodeMc, CountryCodeMn, CountryCodeMe, CountryCodeMs, CountryCodeMa, CountryCodeMz, CountryCodeMm, CountryCodeNa, CountryCodeNr, CountryCodeNp, CountryCodeNl, CountryCodeAn, CountryCodeNc, CountryCodeNz, CountryCodeNi, CountryCodeNe, CountryCodeNg, CountryCodeNu, CountryCodeNf, CountryCodeMk, CountryCodeNo, CountryCodeOm, CountryCodePk, CountryCodePs, CountryCodePa, CountryCodePg, CountryCodePy, CountryCodePe, CountryCodePh, CountryCodePn, CountryCodePl, CountryCodePt, CountryCodeQa, CountryCodeCm, CountryCodeRe, CountryCodeRo, CountryCodeRu, CountryCodeRw, CountryCodeBl, CountryCodeSh, CountryCodeKn, CountryCodeLc, CountryCodeMf, CountryCodePm, CountryCodeWs, CountryCodeSm, CountryCodeSt, CountryCodeSa, CountryCodeSn, CountryCodeRs, CountryCodeSc, CountryCodeSl, CountryCodeSg, CountryCodeSx, CountryCodeSk, CountryCodeSi, CountryCodeSb, CountryCodeSo, CountryCodeZa, CountryCodeGs, CountryCodeKr, CountryCodeSs, CountryCodeEs, CountryCodeLk, CountryCodeVc, CountryCodeSd, CountryCodeSr, CountryCodeSj, CountryCodeSe, CountryCodeCh, CountryCodeSy, CountryCodeTw, CountryCodeTj, CountryCodeTz, CountryCodeTh, CountryCodeTl, CountryCodeTg, CountryCodeTk, CountryCodeTo, CountryCodeTt, CountryCodeTa, CountryCodeTn, CountryCodeTr, CountryCodeTm, CountryCodeTc, CountryCodeTv, CountryCodeUg, CountryCodeUa, CountryCodeAe, CountryCodeGb, CountryCodeUs, CountryCodeUm, CountryCodeUy, CountryCodeUz, CountryCodeVu, CountryCodeVe, CountryCodeVn, CountryCodeVg, CountryCodeWf, CountryCodeEh, CountryCodeYe, CountryCodeZm, CountryCodeZw:
		return true
	}
	return false
}

func (e CountryCode) String() string {
	return string(e)
}

func (e *CountryCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CountryCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CountryCode", str)
	}
	return nil
}

func (e CountryCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The part of the image that should remain after cropping.
type CropRegion string

const (
	// Keep the center of the image.
	CropRegionCenter CropRegion = "CENTER"
	// Keep the top of the image.
	CropRegionTop CropRegion = "TOP"
	// Keep the bottom of the image.
	CropRegionBottom CropRegion = "BOTTOM"
	// Keep the left of the image.
	CropRegionLeft CropRegion = "LEFT"
	// Keep the right of the image.
	CropRegionRight CropRegion = "RIGHT"
)

var AllCropRegion = []CropRegion{
	CropRegionCenter,
	CropRegionTop,
	CropRegionBottom,
	CropRegionLeft,
	CropRegionRight,
}

func (e CropRegion) IsValid() bool {
	switch e {
	case CropRegionCenter, CropRegionTop, CropRegionBottom, CropRegionLeft, CropRegionRight:
		return true
	}
	return false
}

func (e CropRegion) String() string {
	return string(e)
}

func (e *CropRegion) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CropRegion(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CropRegion", str)
	}
	return nil
}

func (e CropRegion) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Currency codes.
type CurrencyCode string

const (
	// United States Dollars (USD).
	CurrencyCodeUsd CurrencyCode = "USD"
	// Euro (EUR).
	CurrencyCodeEur CurrencyCode = "EUR"
	// United Kingdom Pounds (GBP).
	CurrencyCodeGbp CurrencyCode = "GBP"
	// Canadian Dollars (CAD).
	CurrencyCodeCad CurrencyCode = "CAD"
	// Afghan Afghani (AFN).
	CurrencyCodeAfn CurrencyCode = "AFN"
	// Albanian Lek (ALL).
	CurrencyCodeAll CurrencyCode = "ALL"
	// Algerian Dinar (DZD).
	CurrencyCodeDzd CurrencyCode = "DZD"
	// Angolan Kwanza (AOA).
	CurrencyCodeAoa CurrencyCode = "AOA"
	// Argentine Pesos (ARS).
	CurrencyCodeArs CurrencyCode = "ARS"
	// Armenian Dram (AMD).
	CurrencyCodeAmd CurrencyCode = "AMD"
	// Aruban Florin (AWG).
	CurrencyCodeAwg CurrencyCode = "AWG"
	// Australian Dollars (AUD).
	CurrencyCodeAud CurrencyCode = "AUD"
	// Barbadian Dollar (BBD).
	CurrencyCodeBbd CurrencyCode = "BBD"
	// Azerbaijani Manat (AZN).
	CurrencyCodeAzn CurrencyCode = "AZN"
	// Bangladesh Taka (BDT).
	CurrencyCodeBdt CurrencyCode = "BDT"
	// Bahamian Dollar (BSD).
	CurrencyCodeBsd CurrencyCode = "BSD"
	// Bahraini Dinar (BHD).
	CurrencyCodeBhd CurrencyCode = "BHD"
	// Burundian Franc (BIF).
	CurrencyCodeBif CurrencyCode = "BIF"
	// Belize Dollar (BZD).
	CurrencyCodeBzd CurrencyCode = "BZD"
	// Bermudian Dollar (BMD).
	CurrencyCodeBmd CurrencyCode = "BMD"
	// Bhutanese Ngultrum (BTN).
	CurrencyCodeBtn CurrencyCode = "BTN"
	// Bosnia and Herzegovina Convertible Mark (BAM).
	CurrencyCodeBam CurrencyCode = "BAM"
	// Brazilian Real (BRL).
	CurrencyCodeBrl CurrencyCode = "BRL"
	// Bolivian Boliviano (BOB).
	CurrencyCodeBob CurrencyCode = "BOB"
	// Botswana Pula (BWP).
	CurrencyCodeBwp CurrencyCode = "BWP"
	// Brunei Dollar (BND).
	CurrencyCodeBnd CurrencyCode = "BND"
	// Bulgarian Lev (BGN).
	CurrencyCodeBgn CurrencyCode = "BGN"
	// Burmese Kyat (MMK).
	CurrencyCodeMmk CurrencyCode = "MMK"
	// Cambodian Riel.
	CurrencyCodeKhr CurrencyCode = "KHR"
	// Cape Verdean escudo (CVE).
	CurrencyCodeCve CurrencyCode = "CVE"
	// Cayman Dollars (KYD).
	CurrencyCodeKyd CurrencyCode = "KYD"
	// Central African CFA Franc (XAF).
	CurrencyCodeXaf CurrencyCode = "XAF"
	// Chilean Peso (CLP).
	CurrencyCodeClp CurrencyCode = "CLP"
	// Chinese Yuan Renminbi (CNY).
	CurrencyCodeCny CurrencyCode = "CNY"
	// Colombian Peso (COP).
	CurrencyCodeCop CurrencyCode = "COP"
	// Comorian Franc (KMF).
	CurrencyCodeKmf CurrencyCode = "KMF"
	// Congolese franc (CDF).
	CurrencyCodeCdf CurrencyCode = "CDF"
	// Costa Rican Colones (CRC).
	CurrencyCodeCrc CurrencyCode = "CRC"
	// Croatian Kuna (HRK).
	CurrencyCodeHrk CurrencyCode = "HRK"
	// Czech Koruny (CZK).
	CurrencyCodeCzk CurrencyCode = "CZK"
	// Danish Kroner (DKK).
	CurrencyCodeDkk CurrencyCode = "DKK"
	// Dominican Peso (DOP).
	CurrencyCodeDop CurrencyCode = "DOP"
	// East Caribbean Dollar (XCD).
	CurrencyCodeXcd CurrencyCode = "XCD"
	// Egyptian Pound (EGP).
	CurrencyCodeEgp CurrencyCode = "EGP"
	// Ethiopian Birr (ETB).
	CurrencyCodeEtb CurrencyCode = "ETB"
	// CFP Franc (XPF).
	CurrencyCodeXpf CurrencyCode = "XPF"
	// Fijian Dollars (FJD).
	CurrencyCodeFjd CurrencyCode = "FJD"
	// Gambian Dalasi (GMD).
	CurrencyCodeGmd CurrencyCode = "GMD"
	// Ghanaian Cedi (GHS).
	CurrencyCodeGhs CurrencyCode = "GHS"
	// Guatemalan Quetzal (GTQ).
	CurrencyCodeGtq CurrencyCode = "GTQ"
	// Guyanese Dollar (GYD).
	CurrencyCodeGyd CurrencyCode = "GYD"
	// Georgian Lari (GEL).
	CurrencyCodeGel CurrencyCode = "GEL"
	// Haitian Gourde (HTG).
	CurrencyCodeHtg CurrencyCode = "HTG"
	// Honduran Lempira (HNL).
	CurrencyCodeHnl CurrencyCode = "HNL"
	// Hong Kong Dollars (HKD).
	CurrencyCodeHkd CurrencyCode = "HKD"
	// Hungarian Forint (HUF).
	CurrencyCodeHuf CurrencyCode = "HUF"
	// Icelandic Kronur (ISK).
	CurrencyCodeIsk CurrencyCode = "ISK"
	// Indian Rupees (INR).
	CurrencyCodeInr CurrencyCode = "INR"
	// Indonesian Rupiah (IDR).
	CurrencyCodeIDR CurrencyCode = "IDR"
	// Israeli New Shekel (NIS).
	CurrencyCodeIls CurrencyCode = "ILS"
	// Iraqi Dinar (IQD).
	CurrencyCodeIqd CurrencyCode = "IQD"
	// Jamaican Dollars (JMD).
	CurrencyCodeJmd CurrencyCode = "JMD"
	// Japanese Yen (JPY).
	CurrencyCodeJpy CurrencyCode = "JPY"
	// Jersey Pound.
	CurrencyCodeJep CurrencyCode = "JEP"
	// Jordanian Dinar (JOD).
	CurrencyCodeJod CurrencyCode = "JOD"
	// Kazakhstani Tenge (KZT).
	CurrencyCodeKzt CurrencyCode = "KZT"
	// Kenyan Shilling (KES).
	CurrencyCodeKes CurrencyCode = "KES"
	// Kuwaiti Dinar (KWD).
	CurrencyCodeKwd CurrencyCode = "KWD"
	// Kyrgyzstani Som (KGS).
	CurrencyCodeKgs CurrencyCode = "KGS"
	// Laotian Kip (LAK).
	CurrencyCodeLak CurrencyCode = "LAK"
	// Latvian Lati (LVL).
	CurrencyCodeLvl CurrencyCode = "LVL"
	// Lebanese Pounds (LBP).
	CurrencyCodeLbp CurrencyCode = "LBP"
	// Lesotho Loti (LSL).
	CurrencyCodeLsl CurrencyCode = "LSL"
	// Liberian Dollar (LRD).
	CurrencyCodeLrd CurrencyCode = "LRD"
	// Lithuanian Litai (LTL).
	CurrencyCodeLtl CurrencyCode = "LTL"
	// Malagasy Ariary (MGA).
	CurrencyCodeMga CurrencyCode = "MGA"
	// Macedonia Denar (MKD).
	CurrencyCodeMkd CurrencyCode = "MKD"
	// Macanese Pataca (MOP).
	CurrencyCodeMop CurrencyCode = "MOP"
	// Malawian Kwacha (MWK).
	CurrencyCodeMwk CurrencyCode = "MWK"
	// Maldivian Rufiyaa (MVR).
	CurrencyCodeMvr CurrencyCode = "MVR"
	// Mexican Pesos (MXN).
	CurrencyCodeMxn CurrencyCode = "MXN"
	// Malaysian Ringgits (MYR).
	CurrencyCodeMyr CurrencyCode = "MYR"
	// Mauritian Rupee (MUR).
	CurrencyCodeMur CurrencyCode = "MUR"
	// Moldovan Leu (MDL).
	CurrencyCodeMdl CurrencyCode = "MDL"
	// Moroccan Dirham.
	CurrencyCodeMad CurrencyCode = "MAD"
	// Mongolian Tugrik.
	CurrencyCodeMnt CurrencyCode = "MNT"
	// Mozambican Metical.
	CurrencyCodeMzn CurrencyCode = "MZN"
	// Namibian Dollar.
	CurrencyCodeNad CurrencyCode = "NAD"
	// Nepalese Rupee (NPR).
	CurrencyCodeNpr CurrencyCode = "NPR"
	// Netherlands Antillean Guilder.
	CurrencyCodeAng CurrencyCode = "ANG"
	// New Zealand Dollars (NZD).
	CurrencyCodeNzd CurrencyCode = "NZD"
	// Nicaraguan Córdoba (NIO).
	CurrencyCodeNio CurrencyCode = "NIO"
	// Nigerian Naira (NGN).
	CurrencyCodeNgn CurrencyCode = "NGN"
	// Norwegian Kroner (NOK).
	CurrencyCodeNok CurrencyCode = "NOK"
	// Omani Rial (OMR).
	CurrencyCodeOmr CurrencyCode = "OMR"
	// Panamian Balboa (PAB).
	CurrencyCodePab CurrencyCode = "PAB"
	// Pakistani Rupee (PKR).
	CurrencyCodePkr CurrencyCode = "PKR"
	// Papua New Guinean Kina (PGK).
	CurrencyCodePgk CurrencyCode = "PGK"
	// Paraguayan Guarani (PYG).
	CurrencyCodePyg CurrencyCode = "PYG"
	// Peruvian Nuevo Sol (PEN).
	CurrencyCodePen CurrencyCode = "PEN"
	// Philippine Peso (PHP).
	CurrencyCodePhp CurrencyCode = "PHP"
	// Polish Zlotych (PLN).
	CurrencyCodePln CurrencyCode = "PLN"
	// Qatari Rial (QAR).
	CurrencyCodeQar CurrencyCode = "QAR"
	// Romanian Lei (RON).
	CurrencyCodeRon CurrencyCode = "RON"
	// Russian Rubles (RUB).
	CurrencyCodeRub CurrencyCode = "RUB"
	// Rwandan Franc (RWF).
	CurrencyCodeRwf CurrencyCode = "RWF"
	// Samoan Tala (WST).
	CurrencyCodeWst CurrencyCode = "WST"
	// Saudi Riyal (SAR).
	CurrencyCodeSar CurrencyCode = "SAR"
	// Sao Tome And Principe Dobra (STD).
	CurrencyCodeStd CurrencyCode = "STD"
	// Serbian dinar (RSD).
	CurrencyCodeRsd CurrencyCode = "RSD"
	// Seychellois Rupee (SCR).
	CurrencyCodeScr CurrencyCode = "SCR"
	// Singapore Dollars (SGD).
	CurrencyCodeSgd CurrencyCode = "SGD"
	// Sudanese Pound (SDG).
	CurrencyCodeSdg CurrencyCode = "SDG"
	// Syrian Pound (SYP).
	CurrencyCodeSyp CurrencyCode = "SYP"
	// South African Rand (ZAR).
	CurrencyCodeZar CurrencyCode = "ZAR"
	// South Korean Won (KRW).
	CurrencyCodeKrw CurrencyCode = "KRW"
	// South Sudanese Pound (SSP).
	CurrencyCodeSsp CurrencyCode = "SSP"
	// Solomon Islands Dollar (SBD).
	CurrencyCodeSbd CurrencyCode = "SBD"
	// Sri Lankan Rupees (LKR).
	CurrencyCodeLkr CurrencyCode = "LKR"
	// Surinamese Dollar (SRD).
	CurrencyCodeSrd CurrencyCode = "SRD"
	// Swazi Lilangeni (SZL).
	CurrencyCodeSzl CurrencyCode = "SZL"
	// Swedish Kronor (SEK).
	CurrencyCodeSek CurrencyCode = "SEK"
	// Swiss Francs (CHF).
	CurrencyCodeChf CurrencyCode = "CHF"
	// Taiwan Dollars (TWD).
	CurrencyCodeTwd CurrencyCode = "TWD"
	// Thai baht (THB).
	CurrencyCodeThb CurrencyCode = "THB"
	// Tanzanian Shilling (TZS).
	CurrencyCodeTzs CurrencyCode = "TZS"
	// Trinidad and Tobago Dollars (TTD).
	CurrencyCodeTtd CurrencyCode = "TTD"
	// Tunisian Dinar (TND).
	CurrencyCodeTnd CurrencyCode = "TND"
	// Turkish Lira (TRY).
	CurrencyCodeTry CurrencyCode = "TRY"
	// Turkmenistani Manat (TMT).
	CurrencyCodeTmt CurrencyCode = "TMT"
	// Ugandan Shilling (UGX).
	CurrencyCodeUgx CurrencyCode = "UGX"
	// Ukrainian Hryvnia (UAH).
	CurrencyCodeUah CurrencyCode = "UAH"
	// United Arab Emirates Dirham (AED).
	CurrencyCodeAed CurrencyCode = "AED"
	// Uruguayan Pesos (UYU).
	CurrencyCodeUyu CurrencyCode = "UYU"
	// Uzbekistan som (UZS).
	CurrencyCodeUzs CurrencyCode = "UZS"
	// Vanuatu Vatu (VUV).
	CurrencyCodeVuv CurrencyCode = "VUV"
	// Vietnamese đồng (VND).
	CurrencyCodeVnd CurrencyCode = "VND"
	// West African CFA franc (XOF).
	CurrencyCodeXof CurrencyCode = "XOF"
	// Yemeni Rial (YER).
	CurrencyCodeYer CurrencyCode = "YER"
	// Zambian Kwacha (ZMW).
	CurrencyCodeZmw CurrencyCode = "ZMW"
	// Belarusian Ruble (BYN).
	CurrencyCodeByn CurrencyCode = "BYN"
	// Belarusian Ruble (BYR).
	CurrencyCodeByr CurrencyCode = "BYR"
	// Djiboutian Franc (DJF).
	CurrencyCodeDjf CurrencyCode = "DJF"
	// Eritrean Nakfa (ERN).
	CurrencyCodeErn CurrencyCode = "ERN"
	// Falkland Islands Pounds (FKP).
	CurrencyCodeFkp CurrencyCode = "FKP"
	// Gibraltar Pounds (GIP).
	CurrencyCodeGip CurrencyCode = "GIP"
	// Guinean Franc (GNF).
	CurrencyCodeGnf CurrencyCode = "GNF"
	// Iranian Rial (IRR).
	CurrencyCodeIrr CurrencyCode = "IRR"
	// Kiribati Dollar (KID).
	CurrencyCodeKid CurrencyCode = "KID"
	// Libyan Dinar (LYD).
	CurrencyCodeLyd CurrencyCode = "LYD"
	// Mauritanian Ouguiya (MRU).
	CurrencyCodeMru CurrencyCode = "MRU"
	// Sierra Leonean Leone (SLL).
	CurrencyCodeSll CurrencyCode = "SLL"
	// Saint Helena Pounds (SHP).
	CurrencyCodeShp CurrencyCode = "SHP"
	// Somali Shilling (SOS).
	CurrencyCodeSos CurrencyCode = "SOS"
	// Tajikistani Somoni (TJS).
	CurrencyCodeTjs CurrencyCode = "TJS"
	// Tongan Pa'anga (TOP).
	CurrencyCodeTop CurrencyCode = "TOP"
	// Venezuelan Bolivares (VEF).
	CurrencyCodeVef CurrencyCode = "VEF"
	// Venezuelan Bolivares (VES).
	CurrencyCodeVes CurrencyCode = "VES"
)

var AllCurrencyCode = []CurrencyCode{
	CurrencyCodeUsd,
	CurrencyCodeEur,
	CurrencyCodeGbp,
	CurrencyCodeCad,
	CurrencyCodeAfn,
	CurrencyCodeAll,
	CurrencyCodeDzd,
	CurrencyCodeAoa,
	CurrencyCodeArs,
	CurrencyCodeAmd,
	CurrencyCodeAwg,
	CurrencyCodeAud,
	CurrencyCodeBbd,
	CurrencyCodeAzn,
	CurrencyCodeBdt,
	CurrencyCodeBsd,
	CurrencyCodeBhd,
	CurrencyCodeBif,
	CurrencyCodeBzd,
	CurrencyCodeBmd,
	CurrencyCodeBtn,
	CurrencyCodeBam,
	CurrencyCodeBrl,
	CurrencyCodeBob,
	CurrencyCodeBwp,
	CurrencyCodeBnd,
	CurrencyCodeBgn,
	CurrencyCodeMmk,
	CurrencyCodeKhr,
	CurrencyCodeCve,
	CurrencyCodeKyd,
	CurrencyCodeXaf,
	CurrencyCodeClp,
	CurrencyCodeCny,
	CurrencyCodeCop,
	CurrencyCodeKmf,
	CurrencyCodeCdf,
	CurrencyCodeCrc,
	CurrencyCodeHrk,
	CurrencyCodeCzk,
	CurrencyCodeDkk,
	CurrencyCodeDop,
	CurrencyCodeXcd,
	CurrencyCodeEgp,
	CurrencyCodeEtb,
	CurrencyCodeXpf,
	CurrencyCodeFjd,
	CurrencyCodeGmd,
	CurrencyCodeGhs,
	CurrencyCodeGtq,
	CurrencyCodeGyd,
	CurrencyCodeGel,
	CurrencyCodeHtg,
	CurrencyCodeHnl,
	CurrencyCodeHkd,
	CurrencyCodeHuf,
	CurrencyCodeIsk,
	CurrencyCodeInr,
	CurrencyCodeIDR,
	CurrencyCodeIls,
	CurrencyCodeIqd,
	CurrencyCodeJmd,
	CurrencyCodeJpy,
	CurrencyCodeJep,
	CurrencyCodeJod,
	CurrencyCodeKzt,
	CurrencyCodeKes,
	CurrencyCodeKwd,
	CurrencyCodeKgs,
	CurrencyCodeLak,
	CurrencyCodeLvl,
	CurrencyCodeLbp,
	CurrencyCodeLsl,
	CurrencyCodeLrd,
	CurrencyCodeLtl,
	CurrencyCodeMga,
	CurrencyCodeMkd,
	CurrencyCodeMop,
	CurrencyCodeMwk,
	CurrencyCodeMvr,
	CurrencyCodeMxn,
	CurrencyCodeMyr,
	CurrencyCodeMur,
	CurrencyCodeMdl,
	CurrencyCodeMad,
	CurrencyCodeMnt,
	CurrencyCodeMzn,
	CurrencyCodeNad,
	CurrencyCodeNpr,
	CurrencyCodeAng,
	CurrencyCodeNzd,
	CurrencyCodeNio,
	CurrencyCodeNgn,
	CurrencyCodeNok,
	CurrencyCodeOmr,
	CurrencyCodePab,
	CurrencyCodePkr,
	CurrencyCodePgk,
	CurrencyCodePyg,
	CurrencyCodePen,
	CurrencyCodePhp,
	CurrencyCodePln,
	CurrencyCodeQar,
	CurrencyCodeRon,
	CurrencyCodeRub,
	CurrencyCodeRwf,
	CurrencyCodeWst,
	CurrencyCodeSar,
	CurrencyCodeStd,
	CurrencyCodeRsd,
	CurrencyCodeScr,
	CurrencyCodeSgd,
	CurrencyCodeSdg,
	CurrencyCodeSyp,
	CurrencyCodeZar,
	CurrencyCodeKrw,
	CurrencyCodeSsp,
	CurrencyCodeSbd,
	CurrencyCodeLkr,
	CurrencyCodeSrd,
	CurrencyCodeSzl,
	CurrencyCodeSek,
	CurrencyCodeChf,
	CurrencyCodeTwd,
	CurrencyCodeThb,
	CurrencyCodeTzs,
	CurrencyCodeTtd,
	CurrencyCodeTnd,
	CurrencyCodeTry,
	CurrencyCodeTmt,
	CurrencyCodeUgx,
	CurrencyCodeUah,
	CurrencyCodeAed,
	CurrencyCodeUyu,
	CurrencyCodeUzs,
	CurrencyCodeVuv,
	CurrencyCodeVnd,
	CurrencyCodeXof,
	CurrencyCodeYer,
	CurrencyCodeZmw,
	CurrencyCodeByn,
	CurrencyCodeByr,
	CurrencyCodeDjf,
	CurrencyCodeErn,
	CurrencyCodeFkp,
	CurrencyCodeGip,
	CurrencyCodeGnf,
	CurrencyCodeIrr,
	CurrencyCodeKid,
	CurrencyCodeLyd,
	CurrencyCodeMru,
	CurrencyCodeSll,
	CurrencyCodeShp,
	CurrencyCodeSos,
	CurrencyCodeTjs,
	CurrencyCodeTop,
	CurrencyCodeVef,
	CurrencyCodeVes,
}

func (e CurrencyCode) IsValid() bool {
	switch e {
	case CurrencyCodeUsd, CurrencyCodeEur, CurrencyCodeGbp, CurrencyCodeCad, CurrencyCodeAfn, CurrencyCodeAll, CurrencyCodeDzd, CurrencyCodeAoa, CurrencyCodeArs, CurrencyCodeAmd, CurrencyCodeAwg, CurrencyCodeAud, CurrencyCodeBbd, CurrencyCodeAzn, CurrencyCodeBdt, CurrencyCodeBsd, CurrencyCodeBhd, CurrencyCodeBif, CurrencyCodeBzd, CurrencyCodeBmd, CurrencyCodeBtn, CurrencyCodeBam, CurrencyCodeBrl, CurrencyCodeBob, CurrencyCodeBwp, CurrencyCodeBnd, CurrencyCodeBgn, CurrencyCodeMmk, CurrencyCodeKhr, CurrencyCodeCve, CurrencyCodeKyd, CurrencyCodeXaf, CurrencyCodeClp, CurrencyCodeCny, CurrencyCodeCop, CurrencyCodeKmf, CurrencyCodeCdf, CurrencyCodeCrc, CurrencyCodeHrk, CurrencyCodeCzk, CurrencyCodeDkk, CurrencyCodeDop, CurrencyCodeXcd, CurrencyCodeEgp, CurrencyCodeEtb, CurrencyCodeXpf, CurrencyCodeFjd, CurrencyCodeGmd, CurrencyCodeGhs, CurrencyCodeGtq, CurrencyCodeGyd, CurrencyCodeGel, CurrencyCodeHtg, CurrencyCodeHnl, CurrencyCodeHkd, CurrencyCodeHuf, CurrencyCodeIsk, CurrencyCodeInr, CurrencyCodeIDR, CurrencyCodeIls, CurrencyCodeIqd, CurrencyCodeJmd, CurrencyCodeJpy, CurrencyCodeJep, CurrencyCodeJod, CurrencyCodeKzt, CurrencyCodeKes, CurrencyCodeKwd, CurrencyCodeKgs, CurrencyCodeLak, CurrencyCodeLvl, CurrencyCodeLbp, CurrencyCodeLsl, CurrencyCodeLrd, CurrencyCodeLtl, CurrencyCodeMga, CurrencyCodeMkd, CurrencyCodeMop, CurrencyCodeMwk, CurrencyCodeMvr, CurrencyCodeMxn, CurrencyCodeMyr, CurrencyCodeMur, CurrencyCodeMdl, CurrencyCodeMad, CurrencyCodeMnt, CurrencyCodeMzn, CurrencyCodeNad, CurrencyCodeNpr, CurrencyCodeAng, CurrencyCodeNzd, CurrencyCodeNio, CurrencyCodeNgn, CurrencyCodeNok, CurrencyCodeOmr, CurrencyCodePab, CurrencyCodePkr, CurrencyCodePgk, CurrencyCodePyg, CurrencyCodePen, CurrencyCodePhp, CurrencyCodePln, CurrencyCodeQar, CurrencyCodeRon, CurrencyCodeRub, CurrencyCodeRwf, CurrencyCodeWst, CurrencyCodeSar, CurrencyCodeStd, CurrencyCodeRsd, CurrencyCodeScr, CurrencyCodeSgd, CurrencyCodeSdg, CurrencyCodeSyp, CurrencyCodeZar, CurrencyCodeKrw, CurrencyCodeSsp, CurrencyCodeSbd, CurrencyCodeLkr, CurrencyCodeSrd, CurrencyCodeSzl, CurrencyCodeSek, CurrencyCodeChf, CurrencyCodeTwd, CurrencyCodeThb, CurrencyCodeTzs, CurrencyCodeTtd, CurrencyCodeTnd, CurrencyCodeTry, CurrencyCodeTmt, CurrencyCodeUgx, CurrencyCodeUah, CurrencyCodeAed, CurrencyCodeUyu, CurrencyCodeUzs, CurrencyCodeVuv, CurrencyCodeVnd, CurrencyCodeXof, CurrencyCodeYer, CurrencyCodeZmw, CurrencyCodeByn, CurrencyCodeByr, CurrencyCodeDjf, CurrencyCodeErn, CurrencyCodeFkp, CurrencyCodeGip, CurrencyCodeGnf, CurrencyCodeIrr, CurrencyCodeKid, CurrencyCodeLyd, CurrencyCodeMru, CurrencyCodeSll, CurrencyCodeShp, CurrencyCodeSos, CurrencyCodeTjs, CurrencyCodeTop, CurrencyCodeVef, CurrencyCodeVes:
		return true
	}
	return false
}

func (e CurrencyCode) String() string {
	return string(e)
}

func (e *CurrencyCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CurrencyCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CurrencyCode", str)
	}
	return nil
}

func (e CurrencyCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid values for the marketing subscription opt-in active at the time the customer consented to email
// marketing.
//
// The levels are defined by [the M3AAWG best practices guideline
//   document](https://www.m3aawg.org/sites/maawg/files/news/M3AAWG_Senders_BCP_Ver3-2015-02.pdf).
type CustomerMarketingOptInLevel string

const (
	// The customer started receiving marketing email(s) after providing their email address, without any
	// intermediate steps.
	CustomerMarketingOptInLevelSingleOptIn CustomerMarketingOptInLevel = "SINGLE_OPT_IN"
	// After providing their email address, the customer received a confirmation email which required them to
	// perform a prescribed action before receiving marketing emails.
	CustomerMarketingOptInLevelConfirmedOptIn CustomerMarketingOptInLevel = "CONFIRMED_OPT_IN"
	// The customer receives marketing emails, but the original opt-in process is unknown.
	CustomerMarketingOptInLevelUnknown CustomerMarketingOptInLevel = "UNKNOWN"
)

var AllCustomerMarketingOptInLevel = []CustomerMarketingOptInLevel{
	CustomerMarketingOptInLevelSingleOptIn,
	CustomerMarketingOptInLevelConfirmedOptIn,
	CustomerMarketingOptInLevelUnknown,
}

func (e CustomerMarketingOptInLevel) IsValid() bool {
	switch e {
	case CustomerMarketingOptInLevelSingleOptIn, CustomerMarketingOptInLevelConfirmedOptIn, CustomerMarketingOptInLevelUnknown:
		return true
	}
	return false
}

func (e CustomerMarketingOptInLevel) String() string {
	return string(e)
}

func (e *CustomerMarketingOptInLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerMarketingOptInLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerMarketingOptInLevel", str)
	}
	return nil
}

func (e CustomerMarketingOptInLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that could be returned by CustomerPaymentMethodUserError.
type CustomerPaymentMethodUserErrorCode string

const (
	// Input value is invalid.
	CustomerPaymentMethodUserErrorCodeInvalid CustomerPaymentMethodUserErrorCode = "INVALID"
	// Input value is not present.
	CustomerPaymentMethodUserErrorCodePresent CustomerPaymentMethodUserErrorCode = "PRESENT"
	// Input value is already taken.
	CustomerPaymentMethodUserErrorCodeTaken CustomerPaymentMethodUserErrorCode = "TAKEN"
)

var AllCustomerPaymentMethodUserErrorCode = []CustomerPaymentMethodUserErrorCode{
	CustomerPaymentMethodUserErrorCodeInvalid,
	CustomerPaymentMethodUserErrorCodePresent,
	CustomerPaymentMethodUserErrorCodeTaken,
}

func (e CustomerPaymentMethodUserErrorCode) IsValid() bool {
	switch e {
	case CustomerPaymentMethodUserErrorCodeInvalid, CustomerPaymentMethodUserErrorCodePresent, CustomerPaymentMethodUserErrorCodeTaken:
		return true
	}
	return false
}

func (e CustomerPaymentMethodUserErrorCode) String() string {
	return string(e)
}

func (e *CustomerPaymentMethodUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerPaymentMethodUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerPaymentMethodUserErrorCode", str)
	}
	return nil
}

func (e CustomerPaymentMethodUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible subscriber states of a customer defined by their subscription contracts.
type CustomerProductSubscriberStatus string

const (
	// The customer has at least one active subscription contract.
	CustomerProductSubscriberStatusActive CustomerProductSubscriberStatus = "ACTIVE"
	// The customer's last subscription contract was cancelled and there are no other active or paused
	// subscription contracts.
	CustomerProductSubscriberStatusCancelled CustomerProductSubscriberStatus = "CANCELLED"
	// The customer's last subscription contract expired and there are no other active or paused
	// subscription contracts.
	CustomerProductSubscriberStatusExpired CustomerProductSubscriberStatus = "EXPIRED"
	// The customer's last subscription contract failed and there are no other active or paused
	// subscription contracts.
	CustomerProductSubscriberStatusFailed CustomerProductSubscriberStatus = "FAILED"
	// The customer has never had a subscription contract.
	CustomerProductSubscriberStatusNeverSubscribed CustomerProductSubscriberStatus = "NEVER_SUBSCRIBED"
	// The customer has at least one paused subscription contract and there are no other active
	// subscription contracts.
	CustomerProductSubscriberStatusPaused CustomerProductSubscriberStatus = "PAUSED"
)

var AllCustomerProductSubscriberStatus = []CustomerProductSubscriberStatus{
	CustomerProductSubscriberStatusActive,
	CustomerProductSubscriberStatusCancelled,
	CustomerProductSubscriberStatusExpired,
	CustomerProductSubscriberStatusFailed,
	CustomerProductSubscriberStatusNeverSubscribed,
	CustomerProductSubscriberStatusPaused,
}

func (e CustomerProductSubscriberStatus) IsValid() bool {
	switch e {
	case CustomerProductSubscriberStatusActive, CustomerProductSubscriberStatusCancelled, CustomerProductSubscriberStatusExpired, CustomerProductSubscriberStatusFailed, CustomerProductSubscriberStatusNeverSubscribed, CustomerProductSubscriberStatusPaused:
		return true
	}
	return false
}

func (e CustomerProductSubscriberStatus) String() string {
	return string(e)
}

func (e *CustomerProductSubscriberStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerProductSubscriberStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerProductSubscriberStatus", str)
	}
	return nil
}

func (e CustomerProductSubscriberStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the CustomerSavedSearch query.
type CustomerSavedSearchSortKeys string

const (
	// Sort by the `name` value.
	CustomerSavedSearchSortKeysName CustomerSavedSearchSortKeys = "NAME"
	// Sort by the `id` value.
	CustomerSavedSearchSortKeysID CustomerSavedSearchSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	CustomerSavedSearchSortKeysRelevance CustomerSavedSearchSortKeys = "RELEVANCE"
)

var AllCustomerSavedSearchSortKeys = []CustomerSavedSearchSortKeys{
	CustomerSavedSearchSortKeysName,
	CustomerSavedSearchSortKeysID,
	CustomerSavedSearchSortKeysRelevance,
}

func (e CustomerSavedSearchSortKeys) IsValid() bool {
	switch e {
	case CustomerSavedSearchSortKeysName, CustomerSavedSearchSortKeysID, CustomerSavedSearchSortKeysRelevance:
		return true
	}
	return false
}

func (e CustomerSavedSearchSortKeys) String() string {
	return string(e)
}

func (e *CustomerSavedSearchSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerSavedSearchSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerSavedSearchSortKeys", str)
	}
	return nil
}

func (e CustomerSavedSearchSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Customer query.
type CustomerSortKeys string

const (
	// Sort by the `name` value.
	CustomerSortKeysName CustomerSortKeys = "NAME"
	// Sort by the `location` value.
	CustomerSortKeysLocation CustomerSortKeys = "LOCATION"
	// Sort by the `orders_count` value.
	CustomerSortKeysOrdersCount CustomerSortKeys = "ORDERS_COUNT"
	// Sort by the `last_order_date` value.
	CustomerSortKeysLastOrderDate CustomerSortKeys = "LAST_ORDER_DATE"
	// Sort by the `total_spent` value.
	CustomerSortKeysTotalSpent CustomerSortKeys = "TOTAL_SPENT"
	// Sort by the `updated_at` value.
	CustomerSortKeysUpdatedAt CustomerSortKeys = "UPDATED_AT"
	// Sort by the `id` value.
	CustomerSortKeysID CustomerSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	CustomerSortKeysRelevance CustomerSortKeys = "RELEVANCE"
)

var AllCustomerSortKeys = []CustomerSortKeys{
	CustomerSortKeysName,
	CustomerSortKeysLocation,
	CustomerSortKeysOrdersCount,
	CustomerSortKeysLastOrderDate,
	CustomerSortKeysTotalSpent,
	CustomerSortKeysUpdatedAt,
	CustomerSortKeysID,
	CustomerSortKeysRelevance,
}

func (e CustomerSortKeys) IsValid() bool {
	switch e {
	case CustomerSortKeysName, CustomerSortKeysLocation, CustomerSortKeysOrdersCount, CustomerSortKeysLastOrderDate, CustomerSortKeysTotalSpent, CustomerSortKeysUpdatedAt, CustomerSortKeysID, CustomerSortKeysRelevance:
		return true
	}
	return false
}

func (e CustomerSortKeys) String() string {
	return string(e)
}

func (e *CustomerSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerSortKeys", str)
	}
	return nil
}

func (e CustomerSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid values for the state of a customer's account with a shop.
type CustomerState string

const (
	// The customer declined the email invite to create an account.
	CustomerStateDeclined CustomerState = "DECLINED"
	// The customer doesn't have an active account. Customer accounts can be disabled from the Shopify admin at any time.
	CustomerStateDisabled CustomerState = "DISABLED"
	// The customer has created an account.
	CustomerStateEnabled CustomerState = "ENABLED"
	// The customer has received an email invite to create an account.
	CustomerStateInvited CustomerState = "INVITED"
)

var AllCustomerState = []CustomerState{
	CustomerStateDeclined,
	CustomerStateDisabled,
	CustomerStateEnabled,
	CustomerStateInvited,
}

func (e CustomerState) IsValid() bool {
	switch e {
	case CustomerStateDeclined, CustomerStateDisabled, CustomerStateEnabled, CustomerStateInvited:
		return true
	}
	return false
}

func (e CustomerState) String() string {
	return string(e)
}

func (e *CustomerState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerState", str)
	}
	return nil
}

func (e CustomerState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Days of the week from Monday to Sunday.
type DayOfTheWeek string

const (
	// Monday.
	DayOfTheWeekMonday DayOfTheWeek = "MONDAY"
	// Tuesday.
	DayOfTheWeekTuesday DayOfTheWeek = "TUESDAY"
	// Wednesday.
	DayOfTheWeekWednesday DayOfTheWeek = "WEDNESDAY"
	// Thursday.
	DayOfTheWeekThursday DayOfTheWeek = "THURSDAY"
	// Friday.
	DayOfTheWeekFriday DayOfTheWeek = "FRIDAY"
	// Saturday.
	DayOfTheWeekSaturday DayOfTheWeek = "SATURDAY"
	// Sunday.
	DayOfTheWeekSunday DayOfTheWeek = "SUNDAY"
)

var AllDayOfTheWeek = []DayOfTheWeek{
	DayOfTheWeekMonday,
	DayOfTheWeekTuesday,
	DayOfTheWeekWednesday,
	DayOfTheWeekThursday,
	DayOfTheWeekFriday,
	DayOfTheWeekSaturday,
	DayOfTheWeekSunday,
}

func (e DayOfTheWeek) IsValid() bool {
	switch e {
	case DayOfTheWeekMonday, DayOfTheWeekTuesday, DayOfTheWeekWednesday, DayOfTheWeekThursday, DayOfTheWeekFriday, DayOfTheWeekSaturday, DayOfTheWeekSunday:
		return true
	}
	return false
}

func (e DayOfTheWeek) String() string {
	return string(e)
}

func (e *DayOfTheWeek) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DayOfTheWeek(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DayOfTheWeek", str)
	}
	return nil
}

func (e DayOfTheWeek) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the DeletionEvent query.
type DeletionEventSortKeys string

const (
	// Sort by the `created_at` value.
	DeletionEventSortKeysCreatedAt DeletionEventSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	DeletionEventSortKeysID DeletionEventSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	DeletionEventSortKeysRelevance DeletionEventSortKeys = "RELEVANCE"
)

var AllDeletionEventSortKeys = []DeletionEventSortKeys{
	DeletionEventSortKeysCreatedAt,
	DeletionEventSortKeysID,
	DeletionEventSortKeysRelevance,
}

func (e DeletionEventSortKeys) IsValid() bool {
	switch e {
	case DeletionEventSortKeysCreatedAt, DeletionEventSortKeysID, DeletionEventSortKeysRelevance:
		return true
	}
	return false
}

func (e DeletionEventSortKeys) String() string {
	return string(e)
}

func (e *DeletionEventSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeletionEventSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeletionEventSortKeys", str)
	}
	return nil
}

func (e DeletionEventSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The supported subject types of deletion events.
type DeletionEventSubjectType string

const (
	DeletionEventSubjectTypeCollection DeletionEventSubjectType = "COLLECTION"
	DeletionEventSubjectTypeProduct    DeletionEventSubjectType = "PRODUCT"
)

var AllDeletionEventSubjectType = []DeletionEventSubjectType{
	DeletionEventSubjectTypeCollection,
	DeletionEventSubjectTypeProduct,
}

func (e DeletionEventSubjectType) IsValid() bool {
	switch e {
	case DeletionEventSubjectTypeCollection, DeletionEventSubjectTypeProduct:
		return true
	}
	return false
}

func (e DeletionEventSubjectType) String() string {
	return string(e)
}

func (e *DeletionEventSubjectType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeletionEventSubjectType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeletionEventSubjectType", str)
	}
	return nil
}

func (e DeletionEventSubjectType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The field type that the condition will be applied to.
type DeliveryConditionField string

const (
	// Condition will check against the total weight of the order.
	DeliveryConditionFieldTotalWeight DeliveryConditionField = "TOTAL_WEIGHT"
	// Condition will check against the total price of the order.
	DeliveryConditionFieldTotalPrice DeliveryConditionField = "TOTAL_PRICE"
)

var AllDeliveryConditionField = []DeliveryConditionField{
	DeliveryConditionFieldTotalWeight,
	DeliveryConditionFieldTotalPrice,
}

func (e DeliveryConditionField) IsValid() bool {
	switch e {
	case DeliveryConditionFieldTotalWeight, DeliveryConditionFieldTotalPrice:
		return true
	}
	return false
}

func (e DeliveryConditionField) String() string {
	return string(e)
}

func (e *DeliveryConditionField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryConditionField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryConditionField", str)
	}
	return nil
}

func (e DeliveryConditionField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The operator to use to determine if the condition passes.
type DeliveryConditionOperator string

const (
	// The condition will check if the field is greater than or equal to the criteria.
	DeliveryConditionOperatorGreaterThanOrEqualTo DeliveryConditionOperator = "GREATER_THAN_OR_EQUAL_TO"
	// The condition will check if the field is less than or equal to the criteria.
	DeliveryConditionOperatorLessThanOrEqualTo DeliveryConditionOperator = "LESS_THAN_OR_EQUAL_TO"
)

var AllDeliveryConditionOperator = []DeliveryConditionOperator{
	DeliveryConditionOperatorGreaterThanOrEqualTo,
	DeliveryConditionOperatorLessThanOrEqualTo,
}

func (e DeliveryConditionOperator) IsValid() bool {
	switch e {
	case DeliveryConditionOperatorGreaterThanOrEqualTo, DeliveryConditionOperatorLessThanOrEqualTo:
		return true
	}
	return false
}

func (e DeliveryConditionOperator) String() string {
	return string(e)
}

func (e *DeliveryConditionOperator) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryConditionOperator(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryConditionOperator", str)
	}
	return nil
}

func (e DeliveryConditionOperator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Reasons the shop is blocked from converting to full multi-location delivery profiles mode.
type DeliveryLegacyModeBlockedReason string

const (
	// Multi-Location is disabled.
	DeliveryLegacyModeBlockedReasonMultiLocationDisabled DeliveryLegacyModeBlockedReason = "MULTI_LOCATION_DISABLED"
	// No locations that can fulfill online orders.
	DeliveryLegacyModeBlockedReasonNoLocationsFulfillingOnlineOrders DeliveryLegacyModeBlockedReason = "NO_LOCATIONS_FULFILLING_ONLINE_ORDERS"
)

var AllDeliveryLegacyModeBlockedReason = []DeliveryLegacyModeBlockedReason{
	DeliveryLegacyModeBlockedReasonMultiLocationDisabled,
	DeliveryLegacyModeBlockedReasonNoLocationsFulfillingOnlineOrders,
}

func (e DeliveryLegacyModeBlockedReason) IsValid() bool {
	switch e {
	case DeliveryLegacyModeBlockedReasonMultiLocationDisabled, DeliveryLegacyModeBlockedReasonNoLocationsFulfillingOnlineOrders:
		return true
	}
	return false
}

func (e DeliveryLegacyModeBlockedReason) String() string {
	return string(e)
}

func (e *DeliveryLegacyModeBlockedReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryLegacyModeBlockedReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryLegacyModeBlockedReason", str)
	}
	return nil
}

func (e DeliveryLegacyModeBlockedReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The different types of method definitions to filter by.
type DeliveryMethodDefinitionType string

const (
	// Static mechant-defined rates.
	DeliveryMethodDefinitionTypeMerchant DeliveryMethodDefinitionType = "MERCHANT"
	// Dynamic participant rates.
	DeliveryMethodDefinitionTypeParticipant DeliveryMethodDefinitionType = "PARTICIPANT"
)

var AllDeliveryMethodDefinitionType = []DeliveryMethodDefinitionType{
	DeliveryMethodDefinitionTypeMerchant,
	DeliveryMethodDefinitionTypeParticipant,
}

func (e DeliveryMethodDefinitionType) IsValid() bool {
	switch e {
	case DeliveryMethodDefinitionTypeMerchant, DeliveryMethodDefinitionTypeParticipant:
		return true
	}
	return false
}

func (e DeliveryMethodDefinitionType) String() string {
	return string(e)
}

func (e *DeliveryMethodDefinitionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryMethodDefinitionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryMethodDefinitionType", str)
	}
	return nil
}

func (e DeliveryMethodDefinitionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible method types that a delivery method can have.
type DeliveryMethodType string

const (
	// Shipping delivery method.
	DeliveryMethodTypeShipping DeliveryMethodType = "SHIPPING"
	// Pick-up delivery method.
	DeliveryMethodTypePickUp DeliveryMethodType = "PICK_UP"
	// No delivery method.
	DeliveryMethodTypeNone DeliveryMethodType = "NONE"
	// Retail delivery method represents items delivered immediately in a retail store.
	DeliveryMethodTypeRetail DeliveryMethodType = "RETAIL"
	// Local delivery method.
	DeliveryMethodTypeLocal DeliveryMethodType = "LOCAL"
)

var AllDeliveryMethodType = []DeliveryMethodType{
	DeliveryMethodTypeShipping,
	DeliveryMethodTypePickUp,
	DeliveryMethodTypeNone,
	DeliveryMethodTypeRetail,
	DeliveryMethodTypeLocal,
}

func (e DeliveryMethodType) IsValid() bool {
	switch e {
	case DeliveryMethodTypeShipping, DeliveryMethodTypePickUp, DeliveryMethodTypeNone, DeliveryMethodTypeRetail, DeliveryMethodTypeLocal:
		return true
	}
	return false
}

func (e DeliveryMethodType) String() string {
	return string(e)
}

func (e *DeliveryMethodType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryMethodType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryMethodType", str)
	}
	return nil
}

func (e DeliveryMethodType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Digital wallet, such as Apple Pay, which can be used for accelerated checkouts.
type DigitalWallet string

const (
	// Apple Pay.
	DigitalWalletApplePay DigitalWallet = "APPLE_PAY"
	// Android Pay.
	DigitalWalletAndroidPay DigitalWallet = "ANDROID_PAY"
	// Google Pay.
	DigitalWalletGooglePay DigitalWallet = "GOOGLE_PAY"
	// Shopify Pay.
	DigitalWalletShopifyPay DigitalWallet = "SHOPIFY_PAY"
)

var AllDigitalWallet = []DigitalWallet{
	DigitalWalletApplePay,
	DigitalWalletAndroidPay,
	DigitalWalletGooglePay,
	DigitalWalletShopifyPay,
}

func (e DigitalWallet) IsValid() bool {
	switch e {
	case DigitalWalletApplePay, DigitalWalletAndroidPay, DigitalWalletGooglePay, DigitalWalletShopifyPay:
		return true
	}
	return false
}

func (e DigitalWallet) String() string {
	return string(e)
}

func (e *DigitalWallet) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DigitalWallet(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DigitalWallet", str)
	}
	return nil
}

func (e DigitalWallet) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The method by which the discount's value is allocated onto its entitled lines.
type DiscountApplicationAllocationMethod string

const (
	// The value is spread across all entitled lines.
	DiscountApplicationAllocationMethodAcross DiscountApplicationAllocationMethod = "ACROSS"
	// The value is applied onto every entitled line.
	DiscountApplicationAllocationMethodEach DiscountApplicationAllocationMethod = "EACH"
	// The value is specifically applied onto a particular line.
	DiscountApplicationAllocationMethodOne DiscountApplicationAllocationMethod = "ONE"
)

var AllDiscountApplicationAllocationMethod = []DiscountApplicationAllocationMethod{
	DiscountApplicationAllocationMethodAcross,
	DiscountApplicationAllocationMethodEach,
	DiscountApplicationAllocationMethodOne,
}

func (e DiscountApplicationAllocationMethod) IsValid() bool {
	switch e {
	case DiscountApplicationAllocationMethodAcross, DiscountApplicationAllocationMethodEach, DiscountApplicationAllocationMethodOne:
		return true
	}
	return false
}

func (e DiscountApplicationAllocationMethod) String() string {
	return string(e)
}

func (e *DiscountApplicationAllocationMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountApplicationAllocationMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountApplicationAllocationMethod", str)
	}
	return nil
}

func (e DiscountApplicationAllocationMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The method by which the discount's value is allocated onto its entitled lines.
type DiscountApplicationLevel string

const (
	// The discount was applied at the order level.
	// Order level discounts are not factored into the discountedUnitPriceSet on line items.
	DiscountApplicationLevelOrder DiscountApplicationLevel = "ORDER"
	// The discount was applied at the line level.
	// Line level discounts are factored into the discountedUnitPriceSet on line items.
	DiscountApplicationLevelLine DiscountApplicationLevel = "LINE"
)

var AllDiscountApplicationLevel = []DiscountApplicationLevel{
	DiscountApplicationLevelOrder,
	DiscountApplicationLevelLine,
}

func (e DiscountApplicationLevel) IsValid() bool {
	switch e {
	case DiscountApplicationLevelOrder, DiscountApplicationLevelLine:
		return true
	}
	return false
}

func (e DiscountApplicationLevel) String() string {
	return string(e)
}

func (e *DiscountApplicationLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountApplicationLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountApplicationLevel", str)
	}
	return nil
}

func (e DiscountApplicationLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Which lines on the order that the discount is allocated over, of the type
// defined by the Discount Application's target_type.
type DiscountApplicationTargetSelection string

const (
	// The discount is allocated onto all the lines.
	DiscountApplicationTargetSelectionAll DiscountApplicationTargetSelection = "ALL"
	// The discount is allocated onto only the lines it is entitled for.
	DiscountApplicationTargetSelectionEntitled DiscountApplicationTargetSelection = "ENTITLED"
	// The discount is allocated onto explicitly chosen lines.
	DiscountApplicationTargetSelectionExplicit DiscountApplicationTargetSelection = "EXPLICIT"
)

var AllDiscountApplicationTargetSelection = []DiscountApplicationTargetSelection{
	DiscountApplicationTargetSelectionAll,
	DiscountApplicationTargetSelectionEntitled,
	DiscountApplicationTargetSelectionExplicit,
}

func (e DiscountApplicationTargetSelection) IsValid() bool {
	switch e {
	case DiscountApplicationTargetSelectionAll, DiscountApplicationTargetSelectionEntitled, DiscountApplicationTargetSelectionExplicit:
		return true
	}
	return false
}

func (e DiscountApplicationTargetSelection) String() string {
	return string(e)
}

func (e *DiscountApplicationTargetSelection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountApplicationTargetSelection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountApplicationTargetSelection", str)
	}
	return nil
}

func (e DiscountApplicationTargetSelection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards.
type DiscountApplicationTargetType string

const (
	// The discount applies onto line items.
	DiscountApplicationTargetTypeLineItem DiscountApplicationTargetType = "LINE_ITEM"
	// The discount applies onto shipping lines.
	DiscountApplicationTargetTypeShippingLine DiscountApplicationTargetType = "SHIPPING_LINE"
)

var AllDiscountApplicationTargetType = []DiscountApplicationTargetType{
	DiscountApplicationTargetTypeLineItem,
	DiscountApplicationTargetTypeShippingLine,
}

func (e DiscountApplicationTargetType) IsValid() bool {
	switch e {
	case DiscountApplicationTargetTypeLineItem, DiscountApplicationTargetTypeShippingLine:
		return true
	}
	return false
}

func (e DiscountApplicationTargetType) String() string {
	return string(e)
}

func (e *DiscountApplicationTargetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountApplicationTargetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountApplicationTargetType", str)
	}
	return nil
}

func (e DiscountApplicationTargetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the DiscountCode query.
type DiscountCodeSortKeys string

const (
	// Sort by the `code` value.
	DiscountCodeSortKeysCode DiscountCodeSortKeys = "CODE"
	// Sort by the `created_at` value.
	DiscountCodeSortKeysCreatedAt DiscountCodeSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	DiscountCodeSortKeysID DiscountCodeSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	DiscountCodeSortKeysRelevance DiscountCodeSortKeys = "RELEVANCE"
)

var AllDiscountCodeSortKeys = []DiscountCodeSortKeys{
	DiscountCodeSortKeysCode,
	DiscountCodeSortKeysCreatedAt,
	DiscountCodeSortKeysID,
	DiscountCodeSortKeysRelevance,
}

func (e DiscountCodeSortKeys) IsValid() bool {
	switch e {
	case DiscountCodeSortKeysCode, DiscountCodeSortKeysCreatedAt, DiscountCodeSortKeysID, DiscountCodeSortKeysRelevance:
		return true
	}
	return false
}

func (e DiscountCodeSortKeys) String() string {
	return string(e)
}

func (e *DiscountCodeSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountCodeSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountCodeSortKeys", str)
	}
	return nil
}

func (e DiscountCodeSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that could be returned by DiscountUserError.
type DiscountErrorCode string

const (
	// Input value is blank.
	DiscountErrorCodeBlank DiscountErrorCode = "BLANK"
	// Input value is not present.
	DiscountErrorCodePresent DiscountErrorCode = "PRESENT"
	// Input value should be equal to allowed value.
	DiscountErrorCodeEqualTo DiscountErrorCode = "EQUAL_TO"
	// Input value should be greater than minimum allowed value.
	DiscountErrorCodeGreaterThan DiscountErrorCode = "GREATER_THAN"
	// Input value should be greater than or equal to minimum allowed value.
	DiscountErrorCodeGreaterThanOrEqualTo DiscountErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// Input value is invalid.
	DiscountErrorCodeInvalid DiscountErrorCode = "INVALID"
	// Input value should be less or equal to maximum allowed value.
	DiscountErrorCodeLessThanOrEqualTo DiscountErrorCode = "LESS_THAN_OR_EQUAL_TO"
	// Input value should be less than maximum allowed value.
	DiscountErrorCodeLessThan DiscountErrorCode = "LESS_THAN"
	// Input value is already taken.
	DiscountErrorCodeTaken DiscountErrorCode = "TAKEN"
	// Input value is too long.
	DiscountErrorCodeTooLong DiscountErrorCode = "TOO_LONG"
	// Input value is too short.
	DiscountErrorCodeTooShort DiscountErrorCode = "TOO_SHORT"
	// Unexpected internal error happened.
	DiscountErrorCodeInternalError DiscountErrorCode = "INTERNAL_ERROR"
	// Too many arguments provided.
	DiscountErrorCodeTooManyArguments DiscountErrorCode = "TOO_MANY_ARGUMENTS"
	// Missing a required argument.
	DiscountErrorCodeMissingArgument DiscountErrorCode = "MISSING_ARGUMENT"
	// Value is outside allowed range.
	DiscountErrorCodeValueOutsideRange DiscountErrorCode = "VALUE_OUTSIDE_RANGE"
	// Cannot have both minimum subtotal and quantity present.
	DiscountErrorCodeMinimumSubtotalAndQuantityRangeBothPresent DiscountErrorCode = "MINIMUM_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT"
	// Exceeded maximum allowed value.
	DiscountErrorCodeExceededMax DiscountErrorCode = "EXCEEDED_MAX"
	// Active period overlaps with other automatic discounts. At any given time, only one automatic discount can be active.
	DiscountErrorCodeActivePeriodOverlap DiscountErrorCode = "ACTIVE_PERIOD_OVERLAP"
	// Attribute selection contains conflicting settings.
	DiscountErrorCodeConflict DiscountErrorCode = "CONFLICT"
	// Value is already present through another selection.
	DiscountErrorCodeImplicitDuplicate DiscountErrorCode = "IMPLICIT_DUPLICATE"
	// Input value is already present.
	DiscountErrorCodeDuplicate DiscountErrorCode = "DUPLICATE"
	// Input value is not included in the list.
	DiscountErrorCodeInclusion DiscountErrorCode = "INCLUSION"
)

var AllDiscountErrorCode = []DiscountErrorCode{
	DiscountErrorCodeBlank,
	DiscountErrorCodePresent,
	DiscountErrorCodeEqualTo,
	DiscountErrorCodeGreaterThan,
	DiscountErrorCodeGreaterThanOrEqualTo,
	DiscountErrorCodeInvalid,
	DiscountErrorCodeLessThanOrEqualTo,
	DiscountErrorCodeLessThan,
	DiscountErrorCodeTaken,
	DiscountErrorCodeTooLong,
	DiscountErrorCodeTooShort,
	DiscountErrorCodeInternalError,
	DiscountErrorCodeTooManyArguments,
	DiscountErrorCodeMissingArgument,
	DiscountErrorCodeValueOutsideRange,
	DiscountErrorCodeMinimumSubtotalAndQuantityRangeBothPresent,
	DiscountErrorCodeExceededMax,
	DiscountErrorCodeActivePeriodOverlap,
	DiscountErrorCodeConflict,
	DiscountErrorCodeImplicitDuplicate,
	DiscountErrorCodeDuplicate,
	DiscountErrorCodeInclusion,
}

func (e DiscountErrorCode) IsValid() bool {
	switch e {
	case DiscountErrorCodeBlank, DiscountErrorCodePresent, DiscountErrorCodeEqualTo, DiscountErrorCodeGreaterThan, DiscountErrorCodeGreaterThanOrEqualTo, DiscountErrorCodeInvalid, DiscountErrorCodeLessThanOrEqualTo, DiscountErrorCodeLessThan, DiscountErrorCodeTaken, DiscountErrorCodeTooLong, DiscountErrorCodeTooShort, DiscountErrorCodeInternalError, DiscountErrorCodeTooManyArguments, DiscountErrorCodeMissingArgument, DiscountErrorCodeValueOutsideRange, DiscountErrorCodeMinimumSubtotalAndQuantityRangeBothPresent, DiscountErrorCodeExceededMax, DiscountErrorCodeActivePeriodOverlap, DiscountErrorCodeConflict, DiscountErrorCodeImplicitDuplicate, DiscountErrorCodeDuplicate, DiscountErrorCodeInclusion:
		return true
	}
	return false
}

func (e DiscountErrorCode) String() string {
	return string(e)
}

func (e *DiscountErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountErrorCode", str)
	}
	return nil
}

func (e DiscountErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The page type where shareable URL lands.
type DiscountShareableURLTargetType string

const (
	// The home page type.
	DiscountShareableURLTargetTypeHome DiscountShareableURLTargetType = "HOME"
	// The product page type.
	DiscountShareableURLTargetTypeProduct DiscountShareableURLTargetType = "PRODUCT"
	// The collection page type.
	DiscountShareableURLTargetTypeCollection DiscountShareableURLTargetType = "COLLECTION"
)

var AllDiscountShareableURLTargetType = []DiscountShareableURLTargetType{
	DiscountShareableURLTargetTypeHome,
	DiscountShareableURLTargetTypeProduct,
	DiscountShareableURLTargetTypeCollection,
}

func (e DiscountShareableURLTargetType) IsValid() bool {
	switch e {
	case DiscountShareableURLTargetTypeHome, DiscountShareableURLTargetTypeProduct, DiscountShareableURLTargetTypeCollection:
		return true
	}
	return false
}

func (e DiscountShareableURLTargetType) String() string {
	return string(e)
}

func (e *DiscountShareableURLTargetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountShareableURLTargetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountShareableUrlTargetType", str)
	}
	return nil
}

func (e DiscountShareableURLTargetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of the discount.
type DiscountStatus string

const (
	// The discount is active.
	DiscountStatusActive DiscountStatus = "ACTIVE"
	// The discount is expired.
	DiscountStatusExpired DiscountStatus = "EXPIRED"
	// The discount is scheduled.
	DiscountStatusScheduled DiscountStatus = "SCHEDULED"
)

var AllDiscountStatus = []DiscountStatus{
	DiscountStatusActive,
	DiscountStatusExpired,
	DiscountStatusScheduled,
}

func (e DiscountStatus) IsValid() bool {
	switch e {
	case DiscountStatusActive, DiscountStatusExpired, DiscountStatusScheduled:
		return true
	}
	return false
}

func (e DiscountStatus) String() string {
	return string(e)
}

func (e *DiscountStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountStatus", str)
	}
	return nil
}

func (e DiscountStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of line a subscription discount is applied on.
type DiscountTargetType string

const (
	// Line item.
	DiscountTargetTypeLineItem DiscountTargetType = "LINE_ITEM"
	// Shipping line.
	DiscountTargetTypeShippingLine DiscountTargetType = "SHIPPING_LINE"
)

var AllDiscountTargetType = []DiscountTargetType{
	DiscountTargetTypeLineItem,
	DiscountTargetTypeShippingLine,
}

func (e DiscountTargetType) IsValid() bool {
	switch e {
	case DiscountTargetTypeLineItem, DiscountTargetTypeShippingLine:
		return true
	}
	return false
}

func (e DiscountTargetType) String() string {
	return string(e)
}

func (e *DiscountTargetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountTargetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountTargetType", str)
	}
	return nil
}

func (e DiscountTargetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The original type of the discount.
type DiscountType string

const (
	// Manual discount type.
	DiscountTypeManual DiscountType = "MANUAL"
	// Code discount type.
	DiscountTypeCodeDiscount DiscountType = "CODE_DISCOUNT"
)

var AllDiscountType = []DiscountType{
	DiscountTypeManual,
	DiscountTypeCodeDiscount,
}

func (e DiscountType) IsValid() bool {
	switch e {
	case DiscountTypeManual, DiscountTypeCodeDiscount:
		return true
	}
	return false
}

func (e DiscountType) String() string {
	return string(e)
}

func (e *DiscountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountType", str)
	}
	return nil
}

func (e DiscountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible statuses of a dispute.
type DisputeStatus string

const (
	DisputeStatusNeedsResponse  DisputeStatus = "NEEDS_RESPONSE"
	DisputeStatusUnderReview    DisputeStatus = "UNDER_REVIEW"
	DisputeStatusChargeRefunded DisputeStatus = "CHARGE_REFUNDED"
	DisputeStatusAccepted       DisputeStatus = "ACCEPTED"
	DisputeStatusWon            DisputeStatus = "WON"
	DisputeStatusLost           DisputeStatus = "LOST"
)

var AllDisputeStatus = []DisputeStatus{
	DisputeStatusNeedsResponse,
	DisputeStatusUnderReview,
	DisputeStatusChargeRefunded,
	DisputeStatusAccepted,
	DisputeStatusWon,
	DisputeStatusLost,
}

func (e DisputeStatus) IsValid() bool {
	switch e {
	case DisputeStatusNeedsResponse, DisputeStatusUnderReview, DisputeStatusChargeRefunded, DisputeStatusAccepted, DisputeStatusWon, DisputeStatusLost:
		return true
	}
	return false
}

func (e DisputeStatus) String() string {
	return string(e)
}

func (e *DisputeStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DisputeStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DisputeStatus", str)
	}
	return nil
}

func (e DisputeStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible types for a dispute.
type DisputeType string

const (
	// The dispute has turned into a chargeback.
	DisputeTypeChargeback DisputeType = "CHARGEBACK"
	// The dispute is in the inquiry phase.
	DisputeTypeInquiry DisputeType = "INQUIRY"
)

var AllDisputeType = []DisputeType{
	DisputeTypeChargeback,
	DisputeTypeInquiry,
}

func (e DisputeType) IsValid() bool {
	switch e {
	case DisputeTypeChargeback, DisputeTypeInquiry:
		return true
	}
	return false
}

func (e DisputeType) String() string {
	return string(e)
}

func (e *DisputeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DisputeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DisputeType", str)
	}
	return nil
}

func (e DisputeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid discount types that can be applied to a draft order.
type DraftOrderAppliedDiscountType string

const (
	// A fixed amount in the store's currency.
	DraftOrderAppliedDiscountTypeFixedAmount DraftOrderAppliedDiscountType = "FIXED_AMOUNT"
	// A percentage of the order subtotal.
	DraftOrderAppliedDiscountTypePercentage DraftOrderAppliedDiscountType = "PERCENTAGE"
)

var AllDraftOrderAppliedDiscountType = []DraftOrderAppliedDiscountType{
	DraftOrderAppliedDiscountTypeFixedAmount,
	DraftOrderAppliedDiscountTypePercentage,
}

func (e DraftOrderAppliedDiscountType) IsValid() bool {
	switch e {
	case DraftOrderAppliedDiscountTypeFixedAmount, DraftOrderAppliedDiscountTypePercentage:
		return true
	}
	return false
}

func (e DraftOrderAppliedDiscountType) String() string {
	return string(e)
}

func (e *DraftOrderAppliedDiscountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DraftOrderAppliedDiscountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DraftOrderAppliedDiscountType", str)
	}
	return nil
}

func (e DraftOrderAppliedDiscountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the DraftOrder query.
type DraftOrderSortKeys string

const (
	// Sort by the `number` value.
	DraftOrderSortKeysNumber DraftOrderSortKeys = "NUMBER"
	// Sort by the `updated_at` value.
	DraftOrderSortKeysUpdatedAt DraftOrderSortKeys = "UPDATED_AT"
	// Sort by the `status` value.
	DraftOrderSortKeysStatus DraftOrderSortKeys = "STATUS"
	// Sort by the `total_price` value.
	DraftOrderSortKeysTotalPrice DraftOrderSortKeys = "TOTAL_PRICE"
	// Sort by the `customer_name` value.
	DraftOrderSortKeysCustomerName DraftOrderSortKeys = "CUSTOMER_NAME"
	// Sort by the `id` value.
	DraftOrderSortKeysID DraftOrderSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	DraftOrderSortKeysRelevance DraftOrderSortKeys = "RELEVANCE"
)

var AllDraftOrderSortKeys = []DraftOrderSortKeys{
	DraftOrderSortKeysNumber,
	DraftOrderSortKeysUpdatedAt,
	DraftOrderSortKeysStatus,
	DraftOrderSortKeysTotalPrice,
	DraftOrderSortKeysCustomerName,
	DraftOrderSortKeysID,
	DraftOrderSortKeysRelevance,
}

func (e DraftOrderSortKeys) IsValid() bool {
	switch e {
	case DraftOrderSortKeysNumber, DraftOrderSortKeysUpdatedAt, DraftOrderSortKeysStatus, DraftOrderSortKeysTotalPrice, DraftOrderSortKeysCustomerName, DraftOrderSortKeysID, DraftOrderSortKeysRelevance:
		return true
	}
	return false
}

func (e DraftOrderSortKeys) String() string {
	return string(e)
}

func (e *DraftOrderSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DraftOrderSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DraftOrderSortKeys", str)
	}
	return nil
}

func (e DraftOrderSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The valid statuses for a draft order.
type DraftOrderStatus string

const (
	// The draft order has been paid.
	DraftOrderStatusCompleted DraftOrderStatus = "COMPLETED"
	// An invoice for the draft order has been sent to the customer.
	DraftOrderStatusInvoiceSent DraftOrderStatus = "INVOICE_SENT"
	// The draft order is open. It has not been paid, and an invoice hasn't been sent.
	DraftOrderStatusOpen DraftOrderStatus = "OPEN"
)

var AllDraftOrderStatus = []DraftOrderStatus{
	DraftOrderStatusCompleted,
	DraftOrderStatusInvoiceSent,
	DraftOrderStatusOpen,
}

func (e DraftOrderStatus) IsValid() bool {
	switch e {
	case DraftOrderStatusCompleted, DraftOrderStatusInvoiceSent, DraftOrderStatusOpen:
		return true
	}
	return false
}

func (e DraftOrderStatus) String() string {
	return string(e)
}

func (e *DraftOrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DraftOrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DraftOrderStatus", str)
	}
	return nil
}

func (e DraftOrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Event query.
type EventSortKeys string

const (
	// Sort by the `created_at` value.
	EventSortKeysCreatedAt EventSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	EventSortKeysID EventSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	EventSortKeysRelevance EventSortKeys = "RELEVANCE"
)

var AllEventSortKeys = []EventSortKeys{
	EventSortKeysCreatedAt,
	EventSortKeysID,
	EventSortKeysRelevance,
}

func (e EventSortKeys) IsValid() bool {
	switch e {
	case EventSortKeysCreatedAt, EventSortKeysID, EventSortKeysRelevance:
		return true
	}
	return false
}

func (e EventSortKeys) String() string {
	return string(e)
}

func (e *EventSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventSortKeys", str)
	}
	return nil
}

func (e EventSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The display status of a fulfillment.
type FulfillmentDisplayStatus string

const (
	// Displayed as **Attempted delivery**.
	FulfillmentDisplayStatusAttemptedDelivery FulfillmentDisplayStatus = "ATTEMPTED_DELIVERY"
	// Displayed as **Canceled**.
	FulfillmentDisplayStatusCanceled FulfillmentDisplayStatus = "CANCELED"
	// Displayed as **Confirmed**.
	FulfillmentDisplayStatusConfirmed FulfillmentDisplayStatus = "CONFIRMED"
	// Displayed as **Delivered**.
	FulfillmentDisplayStatusDelivered FulfillmentDisplayStatus = "DELIVERED"
	// Displayed as **Failure**.
	FulfillmentDisplayStatusFailure FulfillmentDisplayStatus = "FAILURE"
	// Displayed as **Fulfilled**.
	FulfillmentDisplayStatusFulfilled FulfillmentDisplayStatus = "FULFILLED"
	// Displayed as **In transit**.
	FulfillmentDisplayStatusInTransit FulfillmentDisplayStatus = "IN_TRANSIT"
	// Displayed as **Label printed**.
	FulfillmentDisplayStatusLabelPrinted FulfillmentDisplayStatus = "LABEL_PRINTED"
	// Displayed as **Label purchased**.
	FulfillmentDisplayStatusLabelPurchased FulfillmentDisplayStatus = "LABEL_PURCHASED"
	// Displayed as **Label voided**.
	FulfillmentDisplayStatusLabelVoided FulfillmentDisplayStatus = "LABEL_VOIDED"
	// Displayed as **Marked as fulfilled**.
	FulfillmentDisplayStatusMarkedAsFulfilled FulfillmentDisplayStatus = "MARKED_AS_FULFILLED"
	// Displayed as **Not delivered**.
	FulfillmentDisplayStatusNotDelivered FulfillmentDisplayStatus = "NOT_DELIVERED"
	// Displayed as **Out for delivery**.
	FulfillmentDisplayStatusOutForDelivery FulfillmentDisplayStatus = "OUT_FOR_DELIVERY"
	// Displayed as **Ready for pickup**.
	FulfillmentDisplayStatusReadyForPickup FulfillmentDisplayStatus = "READY_FOR_PICKUP"
	// Displayed as **Picked up**.
	FulfillmentDisplayStatusPickedUp FulfillmentDisplayStatus = "PICKED_UP"
	// Displayed as **Submitted**.
	FulfillmentDisplayStatusSubmitted FulfillmentDisplayStatus = "SUBMITTED"
)

var AllFulfillmentDisplayStatus = []FulfillmentDisplayStatus{
	FulfillmentDisplayStatusAttemptedDelivery,
	FulfillmentDisplayStatusCanceled,
	FulfillmentDisplayStatusConfirmed,
	FulfillmentDisplayStatusDelivered,
	FulfillmentDisplayStatusFailure,
	FulfillmentDisplayStatusFulfilled,
	FulfillmentDisplayStatusInTransit,
	FulfillmentDisplayStatusLabelPrinted,
	FulfillmentDisplayStatusLabelPurchased,
	FulfillmentDisplayStatusLabelVoided,
	FulfillmentDisplayStatusMarkedAsFulfilled,
	FulfillmentDisplayStatusNotDelivered,
	FulfillmentDisplayStatusOutForDelivery,
	FulfillmentDisplayStatusReadyForPickup,
	FulfillmentDisplayStatusPickedUp,
	FulfillmentDisplayStatusSubmitted,
}

func (e FulfillmentDisplayStatus) IsValid() bool {
	switch e {
	case FulfillmentDisplayStatusAttemptedDelivery, FulfillmentDisplayStatusCanceled, FulfillmentDisplayStatusConfirmed, FulfillmentDisplayStatusDelivered, FulfillmentDisplayStatusFailure, FulfillmentDisplayStatusFulfilled, FulfillmentDisplayStatusInTransit, FulfillmentDisplayStatusLabelPrinted, FulfillmentDisplayStatusLabelPurchased, FulfillmentDisplayStatusLabelVoided, FulfillmentDisplayStatusMarkedAsFulfilled, FulfillmentDisplayStatusNotDelivered, FulfillmentDisplayStatusOutForDelivery, FulfillmentDisplayStatusReadyForPickup, FulfillmentDisplayStatusPickedUp, FulfillmentDisplayStatusSubmitted:
		return true
	}
	return false
}

func (e FulfillmentDisplayStatus) String() string {
	return string(e)
}

func (e *FulfillmentDisplayStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentDisplayStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentDisplayStatus", str)
	}
	return nil
}

func (e FulfillmentDisplayStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the FulfillmentEvent query.
type FulfillmentEventSortKeys string

const (
	// Sort by the `happened_at` value.
	FulfillmentEventSortKeysHappenedAt FulfillmentEventSortKeys = "HAPPENED_AT"
	// Sort by the `id` value.
	FulfillmentEventSortKeysID FulfillmentEventSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	FulfillmentEventSortKeysRelevance FulfillmentEventSortKeys = "RELEVANCE"
)

var AllFulfillmentEventSortKeys = []FulfillmentEventSortKeys{
	FulfillmentEventSortKeysHappenedAt,
	FulfillmentEventSortKeysID,
	FulfillmentEventSortKeysRelevance,
}

func (e FulfillmentEventSortKeys) IsValid() bool {
	switch e {
	case FulfillmentEventSortKeysHappenedAt, FulfillmentEventSortKeysID, FulfillmentEventSortKeysRelevance:
		return true
	}
	return false
}

func (e FulfillmentEventSortKeys) String() string {
	return string(e)
}

func (e *FulfillmentEventSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentEventSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentEventSortKeys", str)
	}
	return nil
}

func (e FulfillmentEventSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Event status' describe the status of a fulfillment.
type FulfillmentEventStatus string

const (
	// A shipping label has been purchased.
	FulfillmentEventStatusLabelPurchased FulfillmentEventStatus = "LABEL_PURCHASED"
	// A purchased shipping label has been printed.
	FulfillmentEventStatusLabelPrinted FulfillmentEventStatus = "LABEL_PRINTED"
	// The fulfillment is ready to be picked up.
	FulfillmentEventStatusReadyForPickup FulfillmentEventStatus = "READY_FOR_PICKUP"
	// The fulfillment is confirmed.
	FulfillmentEventStatusConfirmed FulfillmentEventStatus = "CONFIRMED"
	// The fulfillment is in transit.
	FulfillmentEventStatusInTransit FulfillmentEventStatus = "IN_TRANSIT"
	// The fulfillment is out for delivery.
	FulfillmentEventStatusOutForDelivery FulfillmentEventStatus = "OUT_FOR_DELIVERY"
	// A delivery was attempted.
	FulfillmentEventStatusAttemptedDelivery FulfillmentEventStatus = "ATTEMPTED_DELIVERY"
	// The fulfillment was successfully delivered.
	FulfillmentEventStatusDelivered FulfillmentEventStatus = "DELIVERED"
	// The fulfillment request failed.
	FulfillmentEventStatusFailure FulfillmentEventStatus = "FAILURE"
)

var AllFulfillmentEventStatus = []FulfillmentEventStatus{
	FulfillmentEventStatusLabelPurchased,
	FulfillmentEventStatusLabelPrinted,
	FulfillmentEventStatusReadyForPickup,
	FulfillmentEventStatusConfirmed,
	FulfillmentEventStatusInTransit,
	FulfillmentEventStatusOutForDelivery,
	FulfillmentEventStatusAttemptedDelivery,
	FulfillmentEventStatusDelivered,
	FulfillmentEventStatusFailure,
}

func (e FulfillmentEventStatus) IsValid() bool {
	switch e {
	case FulfillmentEventStatusLabelPurchased, FulfillmentEventStatusLabelPrinted, FulfillmentEventStatusReadyForPickup, FulfillmentEventStatusConfirmed, FulfillmentEventStatusInTransit, FulfillmentEventStatusOutForDelivery, FulfillmentEventStatusAttemptedDelivery, FulfillmentEventStatusDelivered, FulfillmentEventStatusFailure:
		return true
	}
	return false
}

func (e FulfillmentEventStatus) String() string {
	return string(e)
}

func (e *FulfillmentEventStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentEventStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentEventStatus", str)
	}
	return nil
}

func (e FulfillmentEventStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The actions that can be taken on a fulfillment order.
type FulfillmentOrderAction string

const (
	// Create a fulfillment for selected line items in the fulfillment order. The corresponding mutation for this action is FulfillmentCreateV2.
	FulfillmentOrderActionCreateFulfillment FulfillmentOrderAction = "CREATE_FULFILLMENT"
	// Send a request for fulfilling selected line items in a fulfillment order to a fulfillment service. The corresponding mutation for this action is FulfillmentOrderSubmitFulfillmentRequest.
	FulfillmentOrderActionRequestFulfillment FulfillmentOrderAction = "REQUEST_FULFILLMENT"
	// Cancel a fulfillment order. The corresponding mutation for this action is FulfillmentOrderCancel.
	FulfillmentOrderActionCancelFulfillmentOrder FulfillmentOrderAction = "CANCEL_FULFILLMENT_ORDER"
	// Move a fulfillment order. The corresponding mutation for this action is FulfillmentOrderMove.
	FulfillmentOrderActionMove FulfillmentOrderAction = "MOVE"
	// Send a cancellation request to the fulfillment service of a fulfillment order. The corresponding mutation for this action is FulfillmentOrderSubmitCancellationRequest.
	FulfillmentOrderActionRequestCancellation FulfillmentOrderAction = "REQUEST_CANCELLATION"
	// Mark the fulfillment order as open.
	FulfillmentOrderActionMarkAsOpen FulfillmentOrderAction = "MARK_AS_OPEN"
	// Open an external URL to initiate the fulfillment process outside Shopify.
	FulfillmentOrderActionExternal FulfillmentOrderAction = "EXTERNAL"
)

var AllFulfillmentOrderAction = []FulfillmentOrderAction{
	FulfillmentOrderActionCreateFulfillment,
	FulfillmentOrderActionRequestFulfillment,
	FulfillmentOrderActionCancelFulfillmentOrder,
	FulfillmentOrderActionMove,
	FulfillmentOrderActionRequestCancellation,
	FulfillmentOrderActionMarkAsOpen,
	FulfillmentOrderActionExternal,
}

func (e FulfillmentOrderAction) IsValid() bool {
	switch e {
	case FulfillmentOrderActionCreateFulfillment, FulfillmentOrderActionRequestFulfillment, FulfillmentOrderActionCancelFulfillmentOrder, FulfillmentOrderActionMove, FulfillmentOrderActionRequestCancellation, FulfillmentOrderActionMarkAsOpen, FulfillmentOrderActionExternal:
		return true
	}
	return false
}

func (e FulfillmentOrderAction) String() string {
	return string(e)
}

func (e *FulfillmentOrderAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderAction", str)
	}
	return nil
}

func (e FulfillmentOrderAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The assigment status to be used to filter fulfillment orders.
type FulfillmentOrderAssignmentStatus string

const (
	// Fulfillment orders for which the merchant has requested cancellation of
	// the previously accepted fulfillment request.
	FulfillmentOrderAssignmentStatusCancellationRequested FulfillmentOrderAssignmentStatus = "CANCELLATION_REQUESTED"
	// Fulfillment orders for which the merchant has requested fulfillment.
	FulfillmentOrderAssignmentStatusFulfillmentRequested FulfillmentOrderAssignmentStatus = "FULFILLMENT_REQUESTED"
	// Fulfillment orders for which the merchant's fulfillment request has been accepted.
	// Any number of fulfillments can be created on these fulfillment orders
	// to completely fulfill the requested items.
	FulfillmentOrderAssignmentStatusFulfillmentAccepted FulfillmentOrderAssignmentStatus = "FULFILLMENT_ACCEPTED"
)

var AllFulfillmentOrderAssignmentStatus = []FulfillmentOrderAssignmentStatus{
	FulfillmentOrderAssignmentStatusCancellationRequested,
	FulfillmentOrderAssignmentStatusFulfillmentRequested,
	FulfillmentOrderAssignmentStatusFulfillmentAccepted,
}

func (e FulfillmentOrderAssignmentStatus) IsValid() bool {
	switch e {
	case FulfillmentOrderAssignmentStatusCancellationRequested, FulfillmentOrderAssignmentStatusFulfillmentRequested, FulfillmentOrderAssignmentStatusFulfillmentAccepted:
		return true
	}
	return false
}

func (e FulfillmentOrderAssignmentStatus) String() string {
	return string(e)
}

func (e *FulfillmentOrderAssignmentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderAssignmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderAssignmentStatus", str)
	}
	return nil
}

func (e FulfillmentOrderAssignmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The kinds of request merchants can make to a fulfillment service.
type FulfillmentOrderMerchantRequestKind string

const (
	// The merchant requested fulfillment for a fulfillment order.
	FulfillmentOrderMerchantRequestKindFulfillmentRequest FulfillmentOrderMerchantRequestKind = "FULFILLMENT_REQUEST"
	// The merchant requested cancellation of an accepted or in-progress fulfillment order.
	FulfillmentOrderMerchantRequestKindCancellationRequest FulfillmentOrderMerchantRequestKind = "CANCELLATION_REQUEST"
)

var AllFulfillmentOrderMerchantRequestKind = []FulfillmentOrderMerchantRequestKind{
	FulfillmentOrderMerchantRequestKindFulfillmentRequest,
	FulfillmentOrderMerchantRequestKindCancellationRequest,
}

func (e FulfillmentOrderMerchantRequestKind) IsValid() bool {
	switch e {
	case FulfillmentOrderMerchantRequestKindFulfillmentRequest, FulfillmentOrderMerchantRequestKindCancellationRequest:
		return true
	}
	return false
}

func (e FulfillmentOrderMerchantRequestKind) String() string {
	return string(e)
}

func (e *FulfillmentOrderMerchantRequestKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderMerchantRequestKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderMerchantRequestKind", str)
	}
	return nil
}

func (e FulfillmentOrderMerchantRequestKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The request status of a fulfillment order.
type FulfillmentOrderRequestStatus string

const (
	// The initial request status for the newly created fulfillment orders. This is the only valid
	// request status for fulfillment orders that aren't assigned to a fulfillment service.
	FulfillmentOrderRequestStatusUnsubmitted FulfillmentOrderRequestStatus = "UNSUBMITTED"
	// The merchant requested fulfillment for this fulfillment order.
	FulfillmentOrderRequestStatusSubmitted FulfillmentOrderRequestStatus = "SUBMITTED"
	// The fulfillment service accepted the merchant's fulfillment request.
	FulfillmentOrderRequestStatusAccepted FulfillmentOrderRequestStatus = "ACCEPTED"
	// The fulfillment service rejected the merchant's fulfillment request.
	FulfillmentOrderRequestStatusRejected FulfillmentOrderRequestStatus = "REJECTED"
	// The merchant requested a cancellation of the fulfillment request for this fulfillment order.
	FulfillmentOrderRequestStatusCancellationRequested FulfillmentOrderRequestStatus = "CANCELLATION_REQUESTED"
	// The fulfillment service accepted the merchant's fulfillment cancellation request.
	FulfillmentOrderRequestStatusCancellationAccepted FulfillmentOrderRequestStatus = "CANCELLATION_ACCEPTED"
	// The fulfillment service rejected the merchant's fulfillment cancellation request.
	FulfillmentOrderRequestStatusCancellationRejected FulfillmentOrderRequestStatus = "CANCELLATION_REJECTED"
	// The fulfillment service closed the fulfillment order without completing it.
	FulfillmentOrderRequestStatusClosed FulfillmentOrderRequestStatus = "CLOSED"
)

var AllFulfillmentOrderRequestStatus = []FulfillmentOrderRequestStatus{
	FulfillmentOrderRequestStatusUnsubmitted,
	FulfillmentOrderRequestStatusSubmitted,
	FulfillmentOrderRequestStatusAccepted,
	FulfillmentOrderRequestStatusRejected,
	FulfillmentOrderRequestStatusCancellationRequested,
	FulfillmentOrderRequestStatusCancellationAccepted,
	FulfillmentOrderRequestStatusCancellationRejected,
	FulfillmentOrderRequestStatusClosed,
}

func (e FulfillmentOrderRequestStatus) IsValid() bool {
	switch e {
	case FulfillmentOrderRequestStatusUnsubmitted, FulfillmentOrderRequestStatusSubmitted, FulfillmentOrderRequestStatusAccepted, FulfillmentOrderRequestStatusRejected, FulfillmentOrderRequestStatusCancellationRequested, FulfillmentOrderRequestStatusCancellationAccepted, FulfillmentOrderRequestStatusCancellationRejected, FulfillmentOrderRequestStatusClosed:
		return true
	}
	return false
}

func (e FulfillmentOrderRequestStatus) String() string {
	return string(e)
}

func (e *FulfillmentOrderRequestStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderRequestStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderRequestStatus", str)
	}
	return nil
}

func (e FulfillmentOrderRequestStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that could be returned by FulfillmentOrderRescheduleUserError.
type FulfillmentOrderRescheduleUserErrorCode string

const (
	// Fulfillment order could not be found.
	FulfillmentOrderRescheduleUserErrorCodeFulfillmentOrderNotFound FulfillmentOrderRescheduleUserErrorCode = "FULFILLMENT_ORDER_NOT_FOUND"
)

var AllFulfillmentOrderRescheduleUserErrorCode = []FulfillmentOrderRescheduleUserErrorCode{
	FulfillmentOrderRescheduleUserErrorCodeFulfillmentOrderNotFound,
}

func (e FulfillmentOrderRescheduleUserErrorCode) IsValid() bool {
	switch e {
	case FulfillmentOrderRescheduleUserErrorCodeFulfillmentOrderNotFound:
		return true
	}
	return false
}

func (e FulfillmentOrderRescheduleUserErrorCode) String() string {
	return string(e)
}

func (e *FulfillmentOrderRescheduleUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderRescheduleUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderRescheduleUserErrorCode", str)
	}
	return nil
}

func (e FulfillmentOrderRescheduleUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the FulfillmentOrder query.
type FulfillmentOrderSortKeys string

const (
	// Sort by the `id` value.
	FulfillmentOrderSortKeysID FulfillmentOrderSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	FulfillmentOrderSortKeysRelevance FulfillmentOrderSortKeys = "RELEVANCE"
)

var AllFulfillmentOrderSortKeys = []FulfillmentOrderSortKeys{
	FulfillmentOrderSortKeysID,
	FulfillmentOrderSortKeysRelevance,
}

func (e FulfillmentOrderSortKeys) IsValid() bool {
	switch e {
	case FulfillmentOrderSortKeysID, FulfillmentOrderSortKeysRelevance:
		return true
	}
	return false
}

func (e FulfillmentOrderSortKeys) String() string {
	return string(e)
}

func (e *FulfillmentOrderSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderSortKeys", str)
	}
	return nil
}

func (e FulfillmentOrderSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of a fulfillment order.
type FulfillmentOrderStatus string

const (
	// The fulfillment order has been opened.
	FulfillmentOrderStatusOpen FulfillmentOrderStatus = "OPEN"
	// The fulfillment order is being processed.
	FulfillmentOrderStatusInProgress FulfillmentOrderStatus = "IN_PROGRESS"
	// The fulfillment order has been cancelled by the merchant.
	FulfillmentOrderStatusCancelled FulfillmentOrderStatus = "CANCELLED"
	// The fulfillment order cannot be completed as requested.
	FulfillmentOrderStatusIncomplete FulfillmentOrderStatus = "INCOMPLETE"
	// The fulfillment order has been completed and closed.
	FulfillmentOrderStatusClosed FulfillmentOrderStatus = "CLOSED"
	// The fulfillment order is scheduled for fulfillment.
	FulfillmentOrderStatusScheduled FulfillmentOrderStatus = "SCHEDULED"
)

var AllFulfillmentOrderStatus = []FulfillmentOrderStatus{
	FulfillmentOrderStatusOpen,
	FulfillmentOrderStatusInProgress,
	FulfillmentOrderStatusCancelled,
	FulfillmentOrderStatusIncomplete,
	FulfillmentOrderStatusClosed,
	FulfillmentOrderStatusScheduled,
}

func (e FulfillmentOrderStatus) IsValid() bool {
	switch e {
	case FulfillmentOrderStatusOpen, FulfillmentOrderStatusInProgress, FulfillmentOrderStatusCancelled, FulfillmentOrderStatusIncomplete, FulfillmentOrderStatusClosed, FulfillmentOrderStatusScheduled:
		return true
	}
	return false
}

func (e FulfillmentOrderStatus) String() string {
	return string(e)
}

func (e *FulfillmentOrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentOrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentOrderStatus", str)
	}
	return nil
}

func (e FulfillmentOrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of a fulfillment service.
type FulfillmentServiceType string

const (
	// Fulfillment by gift card.
	FulfillmentServiceTypeGiftCard FulfillmentServiceType = "GIFT_CARD"
	// Manual fulfillment by the merchant.
	FulfillmentServiceTypeManual FulfillmentServiceType = "MANUAL"
	// Fullfillment by a third-party fulfillment service.
	FulfillmentServiceTypeThirdParty FulfillmentServiceType = "THIRD_PARTY"
)

var AllFulfillmentServiceType = []FulfillmentServiceType{
	FulfillmentServiceTypeGiftCard,
	FulfillmentServiceTypeManual,
	FulfillmentServiceTypeThirdParty,
}

func (e FulfillmentServiceType) IsValid() bool {
	switch e {
	case FulfillmentServiceTypeGiftCard, FulfillmentServiceTypeManual, FulfillmentServiceTypeThirdParty:
		return true
	}
	return false
}

func (e FulfillmentServiceType) String() string {
	return string(e)
}

func (e *FulfillmentServiceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentServiceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentServiceType", str)
	}
	return nil
}

func (e FulfillmentServiceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of a fulfillment.
type FulfillmentStatus string

const (
	// Shopify has created the fulfillment and is waiting for the third-party fulfillment service to transition it to `open` or `success`.
	FulfillmentStatusPending FulfillmentStatus = "PENDING"
	// The third-party fulfillment service has acknowledged the fulfilment and is processing it.
	FulfillmentStatusOpen FulfillmentStatus = "OPEN"
	// The fulfillment was completed successfully.
	FulfillmentStatusSuccess FulfillmentStatus = "SUCCESS"
	// The fulfillment was canceled.
	FulfillmentStatusCancelled FulfillmentStatus = "CANCELLED"
	// There was an error with the fulfillment request.
	FulfillmentStatusError FulfillmentStatus = "ERROR"
	// The fulfillment request failed.
	FulfillmentStatusFailure FulfillmentStatus = "FAILURE"
)

var AllFulfillmentStatus = []FulfillmentStatus{
	FulfillmentStatusPending,
	FulfillmentStatusOpen,
	FulfillmentStatusSuccess,
	FulfillmentStatusCancelled,
	FulfillmentStatusError,
	FulfillmentStatusFailure,
}

func (e FulfillmentStatus) IsValid() bool {
	switch e {
	case FulfillmentStatusPending, FulfillmentStatusOpen, FulfillmentStatusSuccess, FulfillmentStatusCancelled, FulfillmentStatusError, FulfillmentStatusFailure:
		return true
	}
	return false
}

func (e FulfillmentStatus) String() string {
	return string(e)
}

func (e *FulfillmentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FulfillmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FulfillmentStatus", str)
	}
	return nil
}

func (e FulfillmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// List of supported image content types.
type ImageContentType string

const (
	// A PNG image.
	ImageContentTypePng ImageContentType = "PNG"
	// A JPG image.
	ImageContentTypeJpg ImageContentType = "JPG"
	// A WEBP image.
	ImageContentTypeWebp ImageContentType = "WEBP"
)

var AllImageContentType = []ImageContentType{
	ImageContentTypePng,
	ImageContentTypeJpg,
	ImageContentTypeWebp,
}

func (e ImageContentType) IsValid() bool {
	switch e {
	case ImageContentTypePng, ImageContentTypeJpg, ImageContentTypeWebp:
		return true
	}
	return false
}

func (e ImageContentType) String() string {
	return string(e)
}

func (e *ImageContentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageContentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageContentType", str)
	}
	return nil
}

func (e ImageContentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The locale language allowed for Kit Skill.
type KitSkillLocale string

const (
	// English language.
	KitSkillLocaleEn KitSkillLocale = "EN"
)

var AllKitSkillLocale = []KitSkillLocale{
	KitSkillLocaleEn,
}

func (e KitSkillLocale) IsValid() bool {
	switch e {
	case KitSkillLocaleEn:
		return true
	}
	return false
}

func (e KitSkillLocale) String() string {
	return string(e)
}

func (e *KitSkillLocale) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KitSkillLocale(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid KitSkillLocale", str)
	}
	return nil
}

func (e KitSkillLocale) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The key of a localization extension.
type LocalizationExtensionKey string

const (
	// Extension key 'tax_credential_br' for country BR.
	LocalizationExtensionKeyTaxCredentialBr LocalizationExtensionKey = "TAX_CREDENTIAL_BR"
	// Extension key 'shipping_credential_br' for country BR.
	LocalizationExtensionKeyShippingCredentialBr LocalizationExtensionKey = "SHIPPING_CREDENTIAL_BR"
	// Extension key 'shipping_credential_cn' for country CN.
	LocalizationExtensionKeyShippingCredentialCn LocalizationExtensionKey = "SHIPPING_CREDENTIAL_CN"
	// Extension key 'tax_credential_it' for country IT.
	LocalizationExtensionKeyTaxCredentialIt LocalizationExtensionKey = "TAX_CREDENTIAL_IT"
	// Extension key 'tax_email_it' for country IT.
	LocalizationExtensionKeyTaxEmailIt LocalizationExtensionKey = "TAX_EMAIL_IT"
	// Extension key 'shipping_credential_kr' for country KR.
	LocalizationExtensionKeyShippingCredentialKr LocalizationExtensionKey = "SHIPPING_CREDENTIAL_KR"
)

var AllLocalizationExtensionKey = []LocalizationExtensionKey{
	LocalizationExtensionKeyTaxCredentialBr,
	LocalizationExtensionKeyShippingCredentialBr,
	LocalizationExtensionKeyShippingCredentialCn,
	LocalizationExtensionKeyTaxCredentialIt,
	LocalizationExtensionKeyTaxEmailIt,
	LocalizationExtensionKeyShippingCredentialKr,
}

func (e LocalizationExtensionKey) IsValid() bool {
	switch e {
	case LocalizationExtensionKeyTaxCredentialBr, LocalizationExtensionKeyShippingCredentialBr, LocalizationExtensionKeyShippingCredentialCn, LocalizationExtensionKeyTaxCredentialIt, LocalizationExtensionKeyTaxEmailIt, LocalizationExtensionKeyShippingCredentialKr:
		return true
	}
	return false
}

func (e LocalizationExtensionKey) String() string {
	return string(e)
}

func (e *LocalizationExtensionKey) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocalizationExtensionKey(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocalizationExtensionKey", str)
	}
	return nil
}

func (e LocalizationExtensionKey) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The purpose of a localization extension.
type LocalizationExtensionPurpose string

const (
	// Extensions that are used for shipping purposes, for example, customs clearance.
	LocalizationExtensionPurposeShipping LocalizationExtensionPurpose = "SHIPPING"
	// Extensions that are used for taxes purposes, for example, invoicing.
	LocalizationExtensionPurposeTax LocalizationExtensionPurpose = "TAX"
)

var AllLocalizationExtensionPurpose = []LocalizationExtensionPurpose{
	LocalizationExtensionPurposeShipping,
	LocalizationExtensionPurposeTax,
}

func (e LocalizationExtensionPurpose) IsValid() bool {
	switch e {
	case LocalizationExtensionPurposeShipping, LocalizationExtensionPurposeTax:
		return true
	}
	return false
}

func (e LocalizationExtensionPurpose) String() string {
	return string(e)
}

func (e *LocalizationExtensionPurpose) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocalizationExtensionPurpose(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocalizationExtensionPurpose", str)
	}
	return nil
}

func (e LocalizationExtensionPurpose) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Location query.
type LocationSortKeys string

const (
	// Sort by the `name` value.
	LocationSortKeysName LocationSortKeys = "NAME"
	// Sort by the `id` value.
	LocationSortKeysID LocationSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	LocationSortKeysRelevance LocationSortKeys = "RELEVANCE"
)

var AllLocationSortKeys = []LocationSortKeys{
	LocationSortKeysName,
	LocationSortKeysID,
	LocationSortKeysRelevance,
}

func (e LocationSortKeys) IsValid() bool {
	switch e {
	case LocationSortKeysName, LocationSortKeysID, LocationSortKeysRelevance:
		return true
	}
	return false
}

func (e LocationSortKeys) String() string {
	return string(e)
}

func (e *LocationSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocationSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocationSortKeys", str)
	}
	return nil
}

func (e LocationSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The error code resulted from the marketing activity extension integration.
type MarketingActivityExtensionAppErrorCode string

const (
	// The shop/user must be onboarded to use the app.
	MarketingActivityExtensionAppErrorCodeNotOnboardedError MarketingActivityExtensionAppErrorCode = "NOT_ONBOARDED_ERROR"
	// The app has returned validation errors.
	MarketingActivityExtensionAppErrorCodeValidationError MarketingActivityExtensionAppErrorCode = "VALIDATION_ERROR"
	// The app is not responding or returning unexpected data.
	MarketingActivityExtensionAppErrorCodeAPIError MarketingActivityExtensionAppErrorCode = "API_ERROR"
	// The app has returned an error when invoking the platform.
	MarketingActivityExtensionAppErrorCodePlatformError MarketingActivityExtensionAppErrorCode = "PLATFORM_ERROR"
	// The app needs to be installed.
	MarketingActivityExtensionAppErrorCodeInstallRequiredError MarketingActivityExtensionAppErrorCode = "INSTALL_REQUIRED_ERROR"
)

var AllMarketingActivityExtensionAppErrorCode = []MarketingActivityExtensionAppErrorCode{
	MarketingActivityExtensionAppErrorCodeNotOnboardedError,
	MarketingActivityExtensionAppErrorCodeValidationError,
	MarketingActivityExtensionAppErrorCodeAPIError,
	MarketingActivityExtensionAppErrorCodePlatformError,
	MarketingActivityExtensionAppErrorCodeInstallRequiredError,
}

func (e MarketingActivityExtensionAppErrorCode) IsValid() bool {
	switch e {
	case MarketingActivityExtensionAppErrorCodeNotOnboardedError, MarketingActivityExtensionAppErrorCodeValidationError, MarketingActivityExtensionAppErrorCodeAPIError, MarketingActivityExtensionAppErrorCodePlatformError, MarketingActivityExtensionAppErrorCodeInstallRequiredError:
		return true
	}
	return false
}

func (e MarketingActivityExtensionAppErrorCode) String() string {
	return string(e)
}

func (e *MarketingActivityExtensionAppErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingActivityExtensionAppErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingActivityExtensionAppErrorCode", str)
	}
	return nil
}

func (e MarketingActivityExtensionAppErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the MarketingActivity query.
type MarketingActivitySortKeys string

const (
	// Sort by the `title` value.
	MarketingActivitySortKeysTitle MarketingActivitySortKeys = "TITLE"
	// Sort by the `created_at` value.
	MarketingActivitySortKeysCreatedAt MarketingActivitySortKeys = "CREATED_AT"
	// Sort by the `id` value.
	MarketingActivitySortKeysID MarketingActivitySortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	MarketingActivitySortKeysRelevance MarketingActivitySortKeys = "RELEVANCE"
)

var AllMarketingActivitySortKeys = []MarketingActivitySortKeys{
	MarketingActivitySortKeysTitle,
	MarketingActivitySortKeysCreatedAt,
	MarketingActivitySortKeysID,
	MarketingActivitySortKeysRelevance,
}

func (e MarketingActivitySortKeys) IsValid() bool {
	switch e {
	case MarketingActivitySortKeysTitle, MarketingActivitySortKeysCreatedAt, MarketingActivitySortKeysID, MarketingActivitySortKeysRelevance:
		return true
	}
	return false
}

func (e MarketingActivitySortKeys) String() string {
	return string(e)
}

func (e *MarketingActivitySortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingActivitySortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingActivitySortKeys", str)
	}
	return nil
}

func (e MarketingActivitySortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Status helps to identify if this marketing activity has been completed, queued, failed etc.
type MarketingActivityStatus string

const (
	// This marketing activity is currently running.
	MarketingActivityStatusActive MarketingActivityStatus = "ACTIVE"
	// This marketing activity is permanently unavailable.
	MarketingActivityStatusDeleted MarketingActivityStatus = "DELETED"
	// This marketing activity was deleted and it was triggered from outside of Shopify.
	MarketingActivityStatusDeletedExternally MarketingActivityStatus = "DELETED_EXTERNALLY"
	// This marketing activity is disconnected and no longer editable.
	MarketingActivityStatusDisconnected MarketingActivityStatus = "DISCONNECTED"
	// This marketing activity is started but not yet created.
	MarketingActivityStatusDraft MarketingActivityStatus = "DRAFT"
	// This marketing activity is unable to run.
	MarketingActivityStatusFailed MarketingActivityStatus = "FAILED"
	// This marketing activity has completed running.
	MarketingActivityStatusInactive MarketingActivityStatus = "INACTIVE"
	// This marketing activity is currently not running.
	MarketingActivityStatusPaused MarketingActivityStatus = "PAUSED"
	// This marketing activity is pending creation on the app's platform.
	MarketingActivityStatusPending MarketingActivityStatus = "PENDING"
	// This marketing activity is scheduled to run.
	MarketingActivityStatusScheduled MarketingActivityStatus = "SCHEDULED"
	// There is no defined status for external marketing activities.
	MarketingActivityStatusUndefined MarketingActivityStatus = "UNDEFINED"
)

var AllMarketingActivityStatus = []MarketingActivityStatus{
	MarketingActivityStatusActive,
	MarketingActivityStatusDeleted,
	MarketingActivityStatusDeletedExternally,
	MarketingActivityStatusDisconnected,
	MarketingActivityStatusDraft,
	MarketingActivityStatusFailed,
	MarketingActivityStatusInactive,
	MarketingActivityStatusPaused,
	MarketingActivityStatusPending,
	MarketingActivityStatusScheduled,
	MarketingActivityStatusUndefined,
}

func (e MarketingActivityStatus) IsValid() bool {
	switch e {
	case MarketingActivityStatusActive, MarketingActivityStatusDeleted, MarketingActivityStatusDeletedExternally, MarketingActivityStatusDisconnected, MarketingActivityStatusDraft, MarketingActivityStatusFailed, MarketingActivityStatusInactive, MarketingActivityStatusPaused, MarketingActivityStatusPending, MarketingActivityStatusScheduled, MarketingActivityStatusUndefined:
		return true
	}
	return false
}

func (e MarketingActivityStatus) String() string {
	return string(e)
}

func (e *MarketingActivityStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingActivityStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingActivityStatus", str)
	}
	return nil
}

func (e MarketingActivityStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// StatusBadgeType helps to identify the color of the status badge.
type MarketingActivityStatusBadgeType string

const (
	// This status badge has type default.
	MarketingActivityStatusBadgeTypeDefault MarketingActivityStatusBadgeType = "DEFAULT"
	// This status badge has type success.
	MarketingActivityStatusBadgeTypeSuccess MarketingActivityStatusBadgeType = "SUCCESS"
	// This status badge has type attention.
	MarketingActivityStatusBadgeTypeAttention MarketingActivityStatusBadgeType = "ATTENTION"
	// This status badge has type warning.
	MarketingActivityStatusBadgeTypeWarning MarketingActivityStatusBadgeType = "WARNING"
	// This status badge has type info.
	MarketingActivityStatusBadgeTypeInfo MarketingActivityStatusBadgeType = "INFO"
)

var AllMarketingActivityStatusBadgeType = []MarketingActivityStatusBadgeType{
	MarketingActivityStatusBadgeTypeDefault,
	MarketingActivityStatusBadgeTypeSuccess,
	MarketingActivityStatusBadgeTypeAttention,
	MarketingActivityStatusBadgeTypeWarning,
	MarketingActivityStatusBadgeTypeInfo,
}

func (e MarketingActivityStatusBadgeType) IsValid() bool {
	switch e {
	case MarketingActivityStatusBadgeTypeDefault, MarketingActivityStatusBadgeTypeSuccess, MarketingActivityStatusBadgeTypeAttention, MarketingActivityStatusBadgeTypeWarning, MarketingActivityStatusBadgeTypeInfo:
		return true
	}
	return false
}

func (e MarketingActivityStatusBadgeType) String() string {
	return string(e)
}

func (e *MarketingActivityStatusBadgeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingActivityStatusBadgeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingActivityStatusBadgeType", str)
	}
	return nil
}

func (e MarketingActivityStatusBadgeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The budget type for a marketing activity.
type MarketingBudgetBudgetType string

const (
	// A daily budget.
	MarketingBudgetBudgetTypeDaily MarketingBudgetBudgetType = "DAILY"
	// A budget for the lifetime of a marketing activity.
	MarketingBudgetBudgetTypeLifetime MarketingBudgetBudgetType = "LIFETIME"
)

var AllMarketingBudgetBudgetType = []MarketingBudgetBudgetType{
	MarketingBudgetBudgetTypeDaily,
	MarketingBudgetBudgetTypeLifetime,
}

func (e MarketingBudgetBudgetType) IsValid() bool {
	switch e {
	case MarketingBudgetBudgetTypeDaily, MarketingBudgetBudgetTypeLifetime:
		return true
	}
	return false
}

func (e MarketingBudgetBudgetType) String() string {
	return string(e)
}

func (e *MarketingBudgetBudgetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingBudgetBudgetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingBudgetBudgetType", str)
	}
	return nil
}

func (e MarketingBudgetBudgetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The available marketing channels for a marketing activity or event. A marketing channel is broad category of marketing, used for reporting aggregation.
type MarketingChannel string

const (
	// Paid search.
	MarketingChannelSearch MarketingChannel = "SEARCH"
	// Displayed ads.
	MarketingChannelDisplay MarketingChannel = "DISPLAY"
	// Social media.
	MarketingChannelSocial MarketingChannel = "SOCIAL"
	// Email.
	MarketingChannelEmail MarketingChannel = "EMAIL"
	// Referral links.
	MarketingChannelReferral MarketingChannel = "REFERRAL"
)

var AllMarketingChannel = []MarketingChannel{
	MarketingChannelSearch,
	MarketingChannelDisplay,
	MarketingChannelSocial,
	MarketingChannelEmail,
	MarketingChannelReferral,
}

func (e MarketingChannel) IsValid() bool {
	switch e {
	case MarketingChannelSearch, MarketingChannelDisplay, MarketingChannelSocial, MarketingChannelEmail, MarketingChannelReferral:
		return true
	}
	return false
}

func (e MarketingChannel) String() string {
	return string(e)
}

func (e *MarketingChannel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingChannel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingChannel", str)
	}
	return nil
}

func (e MarketingChannel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the MarketingEvent query.
type MarketingEventSortKeys string

const (
	// Sort by the `started_at` value.
	MarketingEventSortKeysStartedAt MarketingEventSortKeys = "STARTED_AT"
	// Sort by the `id` value.
	MarketingEventSortKeysID MarketingEventSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	MarketingEventSortKeysRelevance MarketingEventSortKeys = "RELEVANCE"
)

var AllMarketingEventSortKeys = []MarketingEventSortKeys{
	MarketingEventSortKeysStartedAt,
	MarketingEventSortKeysID,
	MarketingEventSortKeysRelevance,
}

func (e MarketingEventSortKeys) IsValid() bool {
	switch e {
	case MarketingEventSortKeysStartedAt, MarketingEventSortKeysID, MarketingEventSortKeysRelevance:
		return true
	}
	return false
}

func (e MarketingEventSortKeys) String() string {
	return string(e)
}

func (e *MarketingEventSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingEventSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingEventSortKeys", str)
	}
	return nil
}

func (e MarketingEventSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The available types of marketing event.
type MarketingTactic string

const (
	// An abandoned cart recovery email.
	MarketingTacticAbandonedCart MarketingTactic = "ABANDONED_CART"
	// An ad, such as a Facebook ad.
	MarketingTacticAd MarketingTactic = "AD"
	// An affiliate link.
	MarketingTacticAffiliate MarketingTactic = "AFFILIATE"
	// A link.
	MarketingTacticLink MarketingTactic = "LINK"
	// A loyalty program.
	MarketingTacticLoyalty MarketingTactic = "LOYALTY"
	// A messaging app, such as Facebook Messenger.
	MarketingTacticMessage MarketingTactic = "MESSAGE"
	// A newsletter.
	MarketingTacticNewsletter MarketingTactic = "NEWSLETTER"
	// A notification in the Shopify admin.
	MarketingTacticNotification MarketingTactic = "NOTIFICATION"
	// A blog post.
	MarketingTacticPost MarketingTactic = "POST"
	// A retargeting ad.
	MarketingTacticRetargeting MarketingTactic = "RETARGETING"
	// A transactional email.
	MarketingTacticTransactional MarketingTactic = "TRANSACTIONAL"
	// Search engine optimization.
	MarketingTacticSeo MarketingTactic = "SEO"
	// A direct visit to the online store.
	MarketingTacticDirect MarketingTactic = "DIRECT"
	// Popup on merchant's store.
	MarketingTacticStorefrontApp MarketingTactic = "STOREFRONT_APP"
	// A display ad.
	MarketingTacticDisplay MarketingTactic = "DISPLAY"
	// Paid search.
	MarketingTacticSearch MarketingTactic = "SEARCH"
	// A follow-up email.
	MarketingTacticFollowUp MarketingTactic = "FOLLOW_UP"
	// A promotional receipt.
	MarketingTacticReceipt MarketingTactic = "RECEIPT"
)

var AllMarketingTactic = []MarketingTactic{
	MarketingTacticAbandonedCart,
	MarketingTacticAd,
	MarketingTacticAffiliate,
	MarketingTacticLink,
	MarketingTacticLoyalty,
	MarketingTacticMessage,
	MarketingTacticNewsletter,
	MarketingTacticNotification,
	MarketingTacticPost,
	MarketingTacticRetargeting,
	MarketingTacticTransactional,
	MarketingTacticSeo,
	MarketingTacticDirect,
	MarketingTacticStorefrontApp,
	MarketingTacticDisplay,
	MarketingTacticSearch,
	MarketingTacticFollowUp,
	MarketingTacticReceipt,
}

func (e MarketingTactic) IsValid() bool {
	switch e {
	case MarketingTacticAbandonedCart, MarketingTacticAd, MarketingTacticAffiliate, MarketingTacticLink, MarketingTacticLoyalty, MarketingTacticMessage, MarketingTacticNewsletter, MarketingTacticNotification, MarketingTacticPost, MarketingTacticRetargeting, MarketingTacticTransactional, MarketingTacticSeo, MarketingTacticDirect, MarketingTacticStorefrontApp, MarketingTacticDisplay, MarketingTacticSearch, MarketingTacticFollowUp, MarketingTacticReceipt:
		return true
	}
	return false
}

func (e MarketingTactic) String() string {
	return string(e)
}

func (e *MarketingTactic) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingTactic(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarketingTactic", str)
	}
	return nil
}

func (e MarketingTactic) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible content types for a media object.
type MediaContentType string

const (
	// A Shopify hosted video.
	MediaContentTypeVideo MediaContentType = "VIDEO"
	// An externally hosted video.
	MediaContentTypeExternalVideo MediaContentType = "EXTERNAL_VIDEO"
	// A 3d model.
	MediaContentTypeModel3d MediaContentType = "MODEL_3D"
	// A Shopify hosted image.
	MediaContentTypeImage MediaContentType = "IMAGE"
)

var AllMediaContentType = []MediaContentType{
	MediaContentTypeVideo,
	MediaContentTypeExternalVideo,
	MediaContentTypeModel3d,
	MediaContentTypeImage,
}

func (e MediaContentType) IsValid() bool {
	switch e {
	case MediaContentTypeVideo, MediaContentTypeExternalVideo, MediaContentTypeModel3d, MediaContentTypeImage:
		return true
	}
	return false
}

func (e MediaContentType) String() string {
	return string(e)
}

func (e *MediaContentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaContentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaContentType", str)
	}
	return nil
}

func (e MediaContentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Error types for media.
type MediaErrorCode string

const (
	// Media error has occured for unknown reason.
	MediaErrorCodeUnknown MediaErrorCode = "UNKNOWN"
	// Media could not be processed because the signed url was invalid.
	MediaErrorCodeInvalidSignedURL MediaErrorCode = "INVALID_SIGNED_URL"
	// Media could not be processed because the image could not be downloaded.
	MediaErrorCodeImageDownloadFailure MediaErrorCode = "IMAGE_DOWNLOAD_FAILURE"
	// Media could not be processed because the image could not be processed.
	MediaErrorCodeImageProcessingFailure MediaErrorCode = "IMAGE_PROCESSING_FAILURE"
	// Media timed out because it is currently being modified by another operation.
	MediaErrorCodeMediaTimeoutError MediaErrorCode = "MEDIA_TIMEOUT_ERROR"
	// Media could not be created because the external video could not be found.
	MediaErrorCodeExternalVideoNotFound MediaErrorCode = "EXTERNAL_VIDEO_NOT_FOUND"
	// Media could not be created because the external video is not listed or is private.
	MediaErrorCodeExternalVideoUnlisted MediaErrorCode = "EXTERNAL_VIDEO_UNLISTED"
	// Media could not be created because the external video has an invalid aspect ratio.
	MediaErrorCodeExternalVideoInvalidAspectRatio MediaErrorCode = "EXTERNAL_VIDEO_INVALID_ASPECT_RATIO"
	// Media could not be created because the metadata could not be read.
	MediaErrorCodeVideoMetadataReadError MediaErrorCode = "VIDEO_METADATA_READ_ERROR"
	// Media could not be created because it has an invalid file type.
	MediaErrorCodeVideoInvalidFiletypeError MediaErrorCode = "VIDEO_INVALID_FILETYPE_ERROR"
	// Media could not be created because it does not meet the minimum width requirement.
	MediaErrorCodeVideoMinWidthError MediaErrorCode = "VIDEO_MIN_WIDTH_ERROR"
	// Media could not be created because it does not meet the maximum width requirement.
	MediaErrorCodeVideoMaxWidthError MediaErrorCode = "VIDEO_MAX_WIDTH_ERROR"
	// Media could not be created because it does not meet the minimum height requirement.
	MediaErrorCodeVideoMinHeightError MediaErrorCode = "VIDEO_MIN_HEIGHT_ERROR"
	// Media could not be created because it does not meet the maximum height requirement.
	MediaErrorCodeVideoMaxHeightError MediaErrorCode = "VIDEO_MAX_HEIGHT_ERROR"
	// Media could not be created because it does not meet the minimum duration requirement.
	MediaErrorCodeVideoMinDurationError MediaErrorCode = "VIDEO_MIN_DURATION_ERROR"
	// Media could not be created because it does not meet the maximum duration requirement.
	MediaErrorCodeVideoMaxDurationError MediaErrorCode = "VIDEO_MAX_DURATION_ERROR"
	// Video failed validation.
	MediaErrorCodeVideoValidationError MediaErrorCode = "VIDEO_VALIDATION_ERROR"
	// Model failed validation.
	MediaErrorCodeModel3dValidationError MediaErrorCode = "MODEL3D_VALIDATION_ERROR"
	// Media could not be created because the model's thumbnail generation failed.
	MediaErrorCodeModel3dThumbnailGenerationError MediaErrorCode = "MODEL3D_THUMBNAIL_GENERATION_ERROR"
	// Media could not be created because the model can't be converted to USDZ format.
	MediaErrorCodeModel3dGlbToUsdzConversionError MediaErrorCode = "MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR"
	// Media could not be created because the model file failed processing.
	MediaErrorCodeModel3dGlbOutputCreationError MediaErrorCode = "MODEL3D_GLB_OUTPUT_CREATION_ERROR"
	// Media could not be created because the image is an unsupported file type.
	MediaErrorCodeUnsupportedImageFileType MediaErrorCode = "UNSUPPORTED_IMAGE_FILE_TYPE"
	// Media could not be created because the image size is too large.
	MediaErrorCodeInvalidImageFileSize MediaErrorCode = "INVALID_IMAGE_FILE_SIZE"
)

var AllMediaErrorCode = []MediaErrorCode{
	MediaErrorCodeUnknown,
	MediaErrorCodeInvalidSignedURL,
	MediaErrorCodeImageDownloadFailure,
	MediaErrorCodeImageProcessingFailure,
	MediaErrorCodeMediaTimeoutError,
	MediaErrorCodeExternalVideoNotFound,
	MediaErrorCodeExternalVideoUnlisted,
	MediaErrorCodeExternalVideoInvalidAspectRatio,
	MediaErrorCodeVideoMetadataReadError,
	MediaErrorCodeVideoInvalidFiletypeError,
	MediaErrorCodeVideoMinWidthError,
	MediaErrorCodeVideoMaxWidthError,
	MediaErrorCodeVideoMinHeightError,
	MediaErrorCodeVideoMaxHeightError,
	MediaErrorCodeVideoMinDurationError,
	MediaErrorCodeVideoMaxDurationError,
	MediaErrorCodeVideoValidationError,
	MediaErrorCodeModel3dValidationError,
	MediaErrorCodeModel3dThumbnailGenerationError,
	MediaErrorCodeModel3dGlbToUsdzConversionError,
	MediaErrorCodeModel3dGlbOutputCreationError,
	MediaErrorCodeUnsupportedImageFileType,
	MediaErrorCodeInvalidImageFileSize,
}

func (e MediaErrorCode) IsValid() bool {
	switch e {
	case MediaErrorCodeUnknown, MediaErrorCodeInvalidSignedURL, MediaErrorCodeImageDownloadFailure, MediaErrorCodeImageProcessingFailure, MediaErrorCodeMediaTimeoutError, MediaErrorCodeExternalVideoNotFound, MediaErrorCodeExternalVideoUnlisted, MediaErrorCodeExternalVideoInvalidAspectRatio, MediaErrorCodeVideoMetadataReadError, MediaErrorCodeVideoInvalidFiletypeError, MediaErrorCodeVideoMinWidthError, MediaErrorCodeVideoMaxWidthError, MediaErrorCodeVideoMinHeightError, MediaErrorCodeVideoMaxHeightError, MediaErrorCodeVideoMinDurationError, MediaErrorCodeVideoMaxDurationError, MediaErrorCodeVideoValidationError, MediaErrorCodeModel3dValidationError, MediaErrorCodeModel3dThumbnailGenerationError, MediaErrorCodeModel3dGlbToUsdzConversionError, MediaErrorCodeModel3dGlbOutputCreationError, MediaErrorCodeUnsupportedImageFileType, MediaErrorCodeInvalidImageFileSize:
		return true
	}
	return false
}

func (e MediaErrorCode) String() string {
	return string(e)
}

func (e *MediaErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaErrorCode", str)
	}
	return nil
}

func (e MediaErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible statuses for a media preview image.
type MediaPreviewImageStatus string

const (
	// Preview image is uploaded but not yet processed.
	MediaPreviewImageStatusUploaded MediaPreviewImageStatus = "UPLOADED"
	// Preview image is being processed.
	MediaPreviewImageStatusProcessing MediaPreviewImageStatus = "PROCESSING"
	// Preview image is ready to be displayed.
	MediaPreviewImageStatusReady MediaPreviewImageStatus = "READY"
	// Preview image processing has failed.
	MediaPreviewImageStatusFailed MediaPreviewImageStatus = "FAILED"
)

var AllMediaPreviewImageStatus = []MediaPreviewImageStatus{
	MediaPreviewImageStatusUploaded,
	MediaPreviewImageStatusProcessing,
	MediaPreviewImageStatusReady,
	MediaPreviewImageStatusFailed,
}

func (e MediaPreviewImageStatus) IsValid() bool {
	switch e {
	case MediaPreviewImageStatusUploaded, MediaPreviewImageStatusProcessing, MediaPreviewImageStatusReady, MediaPreviewImageStatusFailed:
		return true
	}
	return false
}

func (e MediaPreviewImageStatus) String() string {
	return string(e)
}

func (e *MediaPreviewImageStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaPreviewImageStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaPreviewImageStatus", str)
	}
	return nil
}

func (e MediaPreviewImageStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible statuses for a media object.
type MediaStatus string

const (
	// Media has been uploaded but not yet processed.
	MediaStatusUploaded MediaStatus = "UPLOADED"
	// Media is being processed.
	MediaStatusProcessing MediaStatus = "PROCESSING"
	// Media is ready to be displayed.
	MediaStatusReady MediaStatus = "READY"
	// Media processing has failed.
	MediaStatusFailed MediaStatus = "FAILED"
)

var AllMediaStatus = []MediaStatus{
	MediaStatusUploaded,
	MediaStatusProcessing,
	MediaStatusReady,
	MediaStatusFailed,
}

func (e MediaStatus) IsValid() bool {
	switch e {
	case MediaStatusUploaded, MediaStatusProcessing, MediaStatusReady, MediaStatusFailed:
		return true
	}
	return false
}

func (e MediaStatus) String() string {
	return string(e)
}

func (e *MediaStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaStatus", str)
	}
	return nil
}

func (e MediaStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that could be returned by MediaUserError.
type MediaUserErrorCode string

const (
	// Input value is invalid.
	MediaUserErrorCodeInvalid MediaUserErrorCode = "INVALID"
	// Input value is blank.
	MediaUserErrorCodeBlank MediaUserErrorCode = "BLANK"
	// Video validation failed.
	MediaUserErrorCodeVideoValidationError MediaUserErrorCode = "VIDEO_VALIDATION_ERROR"
	// Model validation failed.
	MediaUserErrorCodeModel3dValidationError MediaUserErrorCode = "MODEL3D_VALIDATION_ERROR"
	// Video creation throttle was exceeded.
	MediaUserErrorCodeVideoThrottleExceeded MediaUserErrorCode = "VIDEO_THROTTLE_EXCEEDED"
	// Model3d creation throttle was exceeded.
	MediaUserErrorCodeModel3dThrottleExceeded MediaUserErrorCode = "MODEL3D_THROTTLE_EXCEEDED"
	// Exceeded the limit of media per product.
	MediaUserErrorCodeProductMediaLimitExceeded MediaUserErrorCode = "PRODUCT_MEDIA_LIMIT_EXCEEDED"
	// Exceeded the limit of media per shop.
	MediaUserErrorCodeShopMediaLimitExceeded MediaUserErrorCode = "SHOP_MEDIA_LIMIT_EXCEEDED"
	// Product does not exist.
	MediaUserErrorCodeProductDoesNotExist MediaUserErrorCode = "PRODUCT_DOES_NOT_EXIST"
	// Media does not exist.
	MediaUserErrorCodeMediaDoesNotExist MediaUserErrorCode = "MEDIA_DOES_NOT_EXIST"
	// Media does not exist on the given product.
	MediaUserErrorCodeMediaDoesNotExistOnProduct MediaUserErrorCode = "MEDIA_DOES_NOT_EXIST_ON_PRODUCT"
	// Only one mediaId is allowed per variant-media input pair.
	MediaUserErrorCodeTooManyMediaPerInputPair MediaUserErrorCode = "TOO_MANY_MEDIA_PER_INPUT_PAIR"
	// Exceeded the maximum number of 100 variant-media pairs per mutation call.
	MediaUserErrorCodeMaximumVariantMediaPairsExceeded MediaUserErrorCode = "MAXIMUM_VARIANT_MEDIA_PAIRS_EXCEEDED"
	// Invalid media type.
	MediaUserErrorCodeInvalidMediaType MediaUserErrorCode = "INVALID_MEDIA_TYPE"
	// Variant specified in more than one pair.
	MediaUserErrorCodeProductVariantSpecifiedMultipleTimes MediaUserErrorCode = "PRODUCT_VARIANT_SPECIFIED_MULTIPLE_TIMES"
	// Variant does not exist on the given product.
	MediaUserErrorCodeProductVariantDoesNotExistOnProduct MediaUserErrorCode = "PRODUCT_VARIANT_DOES_NOT_EXIST_ON_PRODUCT"
	// Non-ready media are not supported.
	MediaUserErrorCodeNonReadyMedia MediaUserErrorCode = "NON_READY_MEDIA"
	// Product variant already has attached media.
	MediaUserErrorCodeProductVariantAlreadyHasMedia MediaUserErrorCode = "PRODUCT_VARIANT_ALREADY_HAS_MEDIA"
	// The specified media is not attached to the specified variant.
	MediaUserErrorCodeMediaIsNotAttachedToVariant MediaUserErrorCode = "MEDIA_IS_NOT_ATTACHED_TO_VARIANT"
	// Media cannot be modified. It is currently being modified by another operation.
	MediaUserErrorCodeMediaCannotBeModified MediaUserErrorCode = "MEDIA_CANNOT_BE_MODIFIED"
)

var AllMediaUserErrorCode = []MediaUserErrorCode{
	MediaUserErrorCodeInvalid,
	MediaUserErrorCodeBlank,
	MediaUserErrorCodeVideoValidationError,
	MediaUserErrorCodeModel3dValidationError,
	MediaUserErrorCodeVideoThrottleExceeded,
	MediaUserErrorCodeModel3dThrottleExceeded,
	MediaUserErrorCodeProductMediaLimitExceeded,
	MediaUserErrorCodeShopMediaLimitExceeded,
	MediaUserErrorCodeProductDoesNotExist,
	MediaUserErrorCodeMediaDoesNotExist,
	MediaUserErrorCodeMediaDoesNotExistOnProduct,
	MediaUserErrorCodeTooManyMediaPerInputPair,
	MediaUserErrorCodeMaximumVariantMediaPairsExceeded,
	MediaUserErrorCodeInvalidMediaType,
	MediaUserErrorCodeProductVariantSpecifiedMultipleTimes,
	MediaUserErrorCodeProductVariantDoesNotExistOnProduct,
	MediaUserErrorCodeNonReadyMedia,
	MediaUserErrorCodeProductVariantAlreadyHasMedia,
	MediaUserErrorCodeMediaIsNotAttachedToVariant,
	MediaUserErrorCodeMediaCannotBeModified,
}

func (e MediaUserErrorCode) IsValid() bool {
	switch e {
	case MediaUserErrorCodeInvalid, MediaUserErrorCodeBlank, MediaUserErrorCodeVideoValidationError, MediaUserErrorCodeModel3dValidationError, MediaUserErrorCodeVideoThrottleExceeded, MediaUserErrorCodeModel3dThrottleExceeded, MediaUserErrorCodeProductMediaLimitExceeded, MediaUserErrorCodeShopMediaLimitExceeded, MediaUserErrorCodeProductDoesNotExist, MediaUserErrorCodeMediaDoesNotExist, MediaUserErrorCodeMediaDoesNotExistOnProduct, MediaUserErrorCodeTooManyMediaPerInputPair, MediaUserErrorCodeMaximumVariantMediaPairsExceeded, MediaUserErrorCodeInvalidMediaType, MediaUserErrorCodeProductVariantSpecifiedMultipleTimes, MediaUserErrorCodeProductVariantDoesNotExistOnProduct, MediaUserErrorCodeNonReadyMedia, MediaUserErrorCodeProductVariantAlreadyHasMedia, MediaUserErrorCodeMediaIsNotAttachedToVariant, MediaUserErrorCodeMediaCannotBeModified:
		return true
	}
	return false
}

func (e MediaUserErrorCode) String() string {
	return string(e)
}

func (e *MediaUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaUserErrorCode", str)
	}
	return nil
}

func (e MediaUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Metafield owner types.
type MetafieldOwnerType string

const (
	// A metafield owner type.
	MetafieldOwnerTypeArticle MetafieldOwnerType = "ARTICLE"
	// A metafield owner type.
	MetafieldOwnerTypeBlog MetafieldOwnerType = "BLOG"
	// A metafield owner type.
	MetafieldOwnerTypeCollection MetafieldOwnerType = "COLLECTION"
	// A metafield owner type.
	MetafieldOwnerTypeCustomer MetafieldOwnerType = "CUSTOMER"
	// A metafield owner type.
	MetafieldOwnerTypeDraftorder MetafieldOwnerType = "DRAFTORDER"
	// A metafield owner type.
	MetafieldOwnerTypeOrder MetafieldOwnerType = "ORDER"
	// A metafield owner type.
	MetafieldOwnerTypePage MetafieldOwnerType = "PAGE"
	// A metafield owner type.
	MetafieldOwnerTypeProduct MetafieldOwnerType = "PRODUCT"
	// A metafield owner type.
	MetafieldOwnerTypeProductimage MetafieldOwnerType = "PRODUCTIMAGE"
	// A metafield owner type.
	MetafieldOwnerTypeProductvariant MetafieldOwnerType = "PRODUCTVARIANT"
	// A metafield owner type.
	MetafieldOwnerTypeShop MetafieldOwnerType = "SHOP"
)

var AllMetafieldOwnerType = []MetafieldOwnerType{
	MetafieldOwnerTypeArticle,
	MetafieldOwnerTypeBlog,
	MetafieldOwnerTypeCollection,
	MetafieldOwnerTypeCustomer,
	MetafieldOwnerTypeDraftorder,
	MetafieldOwnerTypeOrder,
	MetafieldOwnerTypePage,
	MetafieldOwnerTypeProduct,
	MetafieldOwnerTypeProductimage,
	MetafieldOwnerTypeProductvariant,
	MetafieldOwnerTypeShop,
}

func (e MetafieldOwnerType) IsValid() bool {
	switch e {
	case MetafieldOwnerTypeArticle, MetafieldOwnerTypeBlog, MetafieldOwnerTypeCollection, MetafieldOwnerTypeCustomer, MetafieldOwnerTypeDraftorder, MetafieldOwnerTypeOrder, MetafieldOwnerTypePage, MetafieldOwnerTypeProduct, MetafieldOwnerTypeProductimage, MetafieldOwnerTypeProductvariant, MetafieldOwnerTypeShop:
		return true
	}
	return false
}

func (e MetafieldOwnerType) String() string {
	return string(e)
}

func (e *MetafieldOwnerType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldOwnerType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldOwnerType", str)
	}
	return nil
}

func (e MetafieldOwnerType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Metafield value types.
type MetafieldValueType string

const (
	// A string.
	MetafieldValueTypeString MetafieldValueType = "STRING"
	// An integer.
	MetafieldValueTypeInteger MetafieldValueType = "INTEGER"
	// A JSON string.
	MetafieldValueTypeJSONString MetafieldValueType = "JSON_STRING"
)

var AllMetafieldValueType = []MetafieldValueType{
	MetafieldValueTypeString,
	MetafieldValueTypeInteger,
	MetafieldValueTypeJSONString,
}

func (e MetafieldValueType) IsValid() bool {
	switch e {
	case MetafieldValueTypeString, MetafieldValueTypeInteger, MetafieldValueTypeJSONString:
		return true
	}
	return false
}

func (e MetafieldValueType) String() string {
	return string(e)
}

func (e *MetafieldValueType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetafieldValueType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetafieldValueType", str)
	}
	return nil
}

func (e MetafieldValueType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the MethodDefinition query.
type MethodDefinitionSortKeys string

const (
	// Sort by the `rate_provider_type` value.
	MethodDefinitionSortKeysRateProviderType MethodDefinitionSortKeys = "RATE_PROVIDER_TYPE"
	// Sort by the `id` value.
	MethodDefinitionSortKeysID MethodDefinitionSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	MethodDefinitionSortKeysRelevance MethodDefinitionSortKeys = "RELEVANCE"
)

var AllMethodDefinitionSortKeys = []MethodDefinitionSortKeys{
	MethodDefinitionSortKeysRateProviderType,
	MethodDefinitionSortKeysID,
	MethodDefinitionSortKeysRelevance,
}

func (e MethodDefinitionSortKeys) IsValid() bool {
	switch e {
	case MethodDefinitionSortKeysRateProviderType, MethodDefinitionSortKeysID, MethodDefinitionSortKeysRelevance:
		return true
	}
	return false
}

func (e MethodDefinitionSortKeys) String() string {
	return string(e)
}

func (e *MethodDefinitionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MethodDefinitionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MethodDefinitionSortKeys", str)
	}
	return nil
}

func (e MethodDefinitionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the reason that the order is being canceled. Valid values are: customer, fraud, inventory, declined, other.
type OrderCancelReason string

const (
	// The customer wanted to cancel the order.
	OrderCancelReasonCustomer OrderCancelReason = "CUSTOMER"
	// The order was fraudulent.
	OrderCancelReasonFraud OrderCancelReason = "FRAUD"
	// There was insufficient inventory.
	OrderCancelReasonInventory OrderCancelReason = "INVENTORY"
	// Payment was declined.
	OrderCancelReasonDeclined OrderCancelReason = "DECLINED"
	// Some other reason not listed.
	OrderCancelReasonOther OrderCancelReason = "OTHER"
)

var AllOrderCancelReason = []OrderCancelReason{
	OrderCancelReasonCustomer,
	OrderCancelReasonFraud,
	OrderCancelReasonInventory,
	OrderCancelReasonDeclined,
	OrderCancelReasonOther,
}

func (e OrderCancelReason) IsValid() bool {
	switch e {
	case OrderCancelReasonCustomer, OrderCancelReasonFraud, OrderCancelReasonInventory, OrderCancelReasonDeclined, OrderCancelReasonOther:
		return true
	}
	return false
}

func (e OrderCancelReason) String() string {
	return string(e)
}

func (e *OrderCancelReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderCancelReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderCancelReason", str)
	}
	return nil
}

func (e OrderCancelReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the order's current financial status.
type OrderDisplayFinancialStatus string

const (
	// Displayed as **Pending**.
	OrderDisplayFinancialStatusPending OrderDisplayFinancialStatus = "PENDING"
	// Displayed as **Authorized**.
	OrderDisplayFinancialStatusAuthorized OrderDisplayFinancialStatus = "AUTHORIZED"
	// Displayed as **Partially paid**.
	OrderDisplayFinancialStatusPartiallyPaid OrderDisplayFinancialStatus = "PARTIALLY_PAID"
	// Displayed as **Partially refunded**.
	OrderDisplayFinancialStatusPartiallyRefunded OrderDisplayFinancialStatus = "PARTIALLY_REFUNDED"
	// Displayed as **Voided**.
	OrderDisplayFinancialStatusVoided OrderDisplayFinancialStatus = "VOIDED"
	// Displayed as **Paid**.
	OrderDisplayFinancialStatusPaid OrderDisplayFinancialStatus = "PAID"
	// Displayed as **Refunded**.
	OrderDisplayFinancialStatusRefunded OrderDisplayFinancialStatus = "REFUNDED"
	// Displayed as **Expired**.
	OrderDisplayFinancialStatusExpired OrderDisplayFinancialStatus = "EXPIRED"
)

var AllOrderDisplayFinancialStatus = []OrderDisplayFinancialStatus{
	OrderDisplayFinancialStatusPending,
	OrderDisplayFinancialStatusAuthorized,
	OrderDisplayFinancialStatusPartiallyPaid,
	OrderDisplayFinancialStatusPartiallyRefunded,
	OrderDisplayFinancialStatusVoided,
	OrderDisplayFinancialStatusPaid,
	OrderDisplayFinancialStatusRefunded,
	OrderDisplayFinancialStatusExpired,
}

func (e OrderDisplayFinancialStatus) IsValid() bool {
	switch e {
	case OrderDisplayFinancialStatusPending, OrderDisplayFinancialStatusAuthorized, OrderDisplayFinancialStatusPartiallyPaid, OrderDisplayFinancialStatusPartiallyRefunded, OrderDisplayFinancialStatusVoided, OrderDisplayFinancialStatusPaid, OrderDisplayFinancialStatusRefunded, OrderDisplayFinancialStatusExpired:
		return true
	}
	return false
}

func (e OrderDisplayFinancialStatus) String() string {
	return string(e)
}

func (e *OrderDisplayFinancialStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDisplayFinancialStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDisplayFinancialStatus", str)
	}
	return nil
}

func (e OrderDisplayFinancialStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the order's current fulfillment status. Valid values are: unfulfilled, partial, fulfilled, restocked.
type OrderDisplayFulfillmentStatus string

const (
	// Displayed as **Unfulfilled**.
	OrderDisplayFulfillmentStatusUnfulfilled OrderDisplayFulfillmentStatus = "UNFULFILLED"
	// Displayed as **Partially fulfilled**.
	OrderDisplayFulfillmentStatusPartiallyFulfilled OrderDisplayFulfillmentStatus = "PARTIALLY_FULFILLED"
	// Displayed as **Fulfilled**.
	OrderDisplayFulfillmentStatusFulfilled OrderDisplayFulfillmentStatus = "FULFILLED"
	// Displayed as **Restocked**.
	OrderDisplayFulfillmentStatusRestocked OrderDisplayFulfillmentStatus = "RESTOCKED"
	// Displayed as **Pending fulfillment**.
	OrderDisplayFulfillmentStatusPendingFulfillment OrderDisplayFulfillmentStatus = "PENDING_FULFILLMENT"
	// Displayed as **Open**.
	OrderDisplayFulfillmentStatusOpen OrderDisplayFulfillmentStatus = "OPEN"
	// Displayed as **In progress**.
	OrderDisplayFulfillmentStatusInProgress OrderDisplayFulfillmentStatus = "IN_PROGRESS"
	// Displayed as **Scheduled**.
	OrderDisplayFulfillmentStatusScheduled OrderDisplayFulfillmentStatus = "SCHEDULED"
)

var AllOrderDisplayFulfillmentStatus = []OrderDisplayFulfillmentStatus{
	OrderDisplayFulfillmentStatusUnfulfilled,
	OrderDisplayFulfillmentStatusPartiallyFulfilled,
	OrderDisplayFulfillmentStatusFulfilled,
	OrderDisplayFulfillmentStatusRestocked,
	OrderDisplayFulfillmentStatusPendingFulfillment,
	OrderDisplayFulfillmentStatusOpen,
	OrderDisplayFulfillmentStatusInProgress,
	OrderDisplayFulfillmentStatusScheduled,
}

func (e OrderDisplayFulfillmentStatus) IsValid() bool {
	switch e {
	case OrderDisplayFulfillmentStatusUnfulfilled, OrderDisplayFulfillmentStatusPartiallyFulfilled, OrderDisplayFulfillmentStatusFulfilled, OrderDisplayFulfillmentStatusRestocked, OrderDisplayFulfillmentStatusPendingFulfillment, OrderDisplayFulfillmentStatusOpen, OrderDisplayFulfillmentStatusInProgress, OrderDisplayFulfillmentStatusScheduled:
		return true
	}
	return false
}

func (e OrderDisplayFulfillmentStatus) String() string {
	return string(e)
}

func (e *OrderDisplayFulfillmentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDisplayFulfillmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDisplayFulfillmentStatus", str)
	}
	return nil
}

func (e OrderDisplayFulfillmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The likelihood that an order is fraudulent.
type OrderRiskLevel string

const (
	// There is a low level of risk that this order is fraudulent.
	OrderRiskLevelLow OrderRiskLevel = "LOW"
	// There is a medium level of risk that this order is fraudulent.
	OrderRiskLevelMedium OrderRiskLevel = "MEDIUM"
	// There is a high level of risk that this order is fraudulent.
	OrderRiskLevelHigh OrderRiskLevel = "HIGH"
)

var AllOrderRiskLevel = []OrderRiskLevel{
	OrderRiskLevelLow,
	OrderRiskLevelMedium,
	OrderRiskLevelHigh,
}

func (e OrderRiskLevel) IsValid() bool {
	switch e {
	case OrderRiskLevelLow, OrderRiskLevelMedium, OrderRiskLevelHigh:
		return true
	}
	return false
}

func (e OrderRiskLevel) String() string {
	return string(e)
}

func (e *OrderRiskLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderRiskLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderRiskLevel", str)
	}
	return nil
}

func (e OrderRiskLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Order query.
type OrderSortKeys string

const (
	// Sort by the `created_at` value.
	OrderSortKeysCreatedAt OrderSortKeys = "CREATED_AT"
	// Sort by the `customer_name` value.
	OrderSortKeysCustomerName OrderSortKeys = "CUSTOMER_NAME"
	// Sort by the `financial_status` value.
	OrderSortKeysFinancialStatus OrderSortKeys = "FINANCIAL_STATUS"
	// Sort by the `fulfillment_status` value.
	OrderSortKeysFulfillmentStatus OrderSortKeys = "FULFILLMENT_STATUS"
	// Sort by the `order_number` value.
	OrderSortKeysOrderNumber OrderSortKeys = "ORDER_NUMBER"
	// Sort by the `processed_at` value.
	OrderSortKeysProcessedAt OrderSortKeys = "PROCESSED_AT"
	// Sort by the `total_price` value.
	OrderSortKeysTotalPrice OrderSortKeys = "TOTAL_PRICE"
	// Sort by the `updated_at` value.
	OrderSortKeysUpdatedAt OrderSortKeys = "UPDATED_AT"
	// Sort by the `id` value.
	OrderSortKeysID OrderSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	OrderSortKeysRelevance OrderSortKeys = "RELEVANCE"
)

var AllOrderSortKeys = []OrderSortKeys{
	OrderSortKeysCreatedAt,
	OrderSortKeysCustomerName,
	OrderSortKeysFinancialStatus,
	OrderSortKeysFulfillmentStatus,
	OrderSortKeysOrderNumber,
	OrderSortKeysProcessedAt,
	OrderSortKeysTotalPrice,
	OrderSortKeysUpdatedAt,
	OrderSortKeysID,
	OrderSortKeysRelevance,
}

func (e OrderSortKeys) IsValid() bool {
	switch e {
	case OrderSortKeysCreatedAt, OrderSortKeysCustomerName, OrderSortKeysFinancialStatus, OrderSortKeysFulfillmentStatus, OrderSortKeysOrderNumber, OrderSortKeysProcessedAt, OrderSortKeysTotalPrice, OrderSortKeysUpdatedAt, OrderSortKeysID, OrderSortKeysRelevance:
		return true
	}
	return false
}

func (e OrderSortKeys) String() string {
	return string(e)
}

func (e *OrderSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderSortKeys", str)
	}
	return nil
}

func (e OrderSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A standardized error code, independent of the payment provider.
type OrderTransactionErrorCode string

const (
	// The card number is incorrect.
	OrderTransactionErrorCodeIncorrectNumber OrderTransactionErrorCode = "INCORRECT_NUMBER"
	// The format of the card number is incorrect.
	OrderTransactionErrorCodeInvalidNumber OrderTransactionErrorCode = "INVALID_NUMBER"
	// The format of the expiry date is incorrect.
	OrderTransactionErrorCodeInvalidExpiryDate OrderTransactionErrorCode = "INVALID_EXPIRY_DATE"
	// The format of the CVC is incorrect.
	OrderTransactionErrorCodeInvalidCvc OrderTransactionErrorCode = "INVALID_CVC"
	// The card is expired.
	OrderTransactionErrorCodeExpiredCard OrderTransactionErrorCode = "EXPIRED_CARD"
	// The CVC does not match the card number.
	OrderTransactionErrorCodeIncorrectCvc OrderTransactionErrorCode = "INCORRECT_CVC"
	// The ZIP or postal code does not match the card number.
	OrderTransactionErrorCodeIncorrectZip OrderTransactionErrorCode = "INCORRECT_ZIP"
	// The address does not match the card number.
	OrderTransactionErrorCodeIncorrectAddress OrderTransactionErrorCode = "INCORRECT_ADDRESS"
	// The entered PIN is incorrect.
	OrderTransactionErrorCodeIncorrectPin OrderTransactionErrorCode = "INCORRECT_PIN"
	// The card was declined.
	OrderTransactionErrorCodeCardDeclined OrderTransactionErrorCode = "CARD_DECLINED"
	// There was an error while processing the payment.
	OrderTransactionErrorCodeProcessingError OrderTransactionErrorCode = "PROCESSING_ERROR"
	// Call the card issuer.
	OrderTransactionErrorCodeCallIssuer OrderTransactionErrorCode = "CALL_ISSUER"
	// The card has been reported as lost or stolen, and the card issuer has requested that the merchant keep the card and call the number on the back.
	OrderTransactionErrorCodePickUpCard OrderTransactionErrorCode = "PICK_UP_CARD"
	// There is an error in the gateway or merchant configuration.
	OrderTransactionErrorCodeConfigError OrderTransactionErrorCode = "CONFIG_ERROR"
	// A real card was used but the gateway was in test mode.
	OrderTransactionErrorCodeTestModeLiveCard OrderTransactionErrorCode = "TEST_MODE_LIVE_CARD"
	// The gateway or merchant configuration doesn't support a feature, such as network tokenization.
	OrderTransactionErrorCodeUnsupportedFeature OrderTransactionErrorCode = "UNSUPPORTED_FEATURE"
	// There was an unknown error with processing the payment.
	OrderTransactionErrorCodeGenericError OrderTransactionErrorCode = "GENERIC_ERROR"
	// The payment method is not available in the customer's country.
	OrderTransactionErrorCodeInvalidCountry OrderTransactionErrorCode = "INVALID_COUNTRY"
	// The amount is either too high or too low for the provider.
	OrderTransactionErrorCodeInvalidAmount OrderTransactionErrorCode = "INVALID_AMOUNT"
	// The payment method is momentarily unavailable.
	OrderTransactionErrorCodePaymentMethodUnavailable OrderTransactionErrorCode = "PAYMENT_METHOD_UNAVAILABLE"
	// The payment method was invalid.
	OrderTransactionErrorCodeAmazonPaymentsInvalidPaymentMethod OrderTransactionErrorCode = "AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD"
	// The maximum amount has been captured.
	OrderTransactionErrorCodeAmazonPaymentsMaxAmountCharged OrderTransactionErrorCode = "AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED"
	// The maximum amount has been refunded.
	OrderTransactionErrorCodeAmazonPaymentsMaxAmountRefunded OrderTransactionErrorCode = "AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED"
	// The maximum of 10 authorizations has been captured for an order.
	OrderTransactionErrorCodeAmazonPaymentsMaxAuthorizationsCaptured OrderTransactionErrorCode = "AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED"
	// The maximum of 10 refunds has been processed for an order.
	OrderTransactionErrorCodeAmazonPaymentsMaxRefundsProcessed OrderTransactionErrorCode = "AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED"
	// The order was canceled, which canceled all open authorizations.
	OrderTransactionErrorCodeAmazonPaymentsOrderReferenceCanceled OrderTransactionErrorCode = "AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED"
	// The order was not confirmed within three hours.
	OrderTransactionErrorCodeAmazonPaymentsStale OrderTransactionErrorCode = "AMAZON_PAYMENTS_STALE"
)

var AllOrderTransactionErrorCode = []OrderTransactionErrorCode{
	OrderTransactionErrorCodeIncorrectNumber,
	OrderTransactionErrorCodeInvalidNumber,
	OrderTransactionErrorCodeInvalidExpiryDate,
	OrderTransactionErrorCodeInvalidCvc,
	OrderTransactionErrorCodeExpiredCard,
	OrderTransactionErrorCodeIncorrectCvc,
	OrderTransactionErrorCodeIncorrectZip,
	OrderTransactionErrorCodeIncorrectAddress,
	OrderTransactionErrorCodeIncorrectPin,
	OrderTransactionErrorCodeCardDeclined,
	OrderTransactionErrorCodeProcessingError,
	OrderTransactionErrorCodeCallIssuer,
	OrderTransactionErrorCodePickUpCard,
	OrderTransactionErrorCodeConfigError,
	OrderTransactionErrorCodeTestModeLiveCard,
	OrderTransactionErrorCodeUnsupportedFeature,
	OrderTransactionErrorCodeGenericError,
	OrderTransactionErrorCodeInvalidCountry,
	OrderTransactionErrorCodeInvalidAmount,
	OrderTransactionErrorCodePaymentMethodUnavailable,
	OrderTransactionErrorCodeAmazonPaymentsInvalidPaymentMethod,
	OrderTransactionErrorCodeAmazonPaymentsMaxAmountCharged,
	OrderTransactionErrorCodeAmazonPaymentsMaxAmountRefunded,
	OrderTransactionErrorCodeAmazonPaymentsMaxAuthorizationsCaptured,
	OrderTransactionErrorCodeAmazonPaymentsMaxRefundsProcessed,
	OrderTransactionErrorCodeAmazonPaymentsOrderReferenceCanceled,
	OrderTransactionErrorCodeAmazonPaymentsStale,
}

func (e OrderTransactionErrorCode) IsValid() bool {
	switch e {
	case OrderTransactionErrorCodeIncorrectNumber, OrderTransactionErrorCodeInvalidNumber, OrderTransactionErrorCodeInvalidExpiryDate, OrderTransactionErrorCodeInvalidCvc, OrderTransactionErrorCodeExpiredCard, OrderTransactionErrorCodeIncorrectCvc, OrderTransactionErrorCodeIncorrectZip, OrderTransactionErrorCodeIncorrectAddress, OrderTransactionErrorCodeIncorrectPin, OrderTransactionErrorCodeCardDeclined, OrderTransactionErrorCodeProcessingError, OrderTransactionErrorCodeCallIssuer, OrderTransactionErrorCodePickUpCard, OrderTransactionErrorCodeConfigError, OrderTransactionErrorCodeTestModeLiveCard, OrderTransactionErrorCodeUnsupportedFeature, OrderTransactionErrorCodeGenericError, OrderTransactionErrorCodeInvalidCountry, OrderTransactionErrorCodeInvalidAmount, OrderTransactionErrorCodePaymentMethodUnavailable, OrderTransactionErrorCodeAmazonPaymentsInvalidPaymentMethod, OrderTransactionErrorCodeAmazonPaymentsMaxAmountCharged, OrderTransactionErrorCodeAmazonPaymentsMaxAmountRefunded, OrderTransactionErrorCodeAmazonPaymentsMaxAuthorizationsCaptured, OrderTransactionErrorCodeAmazonPaymentsMaxRefundsProcessed, OrderTransactionErrorCodeAmazonPaymentsOrderReferenceCanceled, OrderTransactionErrorCodeAmazonPaymentsStale:
		return true
	}
	return false
}

func (e OrderTransactionErrorCode) String() string {
	return string(e)
}

func (e *OrderTransactionErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderTransactionErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderTransactionErrorCode", str)
	}
	return nil
}

func (e OrderTransactionErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The different kinds of order transactions.
type OrderTransactionKind string

const (
	// An authorization and capture performed together in a single step.
	OrderTransactionKindSale OrderTransactionKind = "SALE"
	// A transfer of the money that was reserved during the authorization stage.
	OrderTransactionKindCapture OrderTransactionKind = "CAPTURE"
	// An amount reserved against the cardholder's funding source.
	// Money does not change hands until the authorization is captured.
	OrderTransactionKindAuthorization OrderTransactionKind = "AUTHORIZATION"
	// A cancellation of a pending authorization or capture.
	OrderTransactionKindVoid OrderTransactionKind = "VOID"
	// A partial or full return of captured funds to the cardholder.
	// A refund can happen only after a capture is processed.
	OrderTransactionKindRefund OrderTransactionKind = "REFUND"
	// Money returned to the customer when they have paid too much.
	OrderTransactionKindChange OrderTransactionKind = "CHANGE"
	// An authorization for a payment taken with an EMV credit card reader.
	OrderTransactionKindEmvAuthorization OrderTransactionKind = "EMV_AUTHORIZATION"
	// A suggested refund transaction that can be used to create a refund.
	OrderTransactionKindSuggestedRefund OrderTransactionKind = "SUGGESTED_REFUND"
)

var AllOrderTransactionKind = []OrderTransactionKind{
	OrderTransactionKindSale,
	OrderTransactionKindCapture,
	OrderTransactionKindAuthorization,
	OrderTransactionKindVoid,
	OrderTransactionKindRefund,
	OrderTransactionKindChange,
	OrderTransactionKindEmvAuthorization,
	OrderTransactionKindSuggestedRefund,
}

func (e OrderTransactionKind) IsValid() bool {
	switch e {
	case OrderTransactionKindSale, OrderTransactionKindCapture, OrderTransactionKindAuthorization, OrderTransactionKindVoid, OrderTransactionKindRefund, OrderTransactionKindChange, OrderTransactionKindEmvAuthorization, OrderTransactionKindSuggestedRefund:
		return true
	}
	return false
}

func (e OrderTransactionKind) String() string {
	return string(e)
}

func (e *OrderTransactionKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderTransactionKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderTransactionKind", str)
	}
	return nil
}

func (e OrderTransactionKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Transaction status' describe the status of a transaction.
type OrderTransactionStatus string

const (
	// The transaction succeeded.
	OrderTransactionStatusSuccess OrderTransactionStatus = "SUCCESS"
	// The transaction failed.
	OrderTransactionStatusFailure OrderTransactionStatus = "FAILURE"
	// The transaction is pending.
	OrderTransactionStatusPending OrderTransactionStatus = "PENDING"
	// There was an error while processing the transaction.
	OrderTransactionStatusError OrderTransactionStatus = "ERROR"
	// Awaiting a response.
	OrderTransactionStatusAwaitingResponse OrderTransactionStatus = "AWAITING_RESPONSE"
	// The transaction status is unknown.
	OrderTransactionStatusUnknown OrderTransactionStatus = "UNKNOWN"
)

var AllOrderTransactionStatus = []OrderTransactionStatus{
	OrderTransactionStatusSuccess,
	OrderTransactionStatusFailure,
	OrderTransactionStatusPending,
	OrderTransactionStatusError,
	OrderTransactionStatusAwaitingResponse,
	OrderTransactionStatusUnknown,
}

func (e OrderTransactionStatus) IsValid() bool {
	switch e {
	case OrderTransactionStatusSuccess, OrderTransactionStatusFailure, OrderTransactionStatusPending, OrderTransactionStatusError, OrderTransactionStatusAwaitingResponse, OrderTransactionStatusUnknown:
		return true
	}
	return false
}

func (e OrderTransactionStatus) String() string {
	return string(e)
}

func (e *OrderTransactionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderTransactionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderTransactionStatus", str)
	}
	return nil
}

func (e OrderTransactionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// List of payment methods used in Shopify.
type PaymentMethods string

const (
	PaymentMethodsVisa               PaymentMethods = "VISA"
	PaymentMethodsMastercard         PaymentMethods = "MASTERCARD"
	PaymentMethodsDiscover           PaymentMethods = "DISCOVER"
	PaymentMethodsAmericanExpress    PaymentMethods = "AMERICAN_EXPRESS"
	PaymentMethodsDinersClub         PaymentMethods = "DINERS_CLUB"
	PaymentMethodsJcb                PaymentMethods = "JCB"
	PaymentMethodsDankort            PaymentMethods = "DANKORT"
	PaymentMethodsMaestro            PaymentMethods = "MAESTRO"
	PaymentMethodsForbrugsforeningen PaymentMethods = "FORBRUGSFORENINGEN"
	PaymentMethodsPaypal             PaymentMethods = "PAYPAL"
	PaymentMethodsBogus              PaymentMethods = "BOGUS"
	PaymentMethodsBitcoin            PaymentMethods = "BITCOIN"
	PaymentMethodsLitecoin           PaymentMethods = "LITECOIN"
	PaymentMethodsDogecoin           PaymentMethods = "DOGECOIN"
)

var AllPaymentMethods = []PaymentMethods{
	PaymentMethodsVisa,
	PaymentMethodsMastercard,
	PaymentMethodsDiscover,
	PaymentMethodsAmericanExpress,
	PaymentMethodsDinersClub,
	PaymentMethodsJcb,
	PaymentMethodsDankort,
	PaymentMethodsMaestro,
	PaymentMethodsForbrugsforeningen,
	PaymentMethodsPaypal,
	PaymentMethodsBogus,
	PaymentMethodsBitcoin,
	PaymentMethodsLitecoin,
	PaymentMethodsDogecoin,
}

func (e PaymentMethods) IsValid() bool {
	switch e {
	case PaymentMethodsVisa, PaymentMethodsMastercard, PaymentMethodsDiscover, PaymentMethodsAmericanExpress, PaymentMethodsDinersClub, PaymentMethodsJcb, PaymentMethodsDankort, PaymentMethodsMaestro, PaymentMethodsForbrugsforeningen, PaymentMethodsPaypal, PaymentMethodsBogus, PaymentMethodsBitcoin, PaymentMethodsLitecoin, PaymentMethodsDogecoin:
		return true
	}
	return false
}

func (e PaymentMethods) String() string {
	return string(e)
}

func (e *PaymentMethods) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentMethods(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentMethods", str)
	}
	return nil
}

func (e PaymentMethods) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Payment status codes.
type PaymentSessionStatusCode string

const (
	// Payment rejected.
	PaymentSessionStatusCodeRejected PaymentSessionStatusCode = "REJECTED"
	// Payment resolved.
	PaymentSessionStatusCodeResolved PaymentSessionStatusCode = "RESOLVED"
)

var AllPaymentSessionStatusCode = []PaymentSessionStatusCode{
	PaymentSessionStatusCodeRejected,
	PaymentSessionStatusCodeResolved,
}

func (e PaymentSessionStatusCode) IsValid() bool {
	switch e {
	case PaymentSessionStatusCodeRejected, PaymentSessionStatusCodeResolved:
		return true
	}
	return false
}

func (e PaymentSessionStatusCode) String() string {
	return string(e)
}

func (e *PaymentSessionStatusCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentSessionStatusCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentSessionStatusCode", str)
	}
	return nil
}

func (e PaymentSessionStatusCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Payment rejection reason codes.
type PaymentSessionStatusReasonRejectionCode string

const (
	// Rejected by risk control.
	PaymentSessionStatusReasonRejectionCodeRisky PaymentSessionStatusReasonRejectionCode = "RISKY"
	// Payment processing failure. No retry.
	PaymentSessionStatusReasonRejectionCodeProcessingError PaymentSessionStatusReasonRejectionCode = "PROCESSING_ERROR"
)

var AllPaymentSessionStatusReasonRejectionCode = []PaymentSessionStatusReasonRejectionCode{
	PaymentSessionStatusReasonRejectionCodeRisky,
	PaymentSessionStatusReasonRejectionCodeProcessingError,
}

func (e PaymentSessionStatusReasonRejectionCode) IsValid() bool {
	switch e {
	case PaymentSessionStatusReasonRejectionCodeRisky, PaymentSessionStatusReasonRejectionCodeProcessingError:
		return true
	}
	return false
}

func (e PaymentSessionStatusReasonRejectionCode) String() string {
	return string(e)
}

func (e *PaymentSessionStatusReasonRejectionCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentSessionStatusReasonRejectionCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentSessionStatusReasonRejectionCode", str)
	}
	return nil
}

func (e PaymentSessionStatusReasonRejectionCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The method by which the price rule's value is allocated to its entitled items.
type PriceRuleAllocationMethod string

const (
	// The value will be applied to each of the entitled items.
	PriceRuleAllocationMethodEach PriceRuleAllocationMethod = "EACH"
	// The value will be applied once across the entitled items.
	PriceRuleAllocationMethodAcross PriceRuleAllocationMethod = "ACROSS"
)

var AllPriceRuleAllocationMethod = []PriceRuleAllocationMethod{
	PriceRuleAllocationMethodEach,
	PriceRuleAllocationMethodAcross,
}

func (e PriceRuleAllocationMethod) IsValid() bool {
	switch e {
	case PriceRuleAllocationMethodEach, PriceRuleAllocationMethodAcross:
		return true
	}
	return false
}

func (e PriceRuleAllocationMethod) String() string {
	return string(e)
}

func (e *PriceRuleAllocationMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleAllocationMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleAllocationMethod", str)
	}
	return nil
}

func (e PriceRuleAllocationMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that could be returned by a price rule mutation.
type PriceRuleErrorCode string

const (
	// Input value is blank.
	PriceRuleErrorCodeBlank PriceRuleErrorCode = "BLANK"
	// Input value should be equal to allowed value.
	PriceRuleErrorCodeEqualTo PriceRuleErrorCode = "EQUAL_TO"
	// Input value should be greater than minimum allowed value.
	PriceRuleErrorCodeGreaterThan PriceRuleErrorCode = "GREATER_THAN"
	// Input value should be greater than or equal to minimum allowed value.
	PriceRuleErrorCodeGreaterThanOrEqualTo PriceRuleErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// Input value is invalid.
	PriceRuleErrorCodeInvalid PriceRuleErrorCode = "INVALID"
	// Input value should be less than maximum allowed value.
	PriceRuleErrorCodeLessThan PriceRuleErrorCode = "LESS_THAN"
	// Input value should be less or equal to maximum allowed value.
	PriceRuleErrorCodeLessThanOrEqualTo PriceRuleErrorCode = "LESS_THAN_OR_EQUAL_TO"
	// Input value is already taken.
	PriceRuleErrorCodeTaken PriceRuleErrorCode = "TAKEN"
	// Input value is too long.
	PriceRuleErrorCodeTooLong PriceRuleErrorCode = "TOO_LONG"
	// Input value is too short.
	PriceRuleErrorCodeTooShort PriceRuleErrorCode = "TOO_SHORT"
	// Unexpected internal error happened.
	PriceRuleErrorCodeInternalError PriceRuleErrorCode = "INTERNAL_ERROR"
	// Too many arguments provided.
	PriceRuleErrorCodeTooManyArguments PriceRuleErrorCode = "TOO_MANY_ARGUMENTS"
	// Missing a required argument.
	PriceRuleErrorCodeMissingArgument PriceRuleErrorCode = "MISSING_ARGUMENT"
	// Duplicate customer prerequisite id present.
	PriceRuleErrorCodeCustomerPrerequisiteDuplicate                     PriceRuleErrorCode = "CUSTOMER_PREREQUISITE_DUPLICATE"
	PriceRuleErrorCodeCannotEntitleCollectionsWithProductsOrVariants    PriceRuleErrorCode = "CANNOT_ENTITLE_COLLECTIONS_WITH_PRODUCTS_OR_VARIANTS"
	PriceRuleErrorCodeItemEntitlementInvalidType                        PriceRuleErrorCode = "ITEM_ENTITLEMENT_INVALID_TYPE"
	PriceRuleErrorCodeItemEntitlementsDuplicateCollection               PriceRuleErrorCode = "ITEM_ENTITLEMENTS_DUPLICATE_COLLECTION"
	PriceRuleErrorCodeItemEntitlementsDuplicateProduct                  PriceRuleErrorCode = "ITEM_ENTITLEMENTS_DUPLICATE_PRODUCT"
	PriceRuleErrorCodeItemEntitlementsDuplicateVariant                  PriceRuleErrorCode = "ITEM_ENTITLEMENTS_DUPLICATE_VARIANT"
	PriceRuleErrorCodeItemEntitlementsExceededMaxCollection             PriceRuleErrorCode = "ITEM_ENTITLEMENTS_EXCEEDED_MAX_COLLECTION"
	PriceRuleErrorCodeItemEntitlementsExceededMaxProduct                PriceRuleErrorCode = "ITEM_ENTITLEMENTS_EXCEEDED_MAX_PRODUCT"
	PriceRuleErrorCodeItemEntitlementsExceededMaxVariant                PriceRuleErrorCode = "ITEM_ENTITLEMENTS_EXCEEDED_MAX_VARIANT"
	PriceRuleErrorCodeItemEntitlementsInvalidCollection                 PriceRuleErrorCode = "ITEM_ENTITLEMENTS_INVALID_COLLECTION"
	PriceRuleErrorCodeItemEntitlementsInvalidProduct                    PriceRuleErrorCode = "ITEM_ENTITLEMENTS_INVALID_PRODUCT"
	PriceRuleErrorCodeItemEntitlementsInvalidTargetTypeOrSelection      PriceRuleErrorCode = "ITEM_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION"
	PriceRuleErrorCodeItemEntitlementsInvalidVariant                    PriceRuleErrorCode = "ITEM_ENTITLEMENTS_INVALID_VARIANT"
	PriceRuleErrorCodeItemEntitlementsMissing                           PriceRuleErrorCode = "ITEM_ENTITLEMENTS_MISSING"
	PriceRuleErrorCodeVariantAlreadyEntitledThroughProduct              PriceRuleErrorCode = "VARIANT_ALREADY_ENTITLED_THROUGH_PRODUCT"
	PriceRuleErrorCodeCannotPrerequisiteCollectionWithProductOrVariants PriceRuleErrorCode = "CANNOT_PREREQUISITE_COLLECTION_WITH_PRODUCT_OR_VARIANTS"
	PriceRuleErrorCodeItemPrerequisitesDuplicateCollection              PriceRuleErrorCode = "ITEM_PREREQUISITES_DUPLICATE_COLLECTION"
	PriceRuleErrorCodeItemPrerequisitesDuplicateProduct                 PriceRuleErrorCode = "ITEM_PREREQUISITES_DUPLICATE_PRODUCT"
	PriceRuleErrorCodeItemPrerequisitesDuplicateVariant                 PriceRuleErrorCode = "ITEM_PREREQUISITES_DUPLICATE_VARIANT"
	PriceRuleErrorCodeItemPrerequisitesExceededMax                      PriceRuleErrorCode = "ITEM_PREREQUISITES_EXCEEDED_MAX"
	PriceRuleErrorCodeItemPrerequisitesInvalidCollection                PriceRuleErrorCode = "ITEM_PREREQUISITES_INVALID_COLLECTION"
	PriceRuleErrorCodeItemPrerequisitesInvalidProduct                   PriceRuleErrorCode = "ITEM_PREREQUISITES_INVALID_PRODUCT"
	PriceRuleErrorCodeItemPrerequisitesInvalidType                      PriceRuleErrorCode = "ITEM_PREREQUISITES_INVALID_TYPE"
	PriceRuleErrorCodeItemPrerequisitesInvalidVariant                   PriceRuleErrorCode = "ITEM_PREREQUISITES_INVALID_VARIANT"
	PriceRuleErrorCodeItemPrerequisitesMissing                          PriceRuleErrorCode = "ITEM_PREREQUISITES_MISSING"
	PriceRuleErrorCodeItemPrerequisitesMustBeEmpty                      PriceRuleErrorCode = "ITEM_PREREQUISITES_MUST_BE_EMPTY"
	PriceRuleErrorCodeInvalidTargetTypePrerequisiteShippingPriceRange   PriceRuleErrorCode = "INVALID_TARGET_TYPE_PREREQUISITE_SHIPPING_PRICE_RANGE"
	PriceRuleErrorCodeShippingEntitlementsDuplicateCountry              PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_DUPLICATE_COUNTRY"
	PriceRuleErrorCodeShippingEntitlementsExceededMax                   PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_EXCEEDED_MAX"
	PriceRuleErrorCodeShippingEntitlementsInvalidCountry                PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_INVALID_COUNTRY"
	PriceRuleErrorCodeShippingEntitlementsInvalidTargetTypeOrSelection  PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION"
	PriceRuleErrorCodeShippingEntitlementsMissing                       PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_MISSING"
	PriceRuleErrorCodeShippingEntitlementsUnsupportedDestinationType    PriceRuleErrorCode = "SHIPPING_ENTITLEMENTS_UNSUPPORTED_DESTINATION_TYPE"
	PriceRuleErrorCodeBothCustomerAndSavedSearchPrerequisitesSelected   PriceRuleErrorCode = "BOTH_CUSTOMER_AND_SAVED_SEARCH_PREREQUISITES_SELECTED"
	PriceRuleErrorCodeCustomerPrerequisitesExceededMax                  PriceRuleErrorCode = "CUSTOMER_PREREQUISITES_EXCEEDED_MAX"
	PriceRuleErrorCodeCustomerPrerequisitesInvalidSelection             PriceRuleErrorCode = "CUSTOMER_PREREQUISITES_INVALID_SELECTION"
	PriceRuleErrorCodeCustomerPrerequisitesMissing                      PriceRuleErrorCode = "CUSTOMER_PREREQUISITES_MISSING"
	PriceRuleErrorCodeCustomerSavedSearchDuplicate                      PriceRuleErrorCode = "CUSTOMER_SAVED_SEARCH_DUPLICATE"
	PriceRuleErrorCodeCustomerSavedSearchExceededMax                    PriceRuleErrorCode = "CUSTOMER_SAVED_SEARCH_EXCEEDED_MAX"
	PriceRuleErrorCodeCustomerSavedSearchInvalid                        PriceRuleErrorCode = "CUSTOMER_SAVED_SEARCH_INVALID"
	PriceRuleErrorCodeDiscountCodeDuplicate                             PriceRuleErrorCode = "DISCOUNT_CODE_DUPLICATE"
	// Exceeds maximum number allowed.
	PriceRuleErrorCodeExceededMax                PriceRuleErrorCode = "EXCEEDED_MAX"
	PriceRuleErrorCodeBogoInvalidTargetSelection PriceRuleErrorCode = "BOGO_INVALID_TARGET_SELECTION"
	PriceRuleErrorCodeBogoInvalidTargetType      PriceRuleErrorCode = "BOGO_INVALID_TARGET_TYPE"
	PriceRuleErrorCodeBogoInvalidValueType       PriceRuleErrorCode = "BOGO_INVALID_VALUE_TYPE"
	// Allocation limit can only be set on buy one get one type discounts.
	PriceRuleErrorCodePriceRuleAllocationLimitOnNonBogo PriceRuleErrorCode = "PRICE_RULE_ALLOCATION_LIMIT_ON_NON_BOGO"
	// Allocation limit must be a non zero positive number.
	PriceRuleErrorCodePriceRuleAllocationLimitIsZero PriceRuleErrorCode = "PRICE_RULE_ALLOCATION_LIMIT_IS_ZERO"
	// Number of discount codes in the shop has reached its limit.
	PriceRuleErrorCodePriceRuleExceededMaxDiscountCode PriceRuleErrorCode = "PRICE_RULE_EXCEEDED_MAX_DISCOUNT_CODE"
	// Number of discounts in the shop has reached its limit.
	PriceRuleErrorCodeShopExceededMaxPriceRules PriceRuleErrorCode = "SHOP_EXCEEDED_MAX_PRICE_RULES"
	// Discount end date must be after the start date.
	PriceRuleErrorCodeEndDateBeforeStartDate PriceRuleErrorCode = "END_DATE_BEFORE_START_DATE"
	// Percentage value must be between 0 and -100.
	PriceRuleErrorCodePriceRulePercentageValueOutsideRange PriceRuleErrorCode = "PRICE_RULE_PERCENTAGE_VALUE_OUTSIDE_RANGE"
	// Only one of minimum subtotal or minimum quantity condition can be defined.
	PriceRuleErrorCodePrerequisiteSubtotalAndQuantityRangeBothPresent PriceRuleErrorCode = "PREREQUISITE_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT"
	// Allocation method must be "across" for the provided target selection.
	PriceRuleErrorCodeAllocationMethodMustBeAcrossForGivenTargetSelection PriceRuleErrorCode = "ALLOCATION_METHOD_MUST_BE_ACROSS_FOR_GIVEN_TARGET_SELECTION"
	// Discount must apply on either one time purchase or subscription items, or both.
	PriceRuleErrorCodeAppliesOnNothing PriceRuleErrorCode = "APPLIES_ON_NOTHING"
	// Recurring cycle limit must be 1 when a discount does not apply on subscription items.
	PriceRuleErrorCodeMultipleRecurringCycleLimitForNonSubscriptionItems PriceRuleErrorCode = "MULTIPLE_RECURRING_CYCLE_LIMIT_FOR_NON_SUBSCRIPTION_ITEMS"
)

var AllPriceRuleErrorCode = []PriceRuleErrorCode{
	PriceRuleErrorCodeBlank,
	PriceRuleErrorCodeEqualTo,
	PriceRuleErrorCodeGreaterThan,
	PriceRuleErrorCodeGreaterThanOrEqualTo,
	PriceRuleErrorCodeInvalid,
	PriceRuleErrorCodeLessThan,
	PriceRuleErrorCodeLessThanOrEqualTo,
	PriceRuleErrorCodeTaken,
	PriceRuleErrorCodeTooLong,
	PriceRuleErrorCodeTooShort,
	PriceRuleErrorCodeInternalError,
	PriceRuleErrorCodeTooManyArguments,
	PriceRuleErrorCodeMissingArgument,
	PriceRuleErrorCodeCustomerPrerequisiteDuplicate,
	PriceRuleErrorCodeCannotEntitleCollectionsWithProductsOrVariants,
	PriceRuleErrorCodeItemEntitlementInvalidType,
	PriceRuleErrorCodeItemEntitlementsDuplicateCollection,
	PriceRuleErrorCodeItemEntitlementsDuplicateProduct,
	PriceRuleErrorCodeItemEntitlementsDuplicateVariant,
	PriceRuleErrorCodeItemEntitlementsExceededMaxCollection,
	PriceRuleErrorCodeItemEntitlementsExceededMaxProduct,
	PriceRuleErrorCodeItemEntitlementsExceededMaxVariant,
	PriceRuleErrorCodeItemEntitlementsInvalidCollection,
	PriceRuleErrorCodeItemEntitlementsInvalidProduct,
	PriceRuleErrorCodeItemEntitlementsInvalidTargetTypeOrSelection,
	PriceRuleErrorCodeItemEntitlementsInvalidVariant,
	PriceRuleErrorCodeItemEntitlementsMissing,
	PriceRuleErrorCodeVariantAlreadyEntitledThroughProduct,
	PriceRuleErrorCodeCannotPrerequisiteCollectionWithProductOrVariants,
	PriceRuleErrorCodeItemPrerequisitesDuplicateCollection,
	PriceRuleErrorCodeItemPrerequisitesDuplicateProduct,
	PriceRuleErrorCodeItemPrerequisitesDuplicateVariant,
	PriceRuleErrorCodeItemPrerequisitesExceededMax,
	PriceRuleErrorCodeItemPrerequisitesInvalidCollection,
	PriceRuleErrorCodeItemPrerequisitesInvalidProduct,
	PriceRuleErrorCodeItemPrerequisitesInvalidType,
	PriceRuleErrorCodeItemPrerequisitesInvalidVariant,
	PriceRuleErrorCodeItemPrerequisitesMissing,
	PriceRuleErrorCodeItemPrerequisitesMustBeEmpty,
	PriceRuleErrorCodeInvalidTargetTypePrerequisiteShippingPriceRange,
	PriceRuleErrorCodeShippingEntitlementsDuplicateCountry,
	PriceRuleErrorCodeShippingEntitlementsExceededMax,
	PriceRuleErrorCodeShippingEntitlementsInvalidCountry,
	PriceRuleErrorCodeShippingEntitlementsInvalidTargetTypeOrSelection,
	PriceRuleErrorCodeShippingEntitlementsMissing,
	PriceRuleErrorCodeShippingEntitlementsUnsupportedDestinationType,
	PriceRuleErrorCodeBothCustomerAndSavedSearchPrerequisitesSelected,
	PriceRuleErrorCodeCustomerPrerequisitesExceededMax,
	PriceRuleErrorCodeCustomerPrerequisitesInvalidSelection,
	PriceRuleErrorCodeCustomerPrerequisitesMissing,
	PriceRuleErrorCodeCustomerSavedSearchDuplicate,
	PriceRuleErrorCodeCustomerSavedSearchExceededMax,
	PriceRuleErrorCodeCustomerSavedSearchInvalid,
	PriceRuleErrorCodeDiscountCodeDuplicate,
	PriceRuleErrorCodeExceededMax,
	PriceRuleErrorCodeBogoInvalidTargetSelection,
	PriceRuleErrorCodeBogoInvalidTargetType,
	PriceRuleErrorCodeBogoInvalidValueType,
	PriceRuleErrorCodePriceRuleAllocationLimitOnNonBogo,
	PriceRuleErrorCodePriceRuleAllocationLimitIsZero,
	PriceRuleErrorCodePriceRuleExceededMaxDiscountCode,
	PriceRuleErrorCodeShopExceededMaxPriceRules,
	PriceRuleErrorCodeEndDateBeforeStartDate,
	PriceRuleErrorCodePriceRulePercentageValueOutsideRange,
	PriceRuleErrorCodePrerequisiteSubtotalAndQuantityRangeBothPresent,
	PriceRuleErrorCodeAllocationMethodMustBeAcrossForGivenTargetSelection,
	PriceRuleErrorCodeAppliesOnNothing,
	PriceRuleErrorCodeMultipleRecurringCycleLimitForNonSubscriptionItems,
}

func (e PriceRuleErrorCode) IsValid() bool {
	switch e {
	case PriceRuleErrorCodeBlank, PriceRuleErrorCodeEqualTo, PriceRuleErrorCodeGreaterThan, PriceRuleErrorCodeGreaterThanOrEqualTo, PriceRuleErrorCodeInvalid, PriceRuleErrorCodeLessThan, PriceRuleErrorCodeLessThanOrEqualTo, PriceRuleErrorCodeTaken, PriceRuleErrorCodeTooLong, PriceRuleErrorCodeTooShort, PriceRuleErrorCodeInternalError, PriceRuleErrorCodeTooManyArguments, PriceRuleErrorCodeMissingArgument, PriceRuleErrorCodeCustomerPrerequisiteDuplicate, PriceRuleErrorCodeCannotEntitleCollectionsWithProductsOrVariants, PriceRuleErrorCodeItemEntitlementInvalidType, PriceRuleErrorCodeItemEntitlementsDuplicateCollection, PriceRuleErrorCodeItemEntitlementsDuplicateProduct, PriceRuleErrorCodeItemEntitlementsDuplicateVariant, PriceRuleErrorCodeItemEntitlementsExceededMaxCollection, PriceRuleErrorCodeItemEntitlementsExceededMaxProduct, PriceRuleErrorCodeItemEntitlementsExceededMaxVariant, PriceRuleErrorCodeItemEntitlementsInvalidCollection, PriceRuleErrorCodeItemEntitlementsInvalidProduct, PriceRuleErrorCodeItemEntitlementsInvalidTargetTypeOrSelection, PriceRuleErrorCodeItemEntitlementsInvalidVariant, PriceRuleErrorCodeItemEntitlementsMissing, PriceRuleErrorCodeVariantAlreadyEntitledThroughProduct, PriceRuleErrorCodeCannotPrerequisiteCollectionWithProductOrVariants, PriceRuleErrorCodeItemPrerequisitesDuplicateCollection, PriceRuleErrorCodeItemPrerequisitesDuplicateProduct, PriceRuleErrorCodeItemPrerequisitesDuplicateVariant, PriceRuleErrorCodeItemPrerequisitesExceededMax, PriceRuleErrorCodeItemPrerequisitesInvalidCollection, PriceRuleErrorCodeItemPrerequisitesInvalidProduct, PriceRuleErrorCodeItemPrerequisitesInvalidType, PriceRuleErrorCodeItemPrerequisitesInvalidVariant, PriceRuleErrorCodeItemPrerequisitesMissing, PriceRuleErrorCodeItemPrerequisitesMustBeEmpty, PriceRuleErrorCodeInvalidTargetTypePrerequisiteShippingPriceRange, PriceRuleErrorCodeShippingEntitlementsDuplicateCountry, PriceRuleErrorCodeShippingEntitlementsExceededMax, PriceRuleErrorCodeShippingEntitlementsInvalidCountry, PriceRuleErrorCodeShippingEntitlementsInvalidTargetTypeOrSelection, PriceRuleErrorCodeShippingEntitlementsMissing, PriceRuleErrorCodeShippingEntitlementsUnsupportedDestinationType, PriceRuleErrorCodeBothCustomerAndSavedSearchPrerequisitesSelected, PriceRuleErrorCodeCustomerPrerequisitesExceededMax, PriceRuleErrorCodeCustomerPrerequisitesInvalidSelection, PriceRuleErrorCodeCustomerPrerequisitesMissing, PriceRuleErrorCodeCustomerSavedSearchDuplicate, PriceRuleErrorCodeCustomerSavedSearchExceededMax, PriceRuleErrorCodeCustomerSavedSearchInvalid, PriceRuleErrorCodeDiscountCodeDuplicate, PriceRuleErrorCodeExceededMax, PriceRuleErrorCodeBogoInvalidTargetSelection, PriceRuleErrorCodeBogoInvalidTargetType, PriceRuleErrorCodeBogoInvalidValueType, PriceRuleErrorCodePriceRuleAllocationLimitOnNonBogo, PriceRuleErrorCodePriceRuleAllocationLimitIsZero, PriceRuleErrorCodePriceRuleExceededMaxDiscountCode, PriceRuleErrorCodeShopExceededMaxPriceRules, PriceRuleErrorCodeEndDateBeforeStartDate, PriceRuleErrorCodePriceRulePercentageValueOutsideRange, PriceRuleErrorCodePrerequisiteSubtotalAndQuantityRangeBothPresent, PriceRuleErrorCodeAllocationMethodMustBeAcrossForGivenTargetSelection, PriceRuleErrorCodeAppliesOnNothing, PriceRuleErrorCodeMultipleRecurringCycleLimitForNonSubscriptionItems:
		return true
	}
	return false
}

func (e PriceRuleErrorCode) String() string {
	return string(e)
}

func (e *PriceRuleErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleErrorCode", str)
	}
	return nil
}

func (e PriceRuleErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A list of features used by the price rule.
type PriceRuleFeature string

const (
	// The price rule supports quantity BXGY discounts.
	PriceRuleFeatureBuyOneGetOne PriceRuleFeature = "BUY_ONE_GET_ONE"
	// The price rule supports BXGY discounts using custom allocation limit.
	PriceRuleFeatureBuyOneGetOneWithAllocationLimit PriceRuleFeature = "BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT"
	// The price rule supports bulk discounts.
	PriceRuleFeatureBulk PriceRuleFeature = "BULK"
	// The price rule supports specific customers.
	PriceRuleFeatureSpecificCustomers PriceRuleFeature = "SPECIFIC_CUSTOMERS"
	// The price rule supports quantity discounts.
	PriceRuleFeatureQuantityDiscounts PriceRuleFeature = "QUANTITY_DISCOUNTS"
)

var AllPriceRuleFeature = []PriceRuleFeature{
	PriceRuleFeatureBuyOneGetOne,
	PriceRuleFeatureBuyOneGetOneWithAllocationLimit,
	PriceRuleFeatureBulk,
	PriceRuleFeatureSpecificCustomers,
	PriceRuleFeatureQuantityDiscounts,
}

func (e PriceRuleFeature) IsValid() bool {
	switch e {
	case PriceRuleFeatureBuyOneGetOne, PriceRuleFeatureBuyOneGetOneWithAllocationLimit, PriceRuleFeatureBulk, PriceRuleFeatureSpecificCustomers, PriceRuleFeatureQuantityDiscounts:
		return true
	}
	return false
}

func (e PriceRuleFeature) String() string {
	return string(e)
}

func (e *PriceRuleFeature) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleFeature(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleFeature", str)
	}
	return nil
}

func (e PriceRuleFeature) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Page type where shareable URL lands.
type PriceRuleShareableURLTargetType string

const (
	PriceRuleShareableURLTargetTypeHome       PriceRuleShareableURLTargetType = "HOME"
	PriceRuleShareableURLTargetTypeProduct    PriceRuleShareableURLTargetType = "PRODUCT"
	PriceRuleShareableURLTargetTypeCollection PriceRuleShareableURLTargetType = "COLLECTION"
)

var AllPriceRuleShareableURLTargetType = []PriceRuleShareableURLTargetType{
	PriceRuleShareableURLTargetTypeHome,
	PriceRuleShareableURLTargetTypeProduct,
	PriceRuleShareableURLTargetTypeCollection,
}

func (e PriceRuleShareableURLTargetType) IsValid() bool {
	switch e {
	case PriceRuleShareableURLTargetTypeHome, PriceRuleShareableURLTargetTypeProduct, PriceRuleShareableURLTargetTypeCollection:
		return true
	}
	return false
}

func (e PriceRuleShareableURLTargetType) String() string {
	return string(e)
}

func (e *PriceRuleShareableURLTargetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleShareableURLTargetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleShareableUrlTargetType", str)
	}
	return nil
}

func (e PriceRuleShareableURLTargetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the PriceRule query.
type PriceRuleSortKeys string

const (
	// Sort by the `starts_at` value.
	PriceRuleSortKeysStartsAt PriceRuleSortKeys = "STARTS_AT"
	// Sort by the `ends_at` value.
	PriceRuleSortKeysEndsAt PriceRuleSortKeys = "ENDS_AT"
	// Sort by the `title` value.
	PriceRuleSortKeysTitle PriceRuleSortKeys = "TITLE"
	// Sort by the `created_at` value.
	PriceRuleSortKeysCreatedAt PriceRuleSortKeys = "CREATED_AT"
	// Sort by the `updated_at` value.
	PriceRuleSortKeysUpdatedAt PriceRuleSortKeys = "UPDATED_AT"
	// Sort by the `id` value.
	PriceRuleSortKeysID PriceRuleSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	PriceRuleSortKeysRelevance PriceRuleSortKeys = "RELEVANCE"
)

var AllPriceRuleSortKeys = []PriceRuleSortKeys{
	PriceRuleSortKeysStartsAt,
	PriceRuleSortKeysEndsAt,
	PriceRuleSortKeysTitle,
	PriceRuleSortKeysCreatedAt,
	PriceRuleSortKeysUpdatedAt,
	PriceRuleSortKeysID,
	PriceRuleSortKeysRelevance,
}

func (e PriceRuleSortKeys) IsValid() bool {
	switch e {
	case PriceRuleSortKeysStartsAt, PriceRuleSortKeysEndsAt, PriceRuleSortKeysTitle, PriceRuleSortKeysCreatedAt, PriceRuleSortKeysUpdatedAt, PriceRuleSortKeysID, PriceRuleSortKeysRelevance:
		return true
	}
	return false
}

func (e PriceRuleSortKeys) String() string {
	return string(e)
}

func (e *PriceRuleSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleSortKeys", str)
	}
	return nil
}

func (e PriceRuleSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of the price rule.
type PriceRuleStatus string

const (
	PriceRuleStatusActive    PriceRuleStatus = "ACTIVE"
	PriceRuleStatusExpired   PriceRuleStatus = "EXPIRED"
	PriceRuleStatusScheduled PriceRuleStatus = "SCHEDULED"
)

var AllPriceRuleStatus = []PriceRuleStatus{
	PriceRuleStatusActive,
	PriceRuleStatusExpired,
	PriceRuleStatusScheduled,
}

func (e PriceRuleStatus) IsValid() bool {
	switch e {
	case PriceRuleStatusActive, PriceRuleStatusExpired, PriceRuleStatusScheduled:
		return true
	}
	return false
}

func (e PriceRuleStatus) String() string {
	return string(e)
}

func (e *PriceRuleStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleStatus", str)
	}
	return nil
}

func (e PriceRuleStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of lines (line_item or shipping_line) to which the price rule applies.
type PriceRuleTarget string

const (
	// The price rule applies to line items.
	PriceRuleTargetLineItem PriceRuleTarget = "LINE_ITEM"
	// The price rule applies to shipping lines.
	PriceRuleTargetShippingLine PriceRuleTarget = "SHIPPING_LINE"
)

var AllPriceRuleTarget = []PriceRuleTarget{
	PriceRuleTargetLineItem,
	PriceRuleTargetShippingLine,
}

func (e PriceRuleTarget) IsValid() bool {
	switch e {
	case PriceRuleTargetLineItem, PriceRuleTargetShippingLine:
		return true
	}
	return false
}

func (e PriceRuleTarget) String() string {
	return string(e)
}

func (e *PriceRuleTarget) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleTarget(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleTarget", str)
	}
	return nil
}

func (e PriceRuleTarget) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A list of features used by the price rule.
type PriceRuleTrait string

const (
	// The price rule supports quantity BXGY discounts.
	PriceRuleTraitBuyOneGetOne PriceRuleTrait = "BUY_ONE_GET_ONE"
	// The price rule supports BXGY discounts using custom allocation limit.
	PriceRuleTraitBuyOneGetOneWithAllocationLimit PriceRuleTrait = "BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT"
	// The price rule supports bulk discounts.
	PriceRuleTraitBulk PriceRuleTrait = "BULK"
	// The price rule supports specific customers.
	PriceRuleTraitSpecificCustomers PriceRuleTrait = "SPECIFIC_CUSTOMERS"
	// The price rule supports quantity discounts.
	PriceRuleTraitQuantityDiscounts PriceRuleTrait = "QUANTITY_DISCOUNTS"
)

var AllPriceRuleTrait = []PriceRuleTrait{
	PriceRuleTraitBuyOneGetOne,
	PriceRuleTraitBuyOneGetOneWithAllocationLimit,
	PriceRuleTraitBulk,
	PriceRuleTraitSpecificCustomers,
	PriceRuleTraitQuantityDiscounts,
}

func (e PriceRuleTrait) IsValid() bool {
	switch e {
	case PriceRuleTraitBuyOneGetOne, PriceRuleTraitBuyOneGetOneWithAllocationLimit, PriceRuleTraitBulk, PriceRuleTraitSpecificCustomers, PriceRuleTraitQuantityDiscounts:
		return true
	}
	return false
}

func (e PriceRuleTrait) String() string {
	return string(e)
}

func (e *PriceRuleTrait) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceRuleTrait(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceRuleTrait", str)
	}
	return nil
}

func (e PriceRuleTrait) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Private Metafield value types.
type PrivateMetafieldValueType string

const (
	// A string metafield.
	PrivateMetafieldValueTypeString PrivateMetafieldValueType = "STRING"
	// An integer metafield.
	PrivateMetafieldValueTypeInteger PrivateMetafieldValueType = "INTEGER"
	// A JSON string metafield.
	PrivateMetafieldValueTypeJSONString PrivateMetafieldValueType = "JSON_STRING"
)

var AllPrivateMetafieldValueType = []PrivateMetafieldValueType{
	PrivateMetafieldValueTypeString,
	PrivateMetafieldValueTypeInteger,
	PrivateMetafieldValueTypeJSONString,
}

func (e PrivateMetafieldValueType) IsValid() bool {
	switch e {
	case PrivateMetafieldValueTypeString, PrivateMetafieldValueTypeInteger, PrivateMetafieldValueTypeJSONString:
		return true
	}
	return false
}

func (e PrivateMetafieldValueType) String() string {
	return string(e)
}

func (e *PrivateMetafieldValueType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PrivateMetafieldValueType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PrivateMetafieldValueType", str)
	}
	return nil
}

func (e PrivateMetafieldValueType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that could be returned by ProductChangeStatusUserError.
type ProductChangeStatusUserErrorCode string

const (
	// Product could not be found.
	ProductChangeStatusUserErrorCodeProductNotFound ProductChangeStatusUserErrorCode = "PRODUCT_NOT_FOUND"
)

var AllProductChangeStatusUserErrorCode = []ProductChangeStatusUserErrorCode{
	ProductChangeStatusUserErrorCodeProductNotFound,
}

func (e ProductChangeStatusUserErrorCode) IsValid() bool {
	switch e {
	case ProductChangeStatusUserErrorCodeProductNotFound:
		return true
	}
	return false
}

func (e ProductChangeStatusUserErrorCode) String() string {
	return string(e)
}

func (e *ProductChangeStatusUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductChangeStatusUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductChangeStatusUserErrorCode", str)
	}
	return nil
}

func (e ProductChangeStatusUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the ProductCollection query.
type ProductCollectionSortKeys string

const (
	// Sort by the `title` value.
	ProductCollectionSortKeysTitle ProductCollectionSortKeys = "TITLE"
	// Sort by the `price` value.
	ProductCollectionSortKeysPrice ProductCollectionSortKeys = "PRICE"
	// Sort by the `best-selling` value.
	ProductCollectionSortKeysBestSelling ProductCollectionSortKeys = "BEST_SELLING"
	// Sort by the `created` value.
	ProductCollectionSortKeysCreated ProductCollectionSortKeys = "CREATED"
	// Sort by the `id` value.
	ProductCollectionSortKeysID ProductCollectionSortKeys = "ID"
	// Sort by the `manual` value.
	ProductCollectionSortKeysManual ProductCollectionSortKeys = "MANUAL"
	// Sort by the `collection-default` value.
	ProductCollectionSortKeysCollectionDefault ProductCollectionSortKeys = "COLLECTION_DEFAULT"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	ProductCollectionSortKeysRelevance ProductCollectionSortKeys = "RELEVANCE"
)

var AllProductCollectionSortKeys = []ProductCollectionSortKeys{
	ProductCollectionSortKeysTitle,
	ProductCollectionSortKeysPrice,
	ProductCollectionSortKeysBestSelling,
	ProductCollectionSortKeysCreated,
	ProductCollectionSortKeysID,
	ProductCollectionSortKeysManual,
	ProductCollectionSortKeysCollectionDefault,
	ProductCollectionSortKeysRelevance,
}

func (e ProductCollectionSortKeys) IsValid() bool {
	switch e {
	case ProductCollectionSortKeysTitle, ProductCollectionSortKeysPrice, ProductCollectionSortKeysBestSelling, ProductCollectionSortKeysCreated, ProductCollectionSortKeysID, ProductCollectionSortKeysManual, ProductCollectionSortKeysCollectionDefault, ProductCollectionSortKeysRelevance:
		return true
	}
	return false
}

func (e ProductCollectionSortKeys) String() string {
	return string(e)
}

func (e *ProductCollectionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductCollectionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductCollectionSortKeys", str)
	}
	return nil
}

func (e ProductCollectionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the ProductImage query.
type ProductImageSortKeys string

const (
	// Sort by the `created_at` value.
	ProductImageSortKeysCreatedAt ProductImageSortKeys = "CREATED_AT"
	// Sort by the `position` value.
	ProductImageSortKeysPosition ProductImageSortKeys = "POSITION"
	// Sort by the `id` value.
	ProductImageSortKeysID ProductImageSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	ProductImageSortKeysRelevance ProductImageSortKeys = "RELEVANCE"
)

var AllProductImageSortKeys = []ProductImageSortKeys{
	ProductImageSortKeysCreatedAt,
	ProductImageSortKeysPosition,
	ProductImageSortKeysID,
	ProductImageSortKeysRelevance,
}

func (e ProductImageSortKeys) IsValid() bool {
	switch e {
	case ProductImageSortKeysCreatedAt, ProductImageSortKeysPosition, ProductImageSortKeysID, ProductImageSortKeysRelevance:
		return true
	}
	return false
}

func (e ProductImageSortKeys) String() string {
	return string(e)
}

func (e *ProductImageSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductImageSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductImageSortKeys", str)
	}
	return nil
}

func (e ProductImageSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the ProductMedia query.
type ProductMediaSortKeys string

const (
	// Sort by the `position` value.
	ProductMediaSortKeysPosition ProductMediaSortKeys = "POSITION"
	// Sort by the `id` value.
	ProductMediaSortKeysID ProductMediaSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	ProductMediaSortKeysRelevance ProductMediaSortKeys = "RELEVANCE"
)

var AllProductMediaSortKeys = []ProductMediaSortKeys{
	ProductMediaSortKeysPosition,
	ProductMediaSortKeysID,
	ProductMediaSortKeysRelevance,
}

func (e ProductMediaSortKeys) IsValid() bool {
	switch e {
	case ProductMediaSortKeysPosition, ProductMediaSortKeysID, ProductMediaSortKeysRelevance:
		return true
	}
	return false
}

func (e ProductMediaSortKeys) String() string {
	return string(e)
}

func (e *ProductMediaSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductMediaSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductMediaSortKeys", str)
	}
	return nil
}

func (e ProductMediaSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the Product query.
type ProductSortKeys string

const (
	// Sort by the `title` value.
	ProductSortKeysTitle ProductSortKeys = "TITLE"
	// Sort by the `product_type` value.
	ProductSortKeysProductType ProductSortKeys = "PRODUCT_TYPE"
	// Sort by the `vendor` value.
	ProductSortKeysVendor ProductSortKeys = "VENDOR"
	// Sort by the `inventory_total` value.
	ProductSortKeysInventoryTotal ProductSortKeys = "INVENTORY_TOTAL"
	// Sort by the `updated_at` value.
	ProductSortKeysUpdatedAt ProductSortKeys = "UPDATED_AT"
	// Sort by the `created_at` value.
	ProductSortKeysCreatedAt ProductSortKeys = "CREATED_AT"
	// Sort by the `published_at` value.
	ProductSortKeysPublishedAt ProductSortKeys = "PUBLISHED_AT"
	// Sort by the `id` value.
	ProductSortKeysID ProductSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	ProductSortKeysRelevance ProductSortKeys = "RELEVANCE"
)

var AllProductSortKeys = []ProductSortKeys{
	ProductSortKeysTitle,
	ProductSortKeysProductType,
	ProductSortKeysVendor,
	ProductSortKeysInventoryTotal,
	ProductSortKeysUpdatedAt,
	ProductSortKeysCreatedAt,
	ProductSortKeysPublishedAt,
	ProductSortKeysID,
	ProductSortKeysRelevance,
}

func (e ProductSortKeys) IsValid() bool {
	switch e {
	case ProductSortKeysTitle, ProductSortKeysProductType, ProductSortKeysVendor, ProductSortKeysInventoryTotal, ProductSortKeysUpdatedAt, ProductSortKeysCreatedAt, ProductSortKeysPublishedAt, ProductSortKeysID, ProductSortKeysRelevance:
		return true
	}
	return false
}

func (e ProductSortKeys) String() string {
	return string(e)
}

func (e *ProductSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductSortKeys", str)
	}
	return nil
}

func (e ProductSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible product statuses.
type ProductStatus string

const (
	// The product is ready to sell and is available to customers on the online store, sales channels, and apps. By default, existing products are set to active.
	ProductStatusActive ProductStatus = "ACTIVE"
	// The product is no longer being sold and isn't available to customers on sales channels and apps.
	ProductStatusArchived ProductStatus = "ARCHIVED"
	// The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft.
	ProductStatusDraft ProductStatus = "DRAFT"
)

var AllProductStatus = []ProductStatus{
	ProductStatusActive,
	ProductStatusArchived,
	ProductStatusDraft,
}

func (e ProductStatus) IsValid() bool {
	switch e {
	case ProductStatusActive, ProductStatusArchived, ProductStatusDraft:
		return true
	}
	return false
}

func (e ProductStatus) String() string {
	return string(e)
}

func (e *ProductStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductStatus", str)
	}
	return nil
}

func (e ProductStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The method of inventory tracking for a product variant.
type ProductVariantInventoryManagement string

const (
	// Shopify tracks this product variant's inventory.
	ProductVariantInventoryManagementShopify ProductVariantInventoryManagement = "SHOPIFY"
	// This product variant's inventory is not tracked.
	ProductVariantInventoryManagementNotManaged ProductVariantInventoryManagement = "NOT_MANAGED"
	// A third-party fulfillment service tracks this product variant's inventory.
	ProductVariantInventoryManagementFulfillmentService ProductVariantInventoryManagement = "FULFILLMENT_SERVICE"
)

var AllProductVariantInventoryManagement = []ProductVariantInventoryManagement{
	ProductVariantInventoryManagementShopify,
	ProductVariantInventoryManagementNotManaged,
	ProductVariantInventoryManagementFulfillmentService,
}

func (e ProductVariantInventoryManagement) IsValid() bool {
	switch e {
	case ProductVariantInventoryManagementShopify, ProductVariantInventoryManagementNotManaged, ProductVariantInventoryManagementFulfillmentService:
		return true
	}
	return false
}

func (e ProductVariantInventoryManagement) String() string {
	return string(e)
}

func (e *ProductVariantInventoryManagement) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantInventoryManagement(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantInventoryManagement", str)
	}
	return nil
}

func (e ProductVariantInventoryManagement) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The inventory policy for a product variant controls whether customers can continue to buy the variant when it
// is out of stock. When the value is <code>continue</code>, customers are able to buy the variant when it's out of stock.
// When the value is <code>deny</code>, customers can't buy the variant when it's out of stock.
type ProductVariantInventoryPolicy string

const (
	// Stop selling a product variant when it is out of stock.
	ProductVariantInventoryPolicyDeny ProductVariantInventoryPolicy = "DENY"
	// Continue selling a product variant when it is out of stock.
	ProductVariantInventoryPolicyContinue ProductVariantInventoryPolicy = "CONTINUE"
)

var AllProductVariantInventoryPolicy = []ProductVariantInventoryPolicy{
	ProductVariantInventoryPolicyDeny,
	ProductVariantInventoryPolicyContinue,
}

func (e ProductVariantInventoryPolicy) IsValid() bool {
	switch e {
	case ProductVariantInventoryPolicyDeny, ProductVariantInventoryPolicyContinue:
		return true
	}
	return false
}

func (e ProductVariantInventoryPolicy) String() string {
	return string(e)
}

func (e *ProductVariantInventoryPolicy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantInventoryPolicy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantInventoryPolicy", str)
	}
	return nil
}

func (e ProductVariantInventoryPolicy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the ProductVariant query.
type ProductVariantSortKeys string

const (
	// Sort by the `title` value.
	ProductVariantSortKeysTitle ProductVariantSortKeys = "TITLE"
	// Sort by the `name` value.
	ProductVariantSortKeysName ProductVariantSortKeys = "NAME"
	// Sort by the `sku` value.
	ProductVariantSortKeysSku ProductVariantSortKeys = "SKU"
	// Sort by the `inventory_quantity` value.
	ProductVariantSortKeysInventoryQuantity ProductVariantSortKeys = "INVENTORY_QUANTITY"
	// Sort by the `inventory_management` value.
	ProductVariantSortKeysInventoryManagement ProductVariantSortKeys = "INVENTORY_MANAGEMENT"
	// Sort by the `inventory_levels.available` value.
	ProductVariantSortKeysInventoryLevelsAvailable ProductVariantSortKeys = "INVENTORY_LEVELS_AVAILABLE"
	// Sort by the `inventory_policy` value.
	ProductVariantSortKeysInventoryPolicy ProductVariantSortKeys = "INVENTORY_POLICY"
	// Sort by the `full_title` value.
	ProductVariantSortKeysFullTitle ProductVariantSortKeys = "FULL_TITLE"
	// Sort by the `popular` value.
	ProductVariantSortKeysPopular ProductVariantSortKeys = "POPULAR"
	// Sort by the `position` value.
	ProductVariantSortKeysPosition ProductVariantSortKeys = "POSITION"
	// Sort by the `id` value.
	ProductVariantSortKeysID ProductVariantSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	ProductVariantSortKeysRelevance ProductVariantSortKeys = "RELEVANCE"
)

var AllProductVariantSortKeys = []ProductVariantSortKeys{
	ProductVariantSortKeysTitle,
	ProductVariantSortKeysName,
	ProductVariantSortKeysSku,
	ProductVariantSortKeysInventoryQuantity,
	ProductVariantSortKeysInventoryManagement,
	ProductVariantSortKeysInventoryLevelsAvailable,
	ProductVariantSortKeysInventoryPolicy,
	ProductVariantSortKeysFullTitle,
	ProductVariantSortKeysPopular,
	ProductVariantSortKeysPosition,
	ProductVariantSortKeysID,
	ProductVariantSortKeysRelevance,
}

func (e ProductVariantSortKeys) IsValid() bool {
	switch e {
	case ProductVariantSortKeysTitle, ProductVariantSortKeysName, ProductVariantSortKeysSku, ProductVariantSortKeysInventoryQuantity, ProductVariantSortKeysInventoryManagement, ProductVariantSortKeysInventoryLevelsAvailable, ProductVariantSortKeysInventoryPolicy, ProductVariantSortKeysFullTitle, ProductVariantSortKeysPopular, ProductVariantSortKeysPosition, ProductVariantSortKeysID, ProductVariantSortKeysRelevance:
		return true
	}
	return false
}

func (e ProductVariantSortKeys) String() string {
	return string(e)
}

func (e *ProductVariantSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductVariantSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductVariantSortKeys", str)
	}
	return nil
}

func (e ProductVariantSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the ProfileItem query.
type ProfileItemSortKeys string

const (
	// Sort by the `title` value.
	ProfileItemSortKeysTitle ProfileItemSortKeys = "TITLE"
	// Sort by the `product_type` value.
	ProfileItemSortKeysProductType ProfileItemSortKeys = "PRODUCT_TYPE"
	// Sort by the `vendor` value.
	ProfileItemSortKeysVendor ProfileItemSortKeys = "VENDOR"
	// Sort by the `inventory_total` value.
	ProfileItemSortKeysInventoryTotal ProfileItemSortKeys = "INVENTORY_TOTAL"
	// Sort by the `updated_at` value.
	ProfileItemSortKeysUpdatedAt ProfileItemSortKeys = "UPDATED_AT"
	// Sort by the `created_at` value.
	ProfileItemSortKeysCreatedAt ProfileItemSortKeys = "CREATED_AT"
	// Sort by the `published_at` value.
	ProfileItemSortKeysPublishedAt ProfileItemSortKeys = "PUBLISHED_AT"
	// Sort by the `id` value.
	ProfileItemSortKeysID ProfileItemSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	ProfileItemSortKeysRelevance ProfileItemSortKeys = "RELEVANCE"
)

var AllProfileItemSortKeys = []ProfileItemSortKeys{
	ProfileItemSortKeysTitle,
	ProfileItemSortKeysProductType,
	ProfileItemSortKeysVendor,
	ProfileItemSortKeysInventoryTotal,
	ProfileItemSortKeysUpdatedAt,
	ProfileItemSortKeysCreatedAt,
	ProfileItemSortKeysPublishedAt,
	ProfileItemSortKeysID,
	ProfileItemSortKeysRelevance,
}

func (e ProfileItemSortKeys) IsValid() bool {
	switch e {
	case ProfileItemSortKeysTitle, ProfileItemSortKeysProductType, ProfileItemSortKeysVendor, ProfileItemSortKeysInventoryTotal, ProfileItemSortKeysUpdatedAt, ProfileItemSortKeysCreatedAt, ProfileItemSortKeysPublishedAt, ProfileItemSortKeysID, ProfileItemSortKeysRelevance:
		return true
	}
	return false
}

func (e ProfileItemSortKeys) String() string {
	return string(e)
}

func (e *ProfileItemSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProfileItemSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProfileItemSortKeys", str)
	}
	return nil
}

func (e ProfileItemSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of refund to perform for a particular refund duty.
type RefundDutyRefundType string

const (
	// The duty is proportionally refunded based on the quantity of the refunded line item.
	RefundDutyRefundTypeProportional RefundDutyRefundType = "PROPORTIONAL"
	// The duty is fully refunded.
	RefundDutyRefundTypeFull RefundDutyRefundType = "FULL"
)

var AllRefundDutyRefundType = []RefundDutyRefundType{
	RefundDutyRefundTypeProportional,
	RefundDutyRefundTypeFull,
}

func (e RefundDutyRefundType) IsValid() bool {
	switch e {
	case RefundDutyRefundTypeProportional, RefundDutyRefundTypeFull:
		return true
	}
	return false
}

func (e RefundDutyRefundType) String() string {
	return string(e)
}

func (e *RefundDutyRefundType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RefundDutyRefundType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RefundDutyRefundType", str)
	}
	return nil
}

func (e RefundDutyRefundType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of restock performed for a particular refund line item.
type RefundLineItemRestockType string

const (
	// Refund line item was returned.
	RefundLineItemRestockTypeReturn RefundLineItemRestockType = "RETURN"
	// Refund line item was canceled.
	RefundLineItemRestockTypeCancel RefundLineItemRestockType = "CANCEL"
	// Refund line item was restocked, without specifically being identified as a return or cancelation.
	RefundLineItemRestockTypeLegacyRestock RefundLineItemRestockType = "LEGACY_RESTOCK"
	// Refund line item was not restocked.
	RefundLineItemRestockTypeNoRestock RefundLineItemRestockType = "NO_RESTOCK"
)

var AllRefundLineItemRestockType = []RefundLineItemRestockType{
	RefundLineItemRestockTypeReturn,
	RefundLineItemRestockTypeCancel,
	RefundLineItemRestockTypeLegacyRestock,
	RefundLineItemRestockTypeNoRestock,
}

func (e RefundLineItemRestockType) IsValid() bool {
	switch e {
	case RefundLineItemRestockTypeReturn, RefundLineItemRestockTypeCancel, RefundLineItemRestockTypeLegacyRestock, RefundLineItemRestockTypeNoRestock:
		return true
	}
	return false
}

func (e RefundLineItemRestockType) String() string {
	return string(e)
}

func (e *RefundLineItemRestockType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RefundLineItemRestockType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RefundLineItemRestockType", str)
	}
	return nil
}

func (e RefundLineItemRestockType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The available icons for resource alerts.
type ResourceAlertIcon string

const (
	// A checkmark inside a circle.
	ResourceAlertIconCheckmarkCircle ResourceAlertIcon = "CHECKMARK_CIRCLE"
	// A lowercase `i` inside a circle.
	ResourceAlertIconInformationCircle ResourceAlertIcon = "INFORMATION_CIRCLE"
)

var AllResourceAlertIcon = []ResourceAlertIcon{
	ResourceAlertIconCheckmarkCircle,
	ResourceAlertIconInformationCircle,
}

func (e ResourceAlertIcon) IsValid() bool {
	switch e {
	case ResourceAlertIconCheckmarkCircle, ResourceAlertIconInformationCircle:
		return true
	}
	return false
}

func (e ResourceAlertIcon) String() string {
	return string(e)
}

func (e *ResourceAlertIcon) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResourceAlertIcon(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResourceAlertIcon", str)
	}
	return nil
}

func (e ResourceAlertIcon) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible severity levels for a resource alert.
type ResourceAlertSeverity string

const (
	// Indicates a neutral alert.
	ResourceAlertSeverityDefault ResourceAlertSeverity = "DEFAULT"
	// Indicates an informative alert.
	ResourceAlertSeverityInfo ResourceAlertSeverity = "INFO"
	// Indicates a warning alert.
	ResourceAlertSeverityWarning ResourceAlertSeverity = "WARNING"
	// Indicates a success alert.
	ResourceAlertSeveritySuccess ResourceAlertSeverity = "SUCCESS"
	// Indicates a critical alert.
	ResourceAlertSeverityCritical ResourceAlertSeverity = "CRITICAL"
	ResourceAlertSeverityError    ResourceAlertSeverity = "ERROR"
)

var AllResourceAlertSeverity = []ResourceAlertSeverity{
	ResourceAlertSeverityDefault,
	ResourceAlertSeverityInfo,
	ResourceAlertSeverityWarning,
	ResourceAlertSeveritySuccess,
	ResourceAlertSeverityCritical,
	ResourceAlertSeverityError,
}

func (e ResourceAlertSeverity) IsValid() bool {
	switch e {
	case ResourceAlertSeverityDefault, ResourceAlertSeverityInfo, ResourceAlertSeverityWarning, ResourceAlertSeveritySuccess, ResourceAlertSeverityCritical, ResourceAlertSeverityError:
		return true
	}
	return false
}

func (e ResourceAlertSeverity) String() string {
	return string(e)
}

func (e *ResourceAlertSeverity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResourceAlertSeverity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResourceAlertSeverity", str)
	}
	return nil
}

func (e ResourceAlertSeverity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The page or pages on the online store where the script should be included.
type ScriptTagDisplayScope string

const (
	// Include the script on both the web storefront and the order status page.
	ScriptTagDisplayScopeAll ScriptTagDisplayScope = "ALL"
	// Include the script only on the order status page.
	ScriptTagDisplayScopeOrderStatus ScriptTagDisplayScope = "ORDER_STATUS"
	// Include the script only on the web storefront.
	ScriptTagDisplayScopeOnlineStore ScriptTagDisplayScope = "ONLINE_STORE"
)

var AllScriptTagDisplayScope = []ScriptTagDisplayScope{
	ScriptTagDisplayScopeAll,
	ScriptTagDisplayScopeOrderStatus,
	ScriptTagDisplayScopeOnlineStore,
}

func (e ScriptTagDisplayScope) IsValid() bool {
	switch e {
	case ScriptTagDisplayScopeAll, ScriptTagDisplayScopeOrderStatus, ScriptTagDisplayScopeOnlineStore:
		return true
	}
	return false
}

func (e ScriptTagDisplayScope) String() string {
	return string(e)
}

func (e *ScriptTagDisplayScope) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScriptTagDisplayScope(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ScriptTagDisplayScope", str)
	}
	return nil
}

func (e ScriptTagDisplayScope) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the type of resources to be returned from a search.
type SearchResultType string

const (
	SearchResultTypeOrder              SearchResultType = "ORDER"
	SearchResultTypeCustomer           SearchResultType = "CUSTOMER"
	SearchResultTypeProduct            SearchResultType = "PRODUCT"
	SearchResultTypeOnlineStorePage    SearchResultType = "ONLINE_STORE_PAGE"
	SearchResultTypeOnlineStoreBlog    SearchResultType = "ONLINE_STORE_BLOG"
	SearchResultTypeOnlineStoreArticle SearchResultType = "ONLINE_STORE_ARTICLE"
	SearchResultTypeCollection         SearchResultType = "COLLECTION"
	SearchResultTypeDraftOrder         SearchResultType = "DRAFT_ORDER"
	SearchResultTypePriceRule          SearchResultType = "PRICE_RULE"
	// A code discount redeem code.
	SearchResultTypeDiscountRedeemCode SearchResultType = "DISCOUNT_REDEEM_CODE"
)

var AllSearchResultType = []SearchResultType{
	SearchResultTypeOrder,
	SearchResultTypeCustomer,
	SearchResultTypeProduct,
	SearchResultTypeOnlineStorePage,
	SearchResultTypeOnlineStoreBlog,
	SearchResultTypeOnlineStoreArticle,
	SearchResultTypeCollection,
	SearchResultTypeDraftOrder,
	SearchResultTypePriceRule,
	SearchResultTypeDiscountRedeemCode,
}

func (e SearchResultType) IsValid() bool {
	switch e {
	case SearchResultTypeOrder, SearchResultTypeCustomer, SearchResultTypeProduct, SearchResultTypeOnlineStorePage, SearchResultTypeOnlineStoreBlog, SearchResultTypeOnlineStoreArticle, SearchResultTypeCollection, SearchResultTypeDraftOrder, SearchResultTypePriceRule, SearchResultTypeDiscountRedeemCode:
		return true
	}
	return false
}

func (e SearchResultType) String() string {
	return string(e)
}

func (e *SearchResultType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchResultType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchResultType", str)
	}
	return nil
}

func (e SearchResultType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the anchor type.
type SellingPlanAnchorType string

const (
	// Which day of the week, between 1-7.
	SellingPlanAnchorTypeWeekday SellingPlanAnchorType = "WEEKDAY"
	// Which day of the month, between 1-31.
	SellingPlanAnchorTypeMonthday SellingPlanAnchorType = "MONTHDAY"
	// Which days of the month and year, month between 1-12, and day between 1-31.
	SellingPlanAnchorTypeYearday SellingPlanAnchorType = "YEARDAY"
)

var AllSellingPlanAnchorType = []SellingPlanAnchorType{
	SellingPlanAnchorTypeWeekday,
	SellingPlanAnchorTypeMonthday,
	SellingPlanAnchorTypeYearday,
}

func (e SellingPlanAnchorType) IsValid() bool {
	switch e {
	case SellingPlanAnchorTypeWeekday, SellingPlanAnchorTypeMonthday, SellingPlanAnchorTypeYearday:
		return true
	}
	return false
}

func (e SellingPlanAnchorType) String() string {
	return string(e)
}

func (e *SellingPlanAnchorType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanAnchorType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanAnchorType", str)
	}
	return nil
}

func (e SellingPlanAnchorType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the SellingPlanGroup query.
type SellingPlanGroupSortKeys string

const (
	// Sort by the `name` value.
	SellingPlanGroupSortKeysName SellingPlanGroupSortKeys = "NAME"
	// Sort by the `updated_at` value.
	SellingPlanGroupSortKeysUpdatedAt SellingPlanGroupSortKeys = "UPDATED_AT"
	// Sort by the `created_at` value.
	SellingPlanGroupSortKeysCreatedAt SellingPlanGroupSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	SellingPlanGroupSortKeysID SellingPlanGroupSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	SellingPlanGroupSortKeysRelevance SellingPlanGroupSortKeys = "RELEVANCE"
)

var AllSellingPlanGroupSortKeys = []SellingPlanGroupSortKeys{
	SellingPlanGroupSortKeysName,
	SellingPlanGroupSortKeysUpdatedAt,
	SellingPlanGroupSortKeysCreatedAt,
	SellingPlanGroupSortKeysID,
	SellingPlanGroupSortKeysRelevance,
}

func (e SellingPlanGroupSortKeys) IsValid() bool {
	switch e {
	case SellingPlanGroupSortKeysName, SellingPlanGroupSortKeysUpdatedAt, SellingPlanGroupSortKeysCreatedAt, SellingPlanGroupSortKeysID, SellingPlanGroupSortKeysRelevance:
		return true
	}
	return false
}

func (e SellingPlanGroupSortKeys) String() string {
	return string(e)
}

func (e *SellingPlanGroupSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanGroupSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanGroupSortKeys", str)
	}
	return nil
}

func (e SellingPlanGroupSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that could be returned by SellingPlanGroupUserError.
type SellingPlanGroupUserErrorCode string

const (
	// Input value is not present.
	SellingPlanGroupUserErrorCodePresent SellingPlanGroupUserErrorCode = "PRESENT"
	// Input value is blank.
	SellingPlanGroupUserErrorCodeBlank SellingPlanGroupUserErrorCode = "BLANK"
	// Input value is invalid.
	SellingPlanGroupUserErrorCodeInvalid SellingPlanGroupUserErrorCode = "INVALID"
	// Input value should be greater than minimum allowed value.
	SellingPlanGroupUserErrorCodeGreaterThan SellingPlanGroupUserErrorCode = "GREATER_THAN"
	// Input value should be greater than or equal to minimum allowed value.
	SellingPlanGroupUserErrorCodeGreaterThanOrEqualTo SellingPlanGroupUserErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// Input value should be less than maximum allowed value.
	SellingPlanGroupUserErrorCodeLessThan SellingPlanGroupUserErrorCode = "LESS_THAN"
	// Input value should be less or equal to maximum allowed value.
	SellingPlanGroupUserErrorCodeLessThanOrEqualTo SellingPlanGroupUserErrorCode = "LESS_THAN_OR_EQUAL_TO"
	// Input value is not a number.
	SellingPlanGroupUserErrorCodeNotANumber SellingPlanGroupUserErrorCode = "NOT_A_NUMBER"
	// Input value is too long.
	SellingPlanGroupUserErrorCodeTooLong SellingPlanGroupUserErrorCode = "TOO_LONG"
	// Input value is too short.
	SellingPlanGroupUserErrorCodeTooShort SellingPlanGroupUserErrorCode = "TOO_SHORT"
	// Input value is already taken.
	SellingPlanGroupUserErrorCodeTaken SellingPlanGroupUserErrorCode = "TAKEN"
	// Exceeded the selling plan limit (20).
	SellingPlanGroupUserErrorCodeSellingPlanCountUpperBound SellingPlanGroupUserErrorCode = "SELLING_PLAN_COUNT_UPPER_BOUND"
	// Must include at least one selling plan.
	SellingPlanGroupUserErrorCodeSellingPlanCountLowerBound SellingPlanGroupUserErrorCode = "SELLING_PLAN_COUNT_LOWER_BOUND"
	// Selling plan's billing policy max cycles must be greater than min cycles.
	SellingPlanGroupUserErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles SellingPlanGroupUserErrorCode = "SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES"
	// Selling plan's billing and delivery policies anchors must be equal.
	SellingPlanGroupUserErrorCodeSellingPlanBillingAndDeliveryPolicyAnchorsMustBeEqual SellingPlanGroupUserErrorCode = "SELLING_PLAN_BILLING_AND_DELIVERY_POLICY_ANCHORS_MUST_BE_EQUAL"
	// Selling plan's billing cycle must be a multiple of delivery cycle.
	SellingPlanGroupUserErrorCodeSellingPlanBillingCycleMustBeAMultipleOfDeliveryCycle SellingPlanGroupUserErrorCode = "SELLING_PLAN_BILLING_CYCLE_MUST_BE_A_MULTIPLE_OF_DELIVERY_CYCLE"
	// Selling plan's pricing policies must contain one fixed pricing policy.
	SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesMustContainAFixedPricingPolicy SellingPlanGroupUserErrorCode = "SELLING_PLAN_PRICING_POLICIES_MUST_CONTAIN_A_FIXED_PRICING_POLICY"
	// Cannot define option2 on this selling plan as there's no label on the parent selling plan group.
	SellingPlanGroupUserErrorCodeSellingPlanMissingOption2LabelOnParentGroup SellingPlanGroupUserErrorCode = "SELLING_PLAN_MISSING_OPTION2_LABEL_ON_PARENT_GROUP"
	// Cannot define option3 on this selling plan as there's no label on the parent selling plan group.
	SellingPlanGroupUserErrorCodeSellingPlanMissingOption3LabelOnParentGroup SellingPlanGroupUserErrorCode = "SELLING_PLAN_MISSING_OPTION3_LABEL_ON_PARENT_GROUP"
	// Selling plan's option2 is required because option2 exists.
	SellingPlanGroupUserErrorCodeSellingPlanOption2RequiredAsDefinedOnParentGroup SellingPlanGroupUserErrorCode = "SELLING_PLAN_OPTION2_REQUIRED_AS_DEFINED_ON_PARENT_GROUP"
	// Selling plan's option3 is required because option3 exists.
	SellingPlanGroupUserErrorCodeSellingPlanOption3RequiredAsDefinedOnParentGroup SellingPlanGroupUserErrorCode = "SELLING_PLAN_OPTION3_REQUIRED_AS_DEFINED_ON_PARENT_GROUP"
	// Selling plans can't have more than 2 pricing policies.
	SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesLimit SellingPlanGroupUserErrorCode = "SELLING_PLAN_PRICING_POLICIES_LIMIT"
	// Product variant does not exist.
	SellingPlanGroupUserErrorCodeProductVariantDoesNotExist SellingPlanGroupUserErrorCode = "PRODUCT_VARIANT_DOES_NOT_EXIST"
	// Product does not exist.
	SellingPlanGroupUserErrorCodeProductDoesNotExist SellingPlanGroupUserErrorCode = "PRODUCT_DOES_NOT_EXIST"
	// Selling plan group does not exist.
	SellingPlanGroupUserErrorCodeGroupDoesNotExist SellingPlanGroupUserErrorCode = "GROUP_DOES_NOT_EXIST"
	// Selling plan group could not be deleted.
	SellingPlanGroupUserErrorCodeGroupCouldNotBeDeleted SellingPlanGroupUserErrorCode = "GROUP_COULD_NOT_BE_DELETED"
	// Could not add the resource to the selling plan group.
	SellingPlanGroupUserErrorCodeErrorAddingResourceToGroup SellingPlanGroupUserErrorCode = "ERROR_ADDING_RESOURCE_TO_GROUP"
	// Missing delivery policy.
	SellingPlanGroupUserErrorCodeSellingPlanDeliveryPolicyMissing SellingPlanGroupUserErrorCode = "SELLING_PLAN_DELIVERY_POLICY_MISSING"
	// Missing billing policy.
	SellingPlanGroupUserErrorCodeSellingPlanBillingPolicyMissing SellingPlanGroupUserErrorCode = "SELLING_PLAN_BILLING_POLICY_MISSING"
	// Selling plan does not exist.
	SellingPlanGroupUserErrorCodePlanDoesNotExist SellingPlanGroupUserErrorCode = "PLAN_DOES_NOT_EXIST"
	// Selling plan ID must be specified to update.
	SellingPlanGroupUserErrorCodePlanIDMustBeSpecifiedToUpdate SellingPlanGroupUserErrorCode = "PLAN_ID_MUST_BE_SPECIFIED_TO_UPDATE"
	// Only one pricing policy type can be defined.
	SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyType SellingPlanGroupUserErrorCode = "ONLY_NEED_ONE_PRICING_POLICY_TYPE"
	// Only one pricing policy adjustment value type can be defined.
	SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyValue SellingPlanGroupUserErrorCode = "ONLY_NEED_ONE_PRICING_POLICY_VALUE"
	// Pricing policy's adjustment value and adjustment type must match.
	SellingPlanGroupUserErrorCodePricingPolicyAdjustmentValueAndTypeMustMatch SellingPlanGroupUserErrorCode = "PRICING_POLICY_ADJUSTMENT_VALUE_AND_TYPE_MUST_MATCH"
	// Cannot have multiple selling plans with the same name.
	SellingPlanGroupUserErrorCodeSellingPlanDuplicateName SellingPlanGroupUserErrorCode = "SELLING_PLAN_DUPLICATE_NAME"
	// Cannot have multiple selling plans with the same options.
	SellingPlanGroupUserErrorCodeSellingPlanDuplicateOptions SellingPlanGroupUserErrorCode = "SELLING_PLAN_DUPLICATE_OPTIONS"
)

var AllSellingPlanGroupUserErrorCode = []SellingPlanGroupUserErrorCode{
	SellingPlanGroupUserErrorCodePresent,
	SellingPlanGroupUserErrorCodeBlank,
	SellingPlanGroupUserErrorCodeInvalid,
	SellingPlanGroupUserErrorCodeGreaterThan,
	SellingPlanGroupUserErrorCodeGreaterThanOrEqualTo,
	SellingPlanGroupUserErrorCodeLessThan,
	SellingPlanGroupUserErrorCodeLessThanOrEqualTo,
	SellingPlanGroupUserErrorCodeNotANumber,
	SellingPlanGroupUserErrorCodeTooLong,
	SellingPlanGroupUserErrorCodeTooShort,
	SellingPlanGroupUserErrorCodeTaken,
	SellingPlanGroupUserErrorCodeSellingPlanCountUpperBound,
	SellingPlanGroupUserErrorCodeSellingPlanCountLowerBound,
	SellingPlanGroupUserErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles,
	SellingPlanGroupUserErrorCodeSellingPlanBillingAndDeliveryPolicyAnchorsMustBeEqual,
	SellingPlanGroupUserErrorCodeSellingPlanBillingCycleMustBeAMultipleOfDeliveryCycle,
	SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesMustContainAFixedPricingPolicy,
	SellingPlanGroupUserErrorCodeSellingPlanMissingOption2LabelOnParentGroup,
	SellingPlanGroupUserErrorCodeSellingPlanMissingOption3LabelOnParentGroup,
	SellingPlanGroupUserErrorCodeSellingPlanOption2RequiredAsDefinedOnParentGroup,
	SellingPlanGroupUserErrorCodeSellingPlanOption3RequiredAsDefinedOnParentGroup,
	SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesLimit,
	SellingPlanGroupUserErrorCodeProductVariantDoesNotExist,
	SellingPlanGroupUserErrorCodeProductDoesNotExist,
	SellingPlanGroupUserErrorCodeGroupDoesNotExist,
	SellingPlanGroupUserErrorCodeGroupCouldNotBeDeleted,
	SellingPlanGroupUserErrorCodeErrorAddingResourceToGroup,
	SellingPlanGroupUserErrorCodeSellingPlanDeliveryPolicyMissing,
	SellingPlanGroupUserErrorCodeSellingPlanBillingPolicyMissing,
	SellingPlanGroupUserErrorCodePlanDoesNotExist,
	SellingPlanGroupUserErrorCodePlanIDMustBeSpecifiedToUpdate,
	SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyType,
	SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyValue,
	SellingPlanGroupUserErrorCodePricingPolicyAdjustmentValueAndTypeMustMatch,
	SellingPlanGroupUserErrorCodeSellingPlanDuplicateName,
	SellingPlanGroupUserErrorCodeSellingPlanDuplicateOptions,
}

func (e SellingPlanGroupUserErrorCode) IsValid() bool {
	switch e {
	case SellingPlanGroupUserErrorCodePresent, SellingPlanGroupUserErrorCodeBlank, SellingPlanGroupUserErrorCodeInvalid, SellingPlanGroupUserErrorCodeGreaterThan, SellingPlanGroupUserErrorCodeGreaterThanOrEqualTo, SellingPlanGroupUserErrorCodeLessThan, SellingPlanGroupUserErrorCodeLessThanOrEqualTo, SellingPlanGroupUserErrorCodeNotANumber, SellingPlanGroupUserErrorCodeTooLong, SellingPlanGroupUserErrorCodeTooShort, SellingPlanGroupUserErrorCodeTaken, SellingPlanGroupUserErrorCodeSellingPlanCountUpperBound, SellingPlanGroupUserErrorCodeSellingPlanCountLowerBound, SellingPlanGroupUserErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles, SellingPlanGroupUserErrorCodeSellingPlanBillingAndDeliveryPolicyAnchorsMustBeEqual, SellingPlanGroupUserErrorCodeSellingPlanBillingCycleMustBeAMultipleOfDeliveryCycle, SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesMustContainAFixedPricingPolicy, SellingPlanGroupUserErrorCodeSellingPlanMissingOption2LabelOnParentGroup, SellingPlanGroupUserErrorCodeSellingPlanMissingOption3LabelOnParentGroup, SellingPlanGroupUserErrorCodeSellingPlanOption2RequiredAsDefinedOnParentGroup, SellingPlanGroupUserErrorCodeSellingPlanOption3RequiredAsDefinedOnParentGroup, SellingPlanGroupUserErrorCodeSellingPlanPricingPoliciesLimit, SellingPlanGroupUserErrorCodeProductVariantDoesNotExist, SellingPlanGroupUserErrorCodeProductDoesNotExist, SellingPlanGroupUserErrorCodeGroupDoesNotExist, SellingPlanGroupUserErrorCodeGroupCouldNotBeDeleted, SellingPlanGroupUserErrorCodeErrorAddingResourceToGroup, SellingPlanGroupUserErrorCodeSellingPlanDeliveryPolicyMissing, SellingPlanGroupUserErrorCodeSellingPlanBillingPolicyMissing, SellingPlanGroupUserErrorCodePlanDoesNotExist, SellingPlanGroupUserErrorCodePlanIDMustBeSpecifiedToUpdate, SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyType, SellingPlanGroupUserErrorCodeOnlyNeedOnePricingPolicyValue, SellingPlanGroupUserErrorCodePricingPolicyAdjustmentValueAndTypeMustMatch, SellingPlanGroupUserErrorCodeSellingPlanDuplicateName, SellingPlanGroupUserErrorCodeSellingPlanDuplicateOptions:
		return true
	}
	return false
}

func (e SellingPlanGroupUserErrorCode) String() string {
	return string(e)
}

func (e *SellingPlanGroupUserErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanGroupUserErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanGroupUserErrorCode", str)
	}
	return nil
}

func (e SellingPlanGroupUserErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents valid selling plan interval.
type SellingPlanInterval string

const (
	// Day interval.
	SellingPlanIntervalDay SellingPlanInterval = "DAY"
	// Week interval.
	SellingPlanIntervalWeek SellingPlanInterval = "WEEK"
	// Month interval.
	SellingPlanIntervalMonth SellingPlanInterval = "MONTH"
	// Year interval.
	SellingPlanIntervalYear SellingPlanInterval = "YEAR"
)

var AllSellingPlanInterval = []SellingPlanInterval{
	SellingPlanIntervalDay,
	SellingPlanIntervalWeek,
	SellingPlanIntervalMonth,
	SellingPlanIntervalYear,
}

func (e SellingPlanInterval) IsValid() bool {
	switch e {
	case SellingPlanIntervalDay, SellingPlanIntervalWeek, SellingPlanIntervalMonth, SellingPlanIntervalYear:
		return true
	}
	return false
}

func (e SellingPlanInterval) String() string {
	return string(e)
}

func (e *SellingPlanInterval) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanInterval(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanInterval", str)
	}
	return nil
}

func (e SellingPlanInterval) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents a selling plan pricing policy adjustment type.
type SellingPlanPricingPolicyAdjustmentType string

const (
	// Percentage off adjustment.
	SellingPlanPricingPolicyAdjustmentTypePercentage SellingPlanPricingPolicyAdjustmentType = "PERCENTAGE"
	// Fixed amount off adjustment.
	SellingPlanPricingPolicyAdjustmentTypeFixedAmount SellingPlanPricingPolicyAdjustmentType = "FIXED_AMOUNT"
	// Price of the policy.
	SellingPlanPricingPolicyAdjustmentTypePrice SellingPlanPricingPolicyAdjustmentType = "PRICE"
)

var AllSellingPlanPricingPolicyAdjustmentType = []SellingPlanPricingPolicyAdjustmentType{
	SellingPlanPricingPolicyAdjustmentTypePercentage,
	SellingPlanPricingPolicyAdjustmentTypeFixedAmount,
	SellingPlanPricingPolicyAdjustmentTypePrice,
}

func (e SellingPlanPricingPolicyAdjustmentType) IsValid() bool {
	switch e {
	case SellingPlanPricingPolicyAdjustmentTypePercentage, SellingPlanPricingPolicyAdjustmentTypeFixedAmount, SellingPlanPricingPolicyAdjustmentTypePrice:
		return true
	}
	return false
}

func (e SellingPlanPricingPolicyAdjustmentType) String() string {
	return string(e)
}

func (e *SellingPlanPricingPolicyAdjustmentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanPricingPolicyAdjustmentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanPricingPolicyAdjustmentType", str)
	}
	return nil
}

func (e SellingPlanPricingPolicyAdjustmentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible intentions of a Delivery Policy.
type SellingPlanRecurringDeliveryPolicyIntent string

const (
	// A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment.
	SellingPlanRecurringDeliveryPolicyIntentFulfillmentBegin SellingPlanRecurringDeliveryPolicyIntent = "FULFILLMENT_BEGIN"
)

var AllSellingPlanRecurringDeliveryPolicyIntent = []SellingPlanRecurringDeliveryPolicyIntent{
	SellingPlanRecurringDeliveryPolicyIntentFulfillmentBegin,
}

func (e SellingPlanRecurringDeliveryPolicyIntent) IsValid() bool {
	switch e {
	case SellingPlanRecurringDeliveryPolicyIntentFulfillmentBegin:
		return true
	}
	return false
}

func (e SellingPlanRecurringDeliveryPolicyIntent) String() string {
	return string(e)
}

func (e *SellingPlanRecurringDeliveryPolicyIntent) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanRecurringDeliveryPolicyIntent(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanRecurringDeliveryPolicyIntent", str)
	}
	return nil
}

func (e SellingPlanRecurringDeliveryPolicyIntent) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible fulfillment or delivery behaviors of the first fulfillment when the orderis placed before the anchor.
type SellingPlanRecurringDeliveryPolicyPreAnchorBehavior string

const (
	// Orders placed can be fulfilled / delivered immediately. Orders placed inside a cutoff can be fulfilled / delivered at the next anchor.
	SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorAsap SellingPlanRecurringDeliveryPolicyPreAnchorBehavior = "ASAP"
	// Orders placed can be fulfilled / delivered at the next anchor date. Ordersplaced inside a cutoff will skip the next anchor and can be fulfilled / delivered at the following anchor.
	SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorNext SellingPlanRecurringDeliveryPolicyPreAnchorBehavior = "NEXT"
)

var AllSellingPlanRecurringDeliveryPolicyPreAnchorBehavior = []SellingPlanRecurringDeliveryPolicyPreAnchorBehavior{
	SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorAsap,
	SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorNext,
}

func (e SellingPlanRecurringDeliveryPolicyPreAnchorBehavior) IsValid() bool {
	switch e {
	case SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorAsap, SellingPlanRecurringDeliveryPolicyPreAnchorBehaviorNext:
		return true
	}
	return false
}

func (e SellingPlanRecurringDeliveryPolicyPreAnchorBehavior) String() string {
	return string(e)
}

func (e *SellingPlanRecurringDeliveryPolicyPreAnchorBehavior) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingPlanRecurringDeliveryPolicyPreAnchorBehavior(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingPlanRecurringDeliveryPolicyPreAnchorBehavior", str)
	}
	return nil
}

func (e SellingPlanRecurringDeliveryPolicyPreAnchorBehavior) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible branding of a shop.
// Branding can be used to define the look of a shop including its styling and logo in the Shopify Admin.
type ShopBranding string

const (
	// Shop has Shopify Gold branding.
	ShopBrandingShopifyGold ShopBranding = "SHOPIFY_GOLD"
	// Shop has Shopify Plus branding.
	ShopBrandingShopifyPlus ShopBranding = "SHOPIFY_PLUS"
	// Shop has Rogers branding.
	ShopBrandingRogers ShopBranding = "ROGERS"
	// Shop has Shopify branding.
	ShopBrandingShopify ShopBranding = "SHOPIFY"
)

var AllShopBranding = []ShopBranding{
	ShopBrandingShopifyGold,
	ShopBrandingShopifyPlus,
	ShopBrandingRogers,
	ShopBrandingShopify,
}

func (e ShopBranding) IsValid() bool {
	switch e {
	case ShopBrandingShopifyGold, ShopBrandingShopifyPlus, ShopBrandingRogers, ShopBrandingShopify:
		return true
	}
	return false
}

func (e ShopBranding) String() string {
	return string(e)
}

func (e *ShopBranding) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopBranding(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopBranding", str)
	}
	return nil
}

func (e ShopBranding) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the shop's customer account requirement preference.
type ShopCustomerAccountsSetting string

const (
	ShopCustomerAccountsSettingRequired ShopCustomerAccountsSetting = "REQUIRED"
	ShopCustomerAccountsSettingOptional ShopCustomerAccountsSetting = "OPTIONAL"
	ShopCustomerAccountsSettingDisabled ShopCustomerAccountsSetting = "DISABLED"
)

var AllShopCustomerAccountsSetting = []ShopCustomerAccountsSetting{
	ShopCustomerAccountsSettingRequired,
	ShopCustomerAccountsSettingOptional,
	ShopCustomerAccountsSettingDisabled,
}

func (e ShopCustomerAccountsSetting) IsValid() bool {
	switch e {
	case ShopCustomerAccountsSettingRequired, ShopCustomerAccountsSettingOptional, ShopCustomerAccountsSettingDisabled:
		return true
	}
	return false
}

func (e ShopCustomerAccountsSetting) String() string {
	return string(e)
}

func (e *ShopCustomerAccountsSetting) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopCustomerAccountsSetting(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopCustomerAccountsSetting", str)
	}
	return nil
}

func (e ShopCustomerAccountsSetting) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the ShopImage query.
type ShopImageSortKeys string

const (
	// Sort by the `created_at` value.
	ShopImageSortKeysCreatedAt ShopImageSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	ShopImageSortKeysID ShopImageSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	ShopImageSortKeysRelevance ShopImageSortKeys = "RELEVANCE"
)

var AllShopImageSortKeys = []ShopImageSortKeys{
	ShopImageSortKeysCreatedAt,
	ShopImageSortKeysID,
	ShopImageSortKeysRelevance,
}

func (e ShopImageSortKeys) IsValid() bool {
	switch e {
	case ShopImageSortKeysCreatedAt, ShopImageSortKeysID, ShopImageSortKeysRelevance:
		return true
	}
	return false
}

func (e ShopImageSortKeys) String() string {
	return string(e)
}

func (e *ShopImageSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopImageSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopImageSortKeys", str)
	}
	return nil
}

func (e ShopImageSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that could be returned by ShopPolicyUserError.
type ShopPolicyErrorCode string

const (
	// Input value is too big.
	ShopPolicyErrorCodeTooBig ShopPolicyErrorCode = "TOO_BIG"
)

var AllShopPolicyErrorCode = []ShopPolicyErrorCode{
	ShopPolicyErrorCodeTooBig,
}

func (e ShopPolicyErrorCode) IsValid() bool {
	switch e {
	case ShopPolicyErrorCodeTooBig:
		return true
	}
	return false
}

func (e ShopPolicyErrorCode) String() string {
	return string(e)
}

func (e *ShopPolicyErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopPolicyErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopPolicyErrorCode", str)
	}
	return nil
}

func (e ShopPolicyErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Available shop policy types.
type ShopPolicyType string

const (
	// The Refund policy.
	ShopPolicyTypeRefundPolicy ShopPolicyType = "REFUND_POLICY"
	// The Shipping policy.
	ShopPolicyTypeShippingPolicy ShopPolicyType = "SHIPPING_POLICY"
	// The Privacy policy.
	ShopPolicyTypePrivacyPolicy ShopPolicyType = "PRIVACY_POLICY"
	// The Terms of service.
	ShopPolicyTypeTermsOfService ShopPolicyType = "TERMS_OF_SERVICE"
	// The Terms of sale.
	ShopPolicyTypeTermsOfSale ShopPolicyType = "TERMS_OF_SALE"
	// The Legal notice.
	ShopPolicyTypeLegalNotice ShopPolicyType = "LEGAL_NOTICE"
)

var AllShopPolicyType = []ShopPolicyType{
	ShopPolicyTypeRefundPolicy,
	ShopPolicyTypeShippingPolicy,
	ShopPolicyTypePrivacyPolicy,
	ShopPolicyTypeTermsOfService,
	ShopPolicyTypeTermsOfSale,
	ShopPolicyTypeLegalNotice,
}

func (e ShopPolicyType) IsValid() bool {
	switch e {
	case ShopPolicyTypeRefundPolicy, ShopPolicyTypeShippingPolicy, ShopPolicyTypePrivacyPolicy, ShopPolicyTypeTermsOfService, ShopPolicyTypeTermsOfSale, ShopPolicyTypeLegalNotice:
		return true
	}
	return false
}

func (e ShopPolicyType) String() string {
	return string(e)
}

func (e *ShopPolicyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopPolicyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopPolicyType", str)
	}
	return nil
}

func (e ShopPolicyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible sort of tags.
type ShopTagSort string

const (
	// Alphabetical sort.
	ShopTagSortAlphabetical ShopTagSort = "ALPHABETICAL"
	// Popularity sort.
	ShopTagSortPopular ShopTagSort = "POPULAR"
)

var AllShopTagSort = []ShopTagSort{
	ShopTagSortAlphabetical,
	ShopTagSortPopular,
}

func (e ShopTagSort) IsValid() bool {
	switch e {
	case ShopTagSortAlphabetical, ShopTagSortPopular:
		return true
	}
	return false
}

func (e ShopTagSort) String() string {
	return string(e)
}

func (e *ShopTagSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopTagSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopTagSort", str)
	}
	return nil
}

func (e ShopTagSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The bank account status.
type ShopifyPaymentsBankAccountStatus string

const (
	// A bank account that hasn't had any activity and that's not validated.
	ShopifyPaymentsBankAccountStatusNew ShopifyPaymentsBankAccountStatus = "NEW"
	// It was determined that the bank account exists.
	ShopifyPaymentsBankAccountStatusValidated ShopifyPaymentsBankAccountStatus = "VALIDATED"
	// Bank account validation was successful.
	ShopifyPaymentsBankAccountStatusVerified ShopifyPaymentsBankAccountStatus = "VERIFIED"
	// A payout to the bank account failed.
	ShopifyPaymentsBankAccountStatusErrored ShopifyPaymentsBankAccountStatus = "ERRORED"
)

var AllShopifyPaymentsBankAccountStatus = []ShopifyPaymentsBankAccountStatus{
	ShopifyPaymentsBankAccountStatusNew,
	ShopifyPaymentsBankAccountStatusValidated,
	ShopifyPaymentsBankAccountStatusVerified,
	ShopifyPaymentsBankAccountStatusErrored,
}

func (e ShopifyPaymentsBankAccountStatus) IsValid() bool {
	switch e {
	case ShopifyPaymentsBankAccountStatusNew, ShopifyPaymentsBankAccountStatusValidated, ShopifyPaymentsBankAccountStatusVerified, ShopifyPaymentsBankAccountStatusErrored:
		return true
	}
	return false
}

func (e ShopifyPaymentsBankAccountStatus) String() string {
	return string(e)
}

func (e *ShopifyPaymentsBankAccountStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsBankAccountStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsBankAccountStatus", str)
	}
	return nil
}

func (e ShopifyPaymentsBankAccountStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reason for the dispute provided by the cardholder's bank.
type ShopifyPaymentsDisputeReason string

const (
	// The cardholder claims that they didn’t authorize the payment.
	ShopifyPaymentsDisputeReasonFraudulent ShopifyPaymentsDisputeReason = "FRAUDULENT"
	// The dispute is uncategorized, so you should contact the customer for additional details to find out why the payment was disputed.
	ShopifyPaymentsDisputeReasonGeneral ShopifyPaymentsDisputeReason = "GENERAL"
	// The customer doesn’t recognize the payment appearing on their card statement.
	ShopifyPaymentsDisputeReasonUnrecognized ShopifyPaymentsDisputeReason = "UNRECOGNIZED"
	// The customer claims they were charged multiple times for the same product or service.
	ShopifyPaymentsDisputeReasonDuplicate ShopifyPaymentsDisputeReason = "DUPLICATE"
	// The customer claims that you continued to charge them after a subscription was canceled.
	ShopifyPaymentsDisputeReasonSubscriptionCancelled ShopifyPaymentsDisputeReason = "SUBSCRIPTION_CANCELLED"
	// The product or service was received but was defective, damaged, or not as described.
	ShopifyPaymentsDisputeReasonProductUnacceptable ShopifyPaymentsDisputeReason = "PRODUCT_UNACCEPTABLE"
	// The customer claims they did not receive the products or services purchased.
	ShopifyPaymentsDisputeReasonProductNotReceived ShopifyPaymentsDisputeReason = "PRODUCT_NOT_RECEIVED"
	// The customer claims that the purchased product was returned or the transaction was otherwise canceled, but you have not yet provided a refund or credit.
	ShopifyPaymentsDisputeReasonCreditNotProcessed ShopifyPaymentsDisputeReason = "CREDIT_NOT_PROCESSED"
	// The customer account associated with the purchase is incorrect.
	ShopifyPaymentsDisputeReasonIncorrectAccountDetails ShopifyPaymentsDisputeReason = "INCORRECT_ACCOUNT_DETAILS"
	// The customer's bank account has insufficient funds.
	ShopifyPaymentsDisputeReasonInsufficientFunds ShopifyPaymentsDisputeReason = "INSUFFICIENT_FUNDS"
	// The customer's bank cannot process the charge.
	ShopifyPaymentsDisputeReasonBankCannotProcess ShopifyPaymentsDisputeReason = "BANK_CANNOT_PROCESS"
	// The customer's bank cannot proceed with the debit since it has not been authorized.
	ShopifyPaymentsDisputeReasonDebitNotAuthorized ShopifyPaymentsDisputeReason = "DEBIT_NOT_AUTHORIZED"
	// The customer initiated the dispute, so you should contact the customer for additional details to find out why the payment was disputed.
	ShopifyPaymentsDisputeReasonCustomerInitiated ShopifyPaymentsDisputeReason = "CUSTOMER_INITIATED"
)

var AllShopifyPaymentsDisputeReason = []ShopifyPaymentsDisputeReason{
	ShopifyPaymentsDisputeReasonFraudulent,
	ShopifyPaymentsDisputeReasonGeneral,
	ShopifyPaymentsDisputeReasonUnrecognized,
	ShopifyPaymentsDisputeReasonDuplicate,
	ShopifyPaymentsDisputeReasonSubscriptionCancelled,
	ShopifyPaymentsDisputeReasonProductUnacceptable,
	ShopifyPaymentsDisputeReasonProductNotReceived,
	ShopifyPaymentsDisputeReasonCreditNotProcessed,
	ShopifyPaymentsDisputeReasonIncorrectAccountDetails,
	ShopifyPaymentsDisputeReasonInsufficientFunds,
	ShopifyPaymentsDisputeReasonBankCannotProcess,
	ShopifyPaymentsDisputeReasonDebitNotAuthorized,
	ShopifyPaymentsDisputeReasonCustomerInitiated,
}

func (e ShopifyPaymentsDisputeReason) IsValid() bool {
	switch e {
	case ShopifyPaymentsDisputeReasonFraudulent, ShopifyPaymentsDisputeReasonGeneral, ShopifyPaymentsDisputeReasonUnrecognized, ShopifyPaymentsDisputeReasonDuplicate, ShopifyPaymentsDisputeReasonSubscriptionCancelled, ShopifyPaymentsDisputeReasonProductUnacceptable, ShopifyPaymentsDisputeReasonProductNotReceived, ShopifyPaymentsDisputeReasonCreditNotProcessed, ShopifyPaymentsDisputeReasonIncorrectAccountDetails, ShopifyPaymentsDisputeReasonInsufficientFunds, ShopifyPaymentsDisputeReasonBankCannotProcess, ShopifyPaymentsDisputeReasonDebitNotAuthorized, ShopifyPaymentsDisputeReasonCustomerInitiated:
		return true
	}
	return false
}

func (e ShopifyPaymentsDisputeReason) String() string {
	return string(e)
}

func (e *ShopifyPaymentsDisputeReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsDisputeReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsDisputeReason", str)
	}
	return nil
}

func (e ShopifyPaymentsDisputeReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The interval at which payouts are sent to the connected bank account.
type ShopifyPaymentsPayoutInterval string

const (
	// Each business day.
	ShopifyPaymentsPayoutIntervalDaily ShopifyPaymentsPayoutInterval = "DAILY"
	// Each week, on the day of week specified by weeklyAnchor.
	ShopifyPaymentsPayoutIntervalWeekly ShopifyPaymentsPayoutInterval = "WEEKLY"
	// Each month, on the day of month specified by monthlyAnchor.
	ShopifyPaymentsPayoutIntervalMonthly ShopifyPaymentsPayoutInterval = "MONTHLY"
	// Payouts will not be automatically made.
	ShopifyPaymentsPayoutIntervalManual ShopifyPaymentsPayoutInterval = "MANUAL"
)

var AllShopifyPaymentsPayoutInterval = []ShopifyPaymentsPayoutInterval{
	ShopifyPaymentsPayoutIntervalDaily,
	ShopifyPaymentsPayoutIntervalWeekly,
	ShopifyPaymentsPayoutIntervalMonthly,
	ShopifyPaymentsPayoutIntervalManual,
}

func (e ShopifyPaymentsPayoutInterval) IsValid() bool {
	switch e {
	case ShopifyPaymentsPayoutIntervalDaily, ShopifyPaymentsPayoutIntervalWeekly, ShopifyPaymentsPayoutIntervalMonthly, ShopifyPaymentsPayoutIntervalManual:
		return true
	}
	return false
}

func (e ShopifyPaymentsPayoutInterval) String() string {
	return string(e)
}

func (e *ShopifyPaymentsPayoutInterval) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsPayoutInterval(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsPayoutInterval", str)
	}
	return nil
}

func (e ShopifyPaymentsPayoutInterval) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The transfer status of the payout.
type ShopifyPaymentsPayoutStatus string

const (
	// The payout has been created and had transactions assigned to it, but
	// it has not yet been submitted to the bank.
	ShopifyPaymentsPayoutStatusScheduled ShopifyPaymentsPayoutStatus = "SCHEDULED"
	// The payout has been submitted to the bank.
	ShopifyPaymentsPayoutStatusInTransit ShopifyPaymentsPayoutStatus = "IN_TRANSIT"
	// The payout has been successfully deposited into the bank.
	ShopifyPaymentsPayoutStatusPaid ShopifyPaymentsPayoutStatus = "PAID"
	// The payout has been declined by the bank.
	ShopifyPaymentsPayoutStatusFailed ShopifyPaymentsPayoutStatus = "FAILED"
	// The payout has been canceled by Shopify.
	ShopifyPaymentsPayoutStatusCanceled ShopifyPaymentsPayoutStatus = "CANCELED"
)

var AllShopifyPaymentsPayoutStatus = []ShopifyPaymentsPayoutStatus{
	ShopifyPaymentsPayoutStatusScheduled,
	ShopifyPaymentsPayoutStatusInTransit,
	ShopifyPaymentsPayoutStatusPaid,
	ShopifyPaymentsPayoutStatusFailed,
	ShopifyPaymentsPayoutStatusCanceled,
}

func (e ShopifyPaymentsPayoutStatus) IsValid() bool {
	switch e {
	case ShopifyPaymentsPayoutStatusScheduled, ShopifyPaymentsPayoutStatusInTransit, ShopifyPaymentsPayoutStatusPaid, ShopifyPaymentsPayoutStatusFailed, ShopifyPaymentsPayoutStatusCanceled:
		return true
	}
	return false
}

func (e ShopifyPaymentsPayoutStatus) String() string {
	return string(e)
}

func (e *ShopifyPaymentsPayoutStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsPayoutStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsPayoutStatus", str)
	}
	return nil
}

func (e ShopifyPaymentsPayoutStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible transaction types for a payout.
type ShopifyPaymentsPayoutTransactionType string

const (
	// The payout is a deposit.
	ShopifyPaymentsPayoutTransactionTypeDeposit ShopifyPaymentsPayoutTransactionType = "DEPOSIT"
	// The payout is a withdrawal.
	ShopifyPaymentsPayoutTransactionTypeWithdrawal ShopifyPaymentsPayoutTransactionType = "WITHDRAWAL"
)

var AllShopifyPaymentsPayoutTransactionType = []ShopifyPaymentsPayoutTransactionType{
	ShopifyPaymentsPayoutTransactionTypeDeposit,
	ShopifyPaymentsPayoutTransactionTypeWithdrawal,
}

func (e ShopifyPaymentsPayoutTransactionType) IsValid() bool {
	switch e {
	case ShopifyPaymentsPayoutTransactionTypeDeposit, ShopifyPaymentsPayoutTransactionTypeWithdrawal:
		return true
	}
	return false
}

func (e ShopifyPaymentsPayoutTransactionType) String() string {
	return string(e)
}

func (e *ShopifyPaymentsPayoutTransactionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsPayoutTransactionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsPayoutTransactionType", str)
	}
	return nil
}

func (e ShopifyPaymentsPayoutTransactionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The types of possible verification documents.
type ShopifyPaymentsVerificationDocumentType string

const (
	// The subject's driver's license.
	ShopifyPaymentsVerificationDocumentTypeDriversLicense ShopifyPaymentsVerificationDocumentType = "DRIVERS_LICENSE"
	// A government's identification document of the subject.
	ShopifyPaymentsVerificationDocumentTypeGovernmentIDEntification ShopifyPaymentsVerificationDocumentType = "GOVERNMENT_IDENTIFICATION"
	// The subject's passport.
	ShopifyPaymentsVerificationDocumentTypePassport ShopifyPaymentsVerificationDocumentType = "PASSPORT"
)

var AllShopifyPaymentsVerificationDocumentType = []ShopifyPaymentsVerificationDocumentType{
	ShopifyPaymentsVerificationDocumentTypeDriversLicense,
	ShopifyPaymentsVerificationDocumentTypeGovernmentIDEntification,
	ShopifyPaymentsVerificationDocumentTypePassport,
}

func (e ShopifyPaymentsVerificationDocumentType) IsValid() bool {
	switch e {
	case ShopifyPaymentsVerificationDocumentTypeDriversLicense, ShopifyPaymentsVerificationDocumentTypeGovernmentIDEntification, ShopifyPaymentsVerificationDocumentTypePassport:
		return true
	}
	return false
}

func (e ShopifyPaymentsVerificationDocumentType) String() string {
	return string(e)
}

func (e *ShopifyPaymentsVerificationDocumentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsVerificationDocumentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsVerificationDocumentType", str)
	}
	return nil
}

func (e ShopifyPaymentsVerificationDocumentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of a verification.
type ShopifyPaymentsVerificationStatus string

const (
	// The verification has been verified.
	ShopifyPaymentsVerificationStatusVerified ShopifyPaymentsVerificationStatus = "VERIFIED"
	// The verification has not yet been verified.
	ShopifyPaymentsVerificationStatusUnverified ShopifyPaymentsVerificationStatus = "UNVERIFIED"
	// The verification request has been submitted but a response has not yet been given.
	ShopifyPaymentsVerificationStatusPending ShopifyPaymentsVerificationStatus = "PENDING"
)

var AllShopifyPaymentsVerificationStatus = []ShopifyPaymentsVerificationStatus{
	ShopifyPaymentsVerificationStatusVerified,
	ShopifyPaymentsVerificationStatusUnverified,
	ShopifyPaymentsVerificationStatusPending,
}

func (e ShopifyPaymentsVerificationStatus) IsValid() bool {
	switch e {
	case ShopifyPaymentsVerificationStatusVerified, ShopifyPaymentsVerificationStatusUnverified, ShopifyPaymentsVerificationStatusPending:
		return true
	}
	return false
}

func (e ShopifyPaymentsVerificationStatus) String() string {
	return string(e)
}

func (e *ShopifyPaymentsVerificationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShopifyPaymentsVerificationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShopifyPaymentsVerificationStatus", str)
	}
	return nil
}

func (e ShopifyPaymentsVerificationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible HTTP method of a staged upload target.
type StagedUploadHTTPMethodType string

const (
	// The POST HTTP method.
	StagedUploadHTTPMethodTypePost StagedUploadHTTPMethodType = "POST"
	// The PUT HTTP method.
	StagedUploadHTTPMethodTypePut StagedUploadHTTPMethodType = "PUT"
)

var AllStagedUploadHTTPMethodType = []StagedUploadHTTPMethodType{
	StagedUploadHTTPMethodTypePost,
	StagedUploadHTTPMethodTypePut,
}

func (e StagedUploadHTTPMethodType) IsValid() bool {
	switch e {
	case StagedUploadHTTPMethodTypePost, StagedUploadHTTPMethodTypePut:
		return true
	}
	return false
}

func (e StagedUploadHTTPMethodType) String() string {
	return string(e)
}

func (e *StagedUploadHTTPMethodType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StagedUploadHTTPMethodType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StagedUploadHttpMethodType", str)
	}
	return nil
}

func (e StagedUploadHTTPMethodType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the resource type to receive.
type StagedUploadTargetGenerateUploadResource string

const (
	// A timeline event.
	StagedUploadTargetGenerateUploadResourceTimeline StagedUploadTargetGenerateUploadResource = "TIMELINE"
	// A product image.
	StagedUploadTargetGenerateUploadResourceProductImage StagedUploadTargetGenerateUploadResource = "PRODUCT_IMAGE"
	// A collection image.
	StagedUploadTargetGenerateUploadResourceCollectionImage StagedUploadTargetGenerateUploadResource = "COLLECTION_IMAGE"
	// A shop image.
	StagedUploadTargetGenerateUploadResourceShopImage StagedUploadTargetGenerateUploadResource = "SHOP_IMAGE"
	// Merchandising::Video resource representation.
	StagedUploadTargetGenerateUploadResourceVideo StagedUploadTargetGenerateUploadResource = "VIDEO"
	// Merchandising::Model3d resource representation.
	StagedUploadTargetGenerateUploadResourceModel3d StagedUploadTargetGenerateUploadResource = "MODEL_3D"
	// Merchandising::Image resource representation.
	StagedUploadTargetGenerateUploadResourceImage StagedUploadTargetGenerateUploadResource = "IMAGE"
)

var AllStagedUploadTargetGenerateUploadResource = []StagedUploadTargetGenerateUploadResource{
	StagedUploadTargetGenerateUploadResourceTimeline,
	StagedUploadTargetGenerateUploadResourceProductImage,
	StagedUploadTargetGenerateUploadResourceCollectionImage,
	StagedUploadTargetGenerateUploadResourceShopImage,
	StagedUploadTargetGenerateUploadResourceVideo,
	StagedUploadTargetGenerateUploadResourceModel3d,
	StagedUploadTargetGenerateUploadResourceImage,
}

func (e StagedUploadTargetGenerateUploadResource) IsValid() bool {
	switch e {
	case StagedUploadTargetGenerateUploadResourceTimeline, StagedUploadTargetGenerateUploadResourceProductImage, StagedUploadTargetGenerateUploadResourceCollectionImage, StagedUploadTargetGenerateUploadResourceShopImage, StagedUploadTargetGenerateUploadResourceVideo, StagedUploadTargetGenerateUploadResourceModel3d, StagedUploadTargetGenerateUploadResourceImage:
		return true
	}
	return false
}

func (e StagedUploadTargetGenerateUploadResource) String() string {
	return string(e)
}

func (e *StagedUploadTargetGenerateUploadResource) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StagedUploadTargetGenerateUploadResource(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StagedUploadTargetGenerateUploadResource", str)
	}
	return nil
}

func (e StagedUploadTargetGenerateUploadResource) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible error codes associated with making billing attempts. The error codes supplement the
// `error_message` to provide consistent results and help with dunning management.
type SubscriptionBillingAttemptErrorCode string

const (
	// Payment method was not found.
	SubscriptionBillingAttemptErrorCodePaymentMethodNotFound SubscriptionBillingAttemptErrorCode = "PAYMENT_METHOD_NOT_FOUND"
	// Payment provider is not enabled.
	SubscriptionBillingAttemptErrorCodePaymentProviderIsNotEnabled SubscriptionBillingAttemptErrorCode = "PAYMENT_PROVIDER_IS_NOT_ENABLED"
	// Payment method is invalid. Please update or create a new payment method.
	SubscriptionBillingAttemptErrorCodeInvalidPaymentMethod SubscriptionBillingAttemptErrorCode = "INVALID_PAYMENT_METHOD"
	// There was an unexpected error during the billing attempt.
	SubscriptionBillingAttemptErrorCodeUnexpectedError SubscriptionBillingAttemptErrorCode = "UNEXPECTED_ERROR"
	// Payment method is expired.
	SubscriptionBillingAttemptErrorCodeExpiredPaymentMethod SubscriptionBillingAttemptErrorCode = "EXPIRED_PAYMENT_METHOD"
	// Payment method was declined by processor.
	SubscriptionBillingAttemptErrorCodePaymentMethodDeclined SubscriptionBillingAttemptErrorCode = "PAYMENT_METHOD_DECLINED"
	// There was an error during the authentication.
	SubscriptionBillingAttemptErrorCodeAuthenticationError SubscriptionBillingAttemptErrorCode = "AUTHENTICATION_ERROR"
	// Gateway is in test mode and attempted to bill a live payment method.
	SubscriptionBillingAttemptErrorCodeTestMode SubscriptionBillingAttemptErrorCode = "TEST_MODE"
)

var AllSubscriptionBillingAttemptErrorCode = []SubscriptionBillingAttemptErrorCode{
	SubscriptionBillingAttemptErrorCodePaymentMethodNotFound,
	SubscriptionBillingAttemptErrorCodePaymentProviderIsNotEnabled,
	SubscriptionBillingAttemptErrorCodeInvalidPaymentMethod,
	SubscriptionBillingAttemptErrorCodeUnexpectedError,
	SubscriptionBillingAttemptErrorCodeExpiredPaymentMethod,
	SubscriptionBillingAttemptErrorCodePaymentMethodDeclined,
	SubscriptionBillingAttemptErrorCodeAuthenticationError,
	SubscriptionBillingAttemptErrorCodeTestMode,
}

func (e SubscriptionBillingAttemptErrorCode) IsValid() bool {
	switch e {
	case SubscriptionBillingAttemptErrorCodePaymentMethodNotFound, SubscriptionBillingAttemptErrorCodePaymentProviderIsNotEnabled, SubscriptionBillingAttemptErrorCodeInvalidPaymentMethod, SubscriptionBillingAttemptErrorCodeUnexpectedError, SubscriptionBillingAttemptErrorCodeExpiredPaymentMethod, SubscriptionBillingAttemptErrorCodePaymentMethodDeclined, SubscriptionBillingAttemptErrorCodeAuthenticationError, SubscriptionBillingAttemptErrorCodeTestMode:
		return true
	}
	return false
}

func (e SubscriptionBillingAttemptErrorCode) String() string {
	return string(e)
}

func (e *SubscriptionBillingAttemptErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionBillingAttemptErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionBillingAttemptErrorCode", str)
	}
	return nil
}

func (e SubscriptionBillingAttemptErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that could be returned by SubscriptionContractUserError.
type SubscriptionContractErrorCode string

const (
	// Input value is invalid.
	SubscriptionContractErrorCodeInvalid SubscriptionContractErrorCode = "INVALID"
)

var AllSubscriptionContractErrorCode = []SubscriptionContractErrorCode{
	SubscriptionContractErrorCodeInvalid,
}

func (e SubscriptionContractErrorCode) IsValid() bool {
	switch e {
	case SubscriptionContractErrorCodeInvalid:
		return true
	}
	return false
}

func (e SubscriptionContractErrorCode) String() string {
	return string(e)
}

func (e *SubscriptionContractErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionContractErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionContractErrorCode", str)
	}
	return nil
}

func (e SubscriptionContractErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible status values of the last payment on a subscription contract.
type SubscriptionContractLastPaymentStatus string

const (
	// Successful subscription billing attempt.
	SubscriptionContractLastPaymentStatusSucceeded SubscriptionContractLastPaymentStatus = "SUCCEEDED"
	// Failed subscription billing attempt.
	SubscriptionContractLastPaymentStatusFailed SubscriptionContractLastPaymentStatus = "FAILED"
)

var AllSubscriptionContractLastPaymentStatus = []SubscriptionContractLastPaymentStatus{
	SubscriptionContractLastPaymentStatusSucceeded,
	SubscriptionContractLastPaymentStatusFailed,
}

func (e SubscriptionContractLastPaymentStatus) IsValid() bool {
	switch e {
	case SubscriptionContractLastPaymentStatusSucceeded, SubscriptionContractLastPaymentStatusFailed:
		return true
	}
	return false
}

func (e SubscriptionContractLastPaymentStatus) String() string {
	return string(e)
}

func (e *SubscriptionContractLastPaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionContractLastPaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionContractLastPaymentStatus", str)
	}
	return nil
}

func (e SubscriptionContractLastPaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible status values of a subscription.
type SubscriptionContractSubscriptionStatus string

const (
	// Active subscription contract.
	SubscriptionContractSubscriptionStatusActive SubscriptionContractSubscriptionStatus = "ACTIVE"
	// Paused subscription contract.
	SubscriptionContractSubscriptionStatusPaused SubscriptionContractSubscriptionStatus = "PAUSED"
	// Cancelled subscription contract.
	SubscriptionContractSubscriptionStatusCancelled SubscriptionContractSubscriptionStatus = "CANCELLED"
	// Expired subscription contract.
	SubscriptionContractSubscriptionStatusExpired SubscriptionContractSubscriptionStatus = "EXPIRED"
	// Failed subscription contract.
	SubscriptionContractSubscriptionStatusFailed SubscriptionContractSubscriptionStatus = "FAILED"
)

var AllSubscriptionContractSubscriptionStatus = []SubscriptionContractSubscriptionStatus{
	SubscriptionContractSubscriptionStatusActive,
	SubscriptionContractSubscriptionStatusPaused,
	SubscriptionContractSubscriptionStatusCancelled,
	SubscriptionContractSubscriptionStatusExpired,
	SubscriptionContractSubscriptionStatusFailed,
}

func (e SubscriptionContractSubscriptionStatus) IsValid() bool {
	switch e {
	case SubscriptionContractSubscriptionStatusActive, SubscriptionContractSubscriptionStatusPaused, SubscriptionContractSubscriptionStatusCancelled, SubscriptionContractSubscriptionStatusExpired, SubscriptionContractSubscriptionStatusFailed:
		return true
	}
	return false
}

func (e SubscriptionContractSubscriptionStatus) String() string {
	return string(e)
}

func (e *SubscriptionContractSubscriptionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionContractSubscriptionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionContractSubscriptionStatus", str)
	}
	return nil
}

func (e SubscriptionContractSubscriptionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reason a discount on a subscription draft was rejected.
type SubscriptionDiscountRejectionReason string

const (
	// Discount code is not found.
	SubscriptionDiscountRejectionReasonNotFound SubscriptionDiscountRejectionReason = "NOT_FOUND"
	// Discount does not apply to any of the given line items.
	SubscriptionDiscountRejectionReasonNoEntitledLineItems SubscriptionDiscountRejectionReason = "NO_ENTITLED_LINE_ITEMS"
	// Quantity of items does not qualify for the discount.
	SubscriptionDiscountRejectionReasonQuantityNotInRange SubscriptionDiscountRejectionReason = "QUANTITY_NOT_IN_RANGE"
	// Purchase amount of items does not qualify for the discount.
	SubscriptionDiscountRejectionReasonPurchaseNotInRange SubscriptionDiscountRejectionReason = "PURCHASE_NOT_IN_RANGE"
	// Given customer does not qualify for the discount.
	SubscriptionDiscountRejectionReasonCustomerNotEligible SubscriptionDiscountRejectionReason = "CUSTOMER_NOT_ELIGIBLE"
	// Discount usage limit has been reached.
	SubscriptionDiscountRejectionReasonUsageLimitReached SubscriptionDiscountRejectionReason = "USAGE_LIMIT_REACHED"
	// Customer usage limit has been reached.
	SubscriptionDiscountRejectionReasonCustomerUsageLimitReached SubscriptionDiscountRejectionReason = "CUSTOMER_USAGE_LIMIT_REACHED"
	// Discount is inactive.
	SubscriptionDiscountRejectionReasonCurrentlyInactive SubscriptionDiscountRejectionReason = "CURRENTLY_INACTIVE"
	// No applicable shipping lines.
	SubscriptionDiscountRejectionReasonNoEntitledShippingLines SubscriptionDiscountRejectionReason = "NO_ENTITLED_SHIPPING_LINES"
	// Purchase type does not qualify for the discount.
	SubscriptionDiscountRejectionReasonIncompatiblePurchaseType SubscriptionDiscountRejectionReason = "INCOMPATIBLE_PURCHASE_TYPE"
	// Internal error during discount code validation.
	SubscriptionDiscountRejectionReasonInternalError SubscriptionDiscountRejectionReason = "INTERNAL_ERROR"
)

var AllSubscriptionDiscountRejectionReason = []SubscriptionDiscountRejectionReason{
	SubscriptionDiscountRejectionReasonNotFound,
	SubscriptionDiscountRejectionReasonNoEntitledLineItems,
	SubscriptionDiscountRejectionReasonQuantityNotInRange,
	SubscriptionDiscountRejectionReasonPurchaseNotInRange,
	SubscriptionDiscountRejectionReasonCustomerNotEligible,
	SubscriptionDiscountRejectionReasonUsageLimitReached,
	SubscriptionDiscountRejectionReasonCustomerUsageLimitReached,
	SubscriptionDiscountRejectionReasonCurrentlyInactive,
	SubscriptionDiscountRejectionReasonNoEntitledShippingLines,
	SubscriptionDiscountRejectionReasonIncompatiblePurchaseType,
	SubscriptionDiscountRejectionReasonInternalError,
}

func (e SubscriptionDiscountRejectionReason) IsValid() bool {
	switch e {
	case SubscriptionDiscountRejectionReasonNotFound, SubscriptionDiscountRejectionReasonNoEntitledLineItems, SubscriptionDiscountRejectionReasonQuantityNotInRange, SubscriptionDiscountRejectionReasonPurchaseNotInRange, SubscriptionDiscountRejectionReasonCustomerNotEligible, SubscriptionDiscountRejectionReasonUsageLimitReached, SubscriptionDiscountRejectionReasonCustomerUsageLimitReached, SubscriptionDiscountRejectionReasonCurrentlyInactive, SubscriptionDiscountRejectionReasonNoEntitledShippingLines, SubscriptionDiscountRejectionReasonIncompatiblePurchaseType, SubscriptionDiscountRejectionReasonInternalError:
		return true
	}
	return false
}

func (e SubscriptionDiscountRejectionReason) String() string {
	return string(e)
}

func (e *SubscriptionDiscountRejectionReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionDiscountRejectionReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionDiscountRejectionReason", str)
	}
	return nil
}

func (e SubscriptionDiscountRejectionReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that could be returned by SubscriptionDraftUserError.
type SubscriptionDraftErrorCode string

const (
	// This line has already been removed.
	SubscriptionDraftErrorCodeAlreadyRemoved SubscriptionDraftErrorCode = "ALREADY_REMOVED"
	// Input value is not present.
	SubscriptionDraftErrorCodePresence SubscriptionDraftErrorCode = "PRESENCE"
	// Subscription draft has been already committed.
	SubscriptionDraftErrorCodeCommitted SubscriptionDraftErrorCode = "COMMITTED"
	// Value is not in range.
	SubscriptionDraftErrorCodeNotInRange SubscriptionDraftErrorCode = "NOT_IN_RANGE"
	// The value is not an integer.
	SubscriptionDraftErrorCodeNotAnInteger SubscriptionDraftErrorCode = "NOT_AN_INTEGER"
	// The maximum number of cycles must be greater than the minimum.
	SubscriptionDraftErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles SubscriptionDraftErrorCode = "SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES"
	// The delivery policy interval must be a multiple of the billing policy interval.
	SubscriptionDraftErrorCodeDeliveryMustBeMultipleOfBilling SubscriptionDraftErrorCode = "DELIVERY_MUST_BE_MULTIPLE_OF_BILLING"
	// Next billing date is invalid.
	SubscriptionDraftErrorCodeInvalidBillingDate SubscriptionDraftErrorCode = "INVALID_BILLING_DATE"
	// Must have at least one line.
	SubscriptionDraftErrorCodeInvalidLines SubscriptionDraftErrorCode = "INVALID_LINES"
	// Discount must have at least one entitled line.
	SubscriptionDraftErrorCodeNoEntitledLines SubscriptionDraftErrorCode = "NO_ENTITLED_LINES"
	// The customer doesn't exist.
	SubscriptionDraftErrorCodeCustomerDoesNotExist SubscriptionDraftErrorCode = "CUSTOMER_DOES_NOT_EXIST"
	// The payment method customer must be the same as the contract customer.
	SubscriptionDraftErrorCodeCustomerMismatch SubscriptionDraftErrorCode = "CUSTOMER_MISMATCH"
	// The delivery method can't be blank if any lines require shipping.
	SubscriptionDraftErrorCodeDeliveryMethodRequired SubscriptionDraftErrorCode = "DELIVERY_METHOD_REQUIRED"
	// The after cycle attribute must be unique between cycle discounts.
	SubscriptionDraftErrorCodeCycleDiscountsUniqueAfterCycle SubscriptionDraftErrorCode = "CYCLE_DISCOUNTS_UNIQUE_AFTER_CYCLE"
	// The adjustment value must the same type as the adjustment type.
	SubscriptionDraftErrorCodeInvalidAdjustmentType SubscriptionDraftErrorCode = "INVALID_ADJUSTMENT_TYPE"
	// The adjustment value must be either fixed_value or percentage.
	SubscriptionDraftErrorCodeInvalidAdjustmentValue SubscriptionDraftErrorCode = "INVALID_ADJUSTMENT_VALUE"
	// Another operation updated the contract concurrently as the commit was in progress.
	SubscriptionDraftErrorCodeStaleContract SubscriptionDraftErrorCode = "STALE_CONTRACT"
	// Currency is not enabled.
	SubscriptionDraftErrorCodeCurrencyNotEnabled SubscriptionDraftErrorCode = "CURRENCY_NOT_ENABLED"
	// Input value is invalid.
	SubscriptionDraftErrorCodeInvalid SubscriptionDraftErrorCode = "INVALID"
	// Input value is blank.
	SubscriptionDraftErrorCodeBlank SubscriptionDraftErrorCode = "BLANK"
	// Input value should be greater than minimum allowed value.
	SubscriptionDraftErrorCodeGreaterThan SubscriptionDraftErrorCode = "GREATER_THAN"
	// Input value should be greater than or equal to minimum allowed value.
	SubscriptionDraftErrorCodeGreaterThanOrEqualTo SubscriptionDraftErrorCode = "GREATER_THAN_OR_EQUAL_TO"
	// Input value should be less than maximum allowed value.
	SubscriptionDraftErrorCodeLessThan SubscriptionDraftErrorCode = "LESS_THAN"
	// Input value should be less or equal to maximum allowed value.
	SubscriptionDraftErrorCodeLessThanOrEqualTo SubscriptionDraftErrorCode = "LESS_THAN_OR_EQUAL_TO"
	// Input value is too long.
	SubscriptionDraftErrorCodeTooLong SubscriptionDraftErrorCode = "TOO_LONG"
	// Input value is too short.
	SubscriptionDraftErrorCodeTooShort SubscriptionDraftErrorCode = "TOO_SHORT"
)

var AllSubscriptionDraftErrorCode = []SubscriptionDraftErrorCode{
	SubscriptionDraftErrorCodeAlreadyRemoved,
	SubscriptionDraftErrorCodePresence,
	SubscriptionDraftErrorCodeCommitted,
	SubscriptionDraftErrorCodeNotInRange,
	SubscriptionDraftErrorCodeNotAnInteger,
	SubscriptionDraftErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles,
	SubscriptionDraftErrorCodeDeliveryMustBeMultipleOfBilling,
	SubscriptionDraftErrorCodeInvalidBillingDate,
	SubscriptionDraftErrorCodeInvalidLines,
	SubscriptionDraftErrorCodeNoEntitledLines,
	SubscriptionDraftErrorCodeCustomerDoesNotExist,
	SubscriptionDraftErrorCodeCustomerMismatch,
	SubscriptionDraftErrorCodeDeliveryMethodRequired,
	SubscriptionDraftErrorCodeCycleDiscountsUniqueAfterCycle,
	SubscriptionDraftErrorCodeInvalidAdjustmentType,
	SubscriptionDraftErrorCodeInvalidAdjustmentValue,
	SubscriptionDraftErrorCodeStaleContract,
	SubscriptionDraftErrorCodeCurrencyNotEnabled,
	SubscriptionDraftErrorCodeInvalid,
	SubscriptionDraftErrorCodeBlank,
	SubscriptionDraftErrorCodeGreaterThan,
	SubscriptionDraftErrorCodeGreaterThanOrEqualTo,
	SubscriptionDraftErrorCodeLessThan,
	SubscriptionDraftErrorCodeLessThanOrEqualTo,
	SubscriptionDraftErrorCodeTooLong,
	SubscriptionDraftErrorCodeTooShort,
}

func (e SubscriptionDraftErrorCode) IsValid() bool {
	switch e {
	case SubscriptionDraftErrorCodeAlreadyRemoved, SubscriptionDraftErrorCodePresence, SubscriptionDraftErrorCodeCommitted, SubscriptionDraftErrorCodeNotInRange, SubscriptionDraftErrorCodeNotAnInteger, SubscriptionDraftErrorCodeSellingPlanMaxCyclesMustBeGreaterThanMinCycles, SubscriptionDraftErrorCodeDeliveryMustBeMultipleOfBilling, SubscriptionDraftErrorCodeInvalidBillingDate, SubscriptionDraftErrorCodeInvalidLines, SubscriptionDraftErrorCodeNoEntitledLines, SubscriptionDraftErrorCodeCustomerDoesNotExist, SubscriptionDraftErrorCodeCustomerMismatch, SubscriptionDraftErrorCodeDeliveryMethodRequired, SubscriptionDraftErrorCodeCycleDiscountsUniqueAfterCycle, SubscriptionDraftErrorCodeInvalidAdjustmentType, SubscriptionDraftErrorCodeInvalidAdjustmentValue, SubscriptionDraftErrorCodeStaleContract, SubscriptionDraftErrorCodeCurrencyNotEnabled, SubscriptionDraftErrorCodeInvalid, SubscriptionDraftErrorCodeBlank, SubscriptionDraftErrorCodeGreaterThan, SubscriptionDraftErrorCodeGreaterThanOrEqualTo, SubscriptionDraftErrorCodeLessThan, SubscriptionDraftErrorCodeLessThanOrEqualTo, SubscriptionDraftErrorCodeTooLong, SubscriptionDraftErrorCodeTooShort:
		return true
	}
	return false
}

func (e SubscriptionDraftErrorCode) String() string {
	return string(e)
}

func (e *SubscriptionDraftErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionDraftErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionDraftErrorCode", str)
	}
	return nil
}

func (e SubscriptionDraftErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the kind of the suggested order transaction.
type SuggestedOrderTransactionKind string

const (
	// A suggested refund transaction for an order.
	SuggestedOrderTransactionKindSuggestedRefund SuggestedOrderTransactionKind = "SUGGESTED_REFUND"
)

var AllSuggestedOrderTransactionKind = []SuggestedOrderTransactionKind{
	SuggestedOrderTransactionKindSuggestedRefund,
}

func (e SuggestedOrderTransactionKind) IsValid() bool {
	switch e {
	case SuggestedOrderTransactionKindSuggestedRefund:
		return true
	}
	return false
}

func (e SuggestedOrderTransactionKind) String() string {
	return string(e)
}

func (e *SuggestedOrderTransactionKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SuggestedOrderTransactionKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SuggestedOrderTransactionKind", str)
	}
	return nil
}

func (e SuggestedOrderTransactionKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Available customer tax exemptions.
type TaxExemption string

const (
	// This customer is exempt from specific taxes for holding a valid STATUS_CARD_EXEMPTION in Canada.
	TaxExemptionCaStatusCardExemption TaxExemption = "CA_STATUS_CARD_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in British Columbia.
	TaxExemptionCaBcResellerExemption TaxExemption = "CA_BC_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Manitoba.
	TaxExemptionCaMbResellerExemption TaxExemption = "CA_MB_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkResellerExemption TaxExemption = "CA_SK_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid DIPLOMAT_EXEMPTION in Canada.
	TaxExemptionCaDiplomatExemption TaxExemption = "CA_DIPLOMAT_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in British Columbia.
	TaxExemptionCaBcCommercialFisheryExemption TaxExemption = "CA_BC_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Manitoba.
	TaxExemptionCaMbCommercialFisheryExemption TaxExemption = "CA_MB_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Nova Scotia.
	TaxExemptionCaNsCommercialFisheryExemption TaxExemption = "CA_NS_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Prince Edward Island.
	TaxExemptionCaPeCommercialFisheryExemption TaxExemption = "CA_PE_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkCommercialFisheryExemption TaxExemption = "CA_SK_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in British Columbia.
	TaxExemptionCaBcProductionAndMachineryExemption TaxExemption = "CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkProductionAndMachineryExemption TaxExemption = "CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in British Columbia.
	TaxExemptionCaBcSubContractorExemption TaxExemption = "CA_BC_SUB_CONTRACTOR_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkSubContractorExemption TaxExemption = "CA_SK_SUB_CONTRACTOR_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in British Columbia.
	TaxExemptionCaBcContractorExemption TaxExemption = "CA_BC_CONTRACTOR_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkContractorExemption TaxExemption = "CA_SK_CONTRACTOR_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid PURCHASE_EXEMPTION in Ontario.
	TaxExemptionCaOnPurchaseExemption TaxExemption = "CA_ON_PURCHASE_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Manitoba.
	TaxExemptionCaMbFarmerExemption TaxExemption = "CA_MB_FARMER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Nova Scotia.
	TaxExemptionCaNsFarmerExemption TaxExemption = "CA_NS_FARMER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkFarmerExemption TaxExemption = "CA_SK_FARMER_EXEMPTION"
)

var AllTaxExemption = []TaxExemption{
	TaxExemptionCaStatusCardExemption,
	TaxExemptionCaBcResellerExemption,
	TaxExemptionCaMbResellerExemption,
	TaxExemptionCaSkResellerExemption,
	TaxExemptionCaDiplomatExemption,
	TaxExemptionCaBcCommercialFisheryExemption,
	TaxExemptionCaMbCommercialFisheryExemption,
	TaxExemptionCaNsCommercialFisheryExemption,
	TaxExemptionCaPeCommercialFisheryExemption,
	TaxExemptionCaSkCommercialFisheryExemption,
	TaxExemptionCaBcProductionAndMachineryExemption,
	TaxExemptionCaSkProductionAndMachineryExemption,
	TaxExemptionCaBcSubContractorExemption,
	TaxExemptionCaSkSubContractorExemption,
	TaxExemptionCaBcContractorExemption,
	TaxExemptionCaSkContractorExemption,
	TaxExemptionCaOnPurchaseExemption,
	TaxExemptionCaMbFarmerExemption,
	TaxExemptionCaNsFarmerExemption,
	TaxExemptionCaSkFarmerExemption,
}

func (e TaxExemption) IsValid() bool {
	switch e {
	case TaxExemptionCaStatusCardExemption, TaxExemptionCaBcResellerExemption, TaxExemptionCaMbResellerExemption, TaxExemptionCaSkResellerExemption, TaxExemptionCaDiplomatExemption, TaxExemptionCaBcCommercialFisheryExemption, TaxExemptionCaMbCommercialFisheryExemption, TaxExemptionCaNsCommercialFisheryExemption, TaxExemptionCaPeCommercialFisheryExemption, TaxExemptionCaSkCommercialFisheryExemption, TaxExemptionCaBcProductionAndMachineryExemption, TaxExemptionCaSkProductionAndMachineryExemption, TaxExemptionCaBcSubContractorExemption, TaxExemptionCaSkSubContractorExemption, TaxExemptionCaBcContractorExemption, TaxExemptionCaSkContractorExemption, TaxExemptionCaOnPurchaseExemption, TaxExemptionCaMbFarmerExemption, TaxExemptionCaNsFarmerExemption, TaxExemptionCaSkFarmerExemption:
		return true
	}
	return false
}

func (e TaxExemption) String() string {
	return string(e)
}

func (e *TaxExemption) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaxExemption(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaxExemption", str)
	}
	return nil
}

func (e TaxExemption) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the type of resources that are translatable.
type TranslatableResourceType string

const (
	// Represents a product.
	TranslatableResourceTypeProduct TranslatableResourceType = "PRODUCT"
	// Represents a product variant.
	TranslatableResourceTypeProductVariant TranslatableResourceType = "PRODUCT_VARIANT"
	// Represents an email template.
	TranslatableResourceTypeEmailTemplate TranslatableResourceType = "EMAIL_TEMPLATE"
	// Represents an online store theme.
	TranslatableResourceTypeOnlineStoreTheme TranslatableResourceType = "ONLINE_STORE_THEME"
	// Represents an article.
	TranslatableResourceTypeOnlineStoreArticle TranslatableResourceType = "ONLINE_STORE_ARTICLE"
	// Represents an online store blog.
	TranslatableResourceTypeOnlineStoreBlog TranslatableResourceType = "ONLINE_STORE_BLOG"
	// Represents an online store page.
	TranslatableResourceTypeOnlineStorePage TranslatableResourceType = "ONLINE_STORE_PAGE"
	// Represents a collection of products.
	TranslatableResourceTypeCollection TranslatableResourceType = "COLLECTION"
	// Represents a link to direct users to.
	TranslatableResourceTypeLink TranslatableResourceType = "LINK"
	// Represents a metafield.
	TranslatableResourceTypeMetafield TranslatableResourceType = "METAFIELD"
	// Represents an SMS template.
	TranslatableResourceTypeSmsTemplate TranslatableResourceType = "SMS_TEMPLATE"
	// Represents a shop.
	TranslatableResourceTypeShop TranslatableResourceType = "SHOP"
	// Represents a shop policy.
	TranslatableResourceTypeShopPolicy TranslatableResourceType = "SHOP_POLICY"
	// Represents a payment gateway.
	TranslatableResourceTypePaymentGateway TranslatableResourceType = "PAYMENT_GATEWAY"
	// Represents a custom product property name like "Size", "Color", and "Material".
	TranslatableResourceTypeProductOption TranslatableResourceType = "PRODUCT_OPTION"
	// Represents a delivery method definition. For example, "Standard", or "Expedited".
	TranslatableResourceTypeDeliveryMethodDefinition TranslatableResourceType = "DELIVERY_METHOD_DEFINITION"
)

var AllTranslatableResourceType = []TranslatableResourceType{
	TranslatableResourceTypeProduct,
	TranslatableResourceTypeProductVariant,
	TranslatableResourceTypeEmailTemplate,
	TranslatableResourceTypeOnlineStoreTheme,
	TranslatableResourceTypeOnlineStoreArticle,
	TranslatableResourceTypeOnlineStoreBlog,
	TranslatableResourceTypeOnlineStorePage,
	TranslatableResourceTypeCollection,
	TranslatableResourceTypeLink,
	TranslatableResourceTypeMetafield,
	TranslatableResourceTypeSmsTemplate,
	TranslatableResourceTypeShop,
	TranslatableResourceTypeShopPolicy,
	TranslatableResourceTypePaymentGateway,
	TranslatableResourceTypeProductOption,
	TranslatableResourceTypeDeliveryMethodDefinition,
}

func (e TranslatableResourceType) IsValid() bool {
	switch e {
	case TranslatableResourceTypeProduct, TranslatableResourceTypeProductVariant, TranslatableResourceTypeEmailTemplate, TranslatableResourceTypeOnlineStoreTheme, TranslatableResourceTypeOnlineStoreArticle, TranslatableResourceTypeOnlineStoreBlog, TranslatableResourceTypeOnlineStorePage, TranslatableResourceTypeCollection, TranslatableResourceTypeLink, TranslatableResourceTypeMetafield, TranslatableResourceTypeSmsTemplate, TranslatableResourceTypeShop, TranslatableResourceTypeShopPolicy, TranslatableResourceTypePaymentGateway, TranslatableResourceTypeProductOption, TranslatableResourceTypeDeliveryMethodDefinition:
		return true
	}
	return false
}

func (e TranslatableResourceType) String() string {
	return string(e)
}

func (e *TranslatableResourceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TranslatableResourceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TranslatableResourceType", str)
	}
	return nil
}

func (e TranslatableResourceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible error codes that could be returned by TranslationUserError.
type TranslationErrorCode string

const (
	// Input value is blank.
	TranslationErrorCodeBlank TranslationErrorCode = "BLANK"
	// Input value is invalid.
	TranslationErrorCodeInvalid TranslationErrorCode = "INVALID"
	// Resource does not exist.
	TranslationErrorCodeResourceNotFound TranslationErrorCode = "RESOURCE_NOT_FOUND"
	// Too many translation keys for resource.
	TranslationErrorCodeTooManyKeysForResource TranslationErrorCode = "TOO_MANY_KEYS_FOR_RESOURCE"
	// Translation key is invalid.
	TranslationErrorCodeInvalidKeyForModel TranslationErrorCode = "INVALID_KEY_FOR_MODEL"
	// Translation value is invalid.
	TranslationErrorCodeFailsResourceValidation TranslationErrorCode = "FAILS_RESOURCE_VALIDATION"
	// Translatable content is invalid.
	TranslationErrorCodeInvalidTranslatableContent TranslationErrorCode = "INVALID_TRANSLATABLE_CONTENT"
	// Locale is invalid for the shop.
	TranslationErrorCodeInvalidLocaleForShop TranslationErrorCode = "INVALID_LOCALE_FOR_SHOP"
	// Locale language code is invalid.
	TranslationErrorCodeInvalidCode TranslationErrorCode = "INVALID_CODE"
	// Locale code format is invalid.
	TranslationErrorCodeInvalidFormat TranslationErrorCode = "INVALID_FORMAT"
)

var AllTranslationErrorCode = []TranslationErrorCode{
	TranslationErrorCodeBlank,
	TranslationErrorCodeInvalid,
	TranslationErrorCodeResourceNotFound,
	TranslationErrorCodeTooManyKeysForResource,
	TranslationErrorCodeInvalidKeyForModel,
	TranslationErrorCodeFailsResourceValidation,
	TranslationErrorCodeInvalidTranslatableContent,
	TranslationErrorCodeInvalidLocaleForShop,
	TranslationErrorCodeInvalidCode,
	TranslationErrorCodeInvalidFormat,
}

func (e TranslationErrorCode) IsValid() bool {
	switch e {
	case TranslationErrorCodeBlank, TranslationErrorCodeInvalid, TranslationErrorCodeResourceNotFound, TranslationErrorCodeTooManyKeysForResource, TranslationErrorCodeInvalidKeyForModel, TranslationErrorCodeFailsResourceValidation, TranslationErrorCodeInvalidTranslatableContent, TranslationErrorCodeInvalidLocaleForShop, TranslationErrorCodeInvalidCode, TranslationErrorCodeInvalidFormat:
		return true
	}
	return false
}

func (e TranslationErrorCode) String() string {
	return string(e)
}

func (e *TranslationErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TranslationErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TranslationErrorCode", str)
	}
	return nil
}

func (e TranslationErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Systems of weights and measures.
type UnitSystem string

const (
	// Imperial system of weights and measures.
	UnitSystemImperialSystem UnitSystem = "IMPERIAL_SYSTEM"
	// Metric system of weights and measures.
	UnitSystemMetricSystem UnitSystem = "METRIC_SYSTEM"
)

var AllUnitSystem = []UnitSystem{
	UnitSystemImperialSystem,
	UnitSystemMetricSystem,
}

func (e UnitSystem) IsValid() bool {
	switch e {
	case UnitSystemImperialSystem, UnitSystemMetricSystem:
		return true
	}
	return false
}

func (e UnitSystem) String() string {
	return string(e)
}

func (e *UnitSystem) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UnitSystem(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UnitSystem", str)
	}
	return nil
}

func (e UnitSystem) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The supported formats for webhook subscriptions.
type WebhookSubscriptionFormat string

const (
	WebhookSubscriptionFormatJSON WebhookSubscriptionFormat = "JSON"
	WebhookSubscriptionFormatXML  WebhookSubscriptionFormat = "XML"
)

var AllWebhookSubscriptionFormat = []WebhookSubscriptionFormat{
	WebhookSubscriptionFormatJSON,
	WebhookSubscriptionFormatXML,
}

func (e WebhookSubscriptionFormat) IsValid() bool {
	switch e {
	case WebhookSubscriptionFormatJSON, WebhookSubscriptionFormatXML:
		return true
	}
	return false
}

func (e WebhookSubscriptionFormat) String() string {
	return string(e)
}

func (e *WebhookSubscriptionFormat) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WebhookSubscriptionFormat(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WebhookSubscriptionFormat", str)
	}
	return nil
}

func (e WebhookSubscriptionFormat) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The set of valid sort keys for the WebhookSubscription query.
type WebhookSubscriptionSortKeys string

const (
	// Sort by the `created_at` value.
	WebhookSubscriptionSortKeysCreatedAt WebhookSubscriptionSortKeys = "CREATED_AT"
	// Sort by the `id` value.
	WebhookSubscriptionSortKeysID WebhookSubscriptionSortKeys = "ID"
	// During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
	// results by relevance to the search term(s). When no search query is specified, this sort key is not
	// deterministic and should not be used.
	WebhookSubscriptionSortKeysRelevance WebhookSubscriptionSortKeys = "RELEVANCE"
)

var AllWebhookSubscriptionSortKeys = []WebhookSubscriptionSortKeys{
	WebhookSubscriptionSortKeysCreatedAt,
	WebhookSubscriptionSortKeysID,
	WebhookSubscriptionSortKeysRelevance,
}

func (e WebhookSubscriptionSortKeys) IsValid() bool {
	switch e {
	case WebhookSubscriptionSortKeysCreatedAt, WebhookSubscriptionSortKeysID, WebhookSubscriptionSortKeysRelevance:
		return true
	}
	return false
}

func (e WebhookSubscriptionSortKeys) String() string {
	return string(e)
}

func (e *WebhookSubscriptionSortKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WebhookSubscriptionSortKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WebhookSubscriptionSortKeys", str)
	}
	return nil
}

func (e WebhookSubscriptionSortKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The supported topics for webhook subscriptions.
type WebhookSubscriptionTopic string

const (
	// The webhook topic for `app/uninstalled` events.
	WebhookSubscriptionTopicAppUninstalled WebhookSubscriptionTopic = "APP_UNINSTALLED"
	// The webhook topic for `carts/create` events.
	WebhookSubscriptionTopicCartsCreate WebhookSubscriptionTopic = "CARTS_CREATE"
	// The webhook topic for `carts/update` events.
	WebhookSubscriptionTopicCartsUpdate WebhookSubscriptionTopic = "CARTS_UPDATE"
	// The webhook topic for `channels/delete` events.
	WebhookSubscriptionTopicChannelsDelete WebhookSubscriptionTopic = "CHANNELS_DELETE"
	// The webhook topic for `checkouts/create` events.
	WebhookSubscriptionTopicCheckoutsCreate WebhookSubscriptionTopic = "CHECKOUTS_CREATE"
	// The webhook topic for `checkouts/delete` events.
	WebhookSubscriptionTopicCheckoutsDelete WebhookSubscriptionTopic = "CHECKOUTS_DELETE"
	// The webhook topic for `checkouts/update` events.
	WebhookSubscriptionTopicCheckoutsUpdate WebhookSubscriptionTopic = "CHECKOUTS_UPDATE"
	// The webhook topic for `customer_payment_methods/create` events.
	WebhookSubscriptionTopicCustomerPaymentMethodsCreate WebhookSubscriptionTopic = "CUSTOMER_PAYMENT_METHODS_CREATE"
	// The webhook topic for `customer_payment_methods/update` events.
	WebhookSubscriptionTopicCustomerPaymentMethodsUpdate WebhookSubscriptionTopic = "CUSTOMER_PAYMENT_METHODS_UPDATE"
	// The webhook topic for `customer_payment_methods/revoke` events.
	WebhookSubscriptionTopicCustomerPaymentMethodsRevoke WebhookSubscriptionTopic = "CUSTOMER_PAYMENT_METHODS_REVOKE"
	// The webhook topic for `collection_listings/add` events.
	WebhookSubscriptionTopicCollectionListingsAdd WebhookSubscriptionTopic = "COLLECTION_LISTINGS_ADD"
	// The webhook topic for `collection_listings/remove` events.
	WebhookSubscriptionTopicCollectionListingsRemove WebhookSubscriptionTopic = "COLLECTION_LISTINGS_REMOVE"
	// The webhook topic for `collection_listings/update` events.
	WebhookSubscriptionTopicCollectionListingsUpdate WebhookSubscriptionTopic = "COLLECTION_LISTINGS_UPDATE"
	// The webhook topic for `collection_publications/create` events.
	WebhookSubscriptionTopicCollectionPublicationsCreate WebhookSubscriptionTopic = "COLLECTION_PUBLICATIONS_CREATE"
	// The webhook topic for `collection_publications/delete` events.
	WebhookSubscriptionTopicCollectionPublicationsDelete WebhookSubscriptionTopic = "COLLECTION_PUBLICATIONS_DELETE"
	// The webhook topic for `collection_publications/update` events.
	WebhookSubscriptionTopicCollectionPublicationsUpdate WebhookSubscriptionTopic = "COLLECTION_PUBLICATIONS_UPDATE"
	// The webhook topic for `collections/create` events.
	WebhookSubscriptionTopicCollectionsCreate WebhookSubscriptionTopic = "COLLECTIONS_CREATE"
	// The webhook topic for `collections/delete` events.
	WebhookSubscriptionTopicCollectionsDelete WebhookSubscriptionTopic = "COLLECTIONS_DELETE"
	// The webhook topic for `collections/update` events.
	WebhookSubscriptionTopicCollectionsUpdate WebhookSubscriptionTopic = "COLLECTIONS_UPDATE"
	// The webhook topic for `customer_groups/create` events.
	WebhookSubscriptionTopicCustomerGroupsCreate WebhookSubscriptionTopic = "CUSTOMER_GROUPS_CREATE"
	// The webhook topic for `customer_groups/delete` events.
	WebhookSubscriptionTopicCustomerGroupsDelete WebhookSubscriptionTopic = "CUSTOMER_GROUPS_DELETE"
	// The webhook topic for `customer_groups/update` events.
	WebhookSubscriptionTopicCustomerGroupsUpdate WebhookSubscriptionTopic = "CUSTOMER_GROUPS_UPDATE"
	// The webhook topic for `customers/create` events.
	WebhookSubscriptionTopicCustomersCreate WebhookSubscriptionTopic = "CUSTOMERS_CREATE"
	// The webhook topic for `customers/delete` events.
	WebhookSubscriptionTopicCustomersDelete WebhookSubscriptionTopic = "CUSTOMERS_DELETE"
	// The webhook topic for `customers/disable` events.
	WebhookSubscriptionTopicCustomersDisable WebhookSubscriptionTopic = "CUSTOMERS_DISABLE"
	// The webhook topic for `customers/enable` events.
	WebhookSubscriptionTopicCustomersEnable WebhookSubscriptionTopic = "CUSTOMERS_ENABLE"
	// The webhook topic for `customers/update` events.
	WebhookSubscriptionTopicCustomersUpdate WebhookSubscriptionTopic = "CUSTOMERS_UPDATE"
	// The webhook topic for `disputes/create` events.
	WebhookSubscriptionTopicDisputesCreate WebhookSubscriptionTopic = "DISPUTES_CREATE"
	// The webhook topic for `disputes/update` events.
	WebhookSubscriptionTopicDisputesUpdate WebhookSubscriptionTopic = "DISPUTES_UPDATE"
	// The webhook topic for `draft_orders/create` events.
	WebhookSubscriptionTopicDraftOrdersCreate WebhookSubscriptionTopic = "DRAFT_ORDERS_CREATE"
	// The webhook topic for `draft_orders/delete` events.
	WebhookSubscriptionTopicDraftOrdersDelete WebhookSubscriptionTopic = "DRAFT_ORDERS_DELETE"
	// The webhook topic for `draft_orders/update` events.
	WebhookSubscriptionTopicDraftOrdersUpdate WebhookSubscriptionTopic = "DRAFT_ORDERS_UPDATE"
	// The webhook topic for `fulfillment_events/create` events.
	WebhookSubscriptionTopicFulfillmentEventsCreate WebhookSubscriptionTopic = "FULFILLMENT_EVENTS_CREATE"
	// The webhook topic for `fulfillment_events/delete` events.
	WebhookSubscriptionTopicFulfillmentEventsDelete WebhookSubscriptionTopic = "FULFILLMENT_EVENTS_DELETE"
	// The webhook topic for `fulfillments/create` events.
	WebhookSubscriptionTopicFulfillmentsCreate WebhookSubscriptionTopic = "FULFILLMENTS_CREATE"
	// The webhook topic for `fulfillments/update` events.
	WebhookSubscriptionTopicFulfillmentsUpdate WebhookSubscriptionTopic = "FULFILLMENTS_UPDATE"
	// The webhook topic for `attributed_sessions/first` events.
	WebhookSubscriptionTopicAttributedSessionsFirst WebhookSubscriptionTopic = "ATTRIBUTED_SESSIONS_FIRST"
	// The webhook topic for `attributed_sessions/last` events.
	WebhookSubscriptionTopicAttributedSessionsLast WebhookSubscriptionTopic = "ATTRIBUTED_SESSIONS_LAST"
	// The webhook topic for `order_transactions/create` events.
	WebhookSubscriptionTopicOrderTransactionsCreate WebhookSubscriptionTopic = "ORDER_TRANSACTIONS_CREATE"
	// The webhook topic for `orders/cancelled` events.
	WebhookSubscriptionTopicOrdersCancelled WebhookSubscriptionTopic = "ORDERS_CANCELLED"
	// The webhook topic for `orders/create` events.
	WebhookSubscriptionTopicOrdersCreate WebhookSubscriptionTopic = "ORDERS_CREATE"
	// The webhook topic for `orders/delete` events.
	WebhookSubscriptionTopicOrdersDelete WebhookSubscriptionTopic = "ORDERS_DELETE"
	// The webhook topic for `orders/edited` events.
	WebhookSubscriptionTopicOrdersEdited WebhookSubscriptionTopic = "ORDERS_EDITED"
	// The webhook topic for `orders/fulfilled` events.
	WebhookSubscriptionTopicOrdersFulfilled WebhookSubscriptionTopic = "ORDERS_FULFILLED"
	// The webhook topic for `orders/paid` events.
	WebhookSubscriptionTopicOrdersPaid WebhookSubscriptionTopic = "ORDERS_PAID"
	// The webhook topic for `orders/partially_fulfilled` events.
	WebhookSubscriptionTopicOrdersPartiallyFulfilled WebhookSubscriptionTopic = "ORDERS_PARTIALLY_FULFILLED"
	// The webhook topic for `orders/updated` events.
	WebhookSubscriptionTopicOrdersUpdated WebhookSubscriptionTopic = "ORDERS_UPDATED"
	// The webhook topic for `product_listings/add` events.
	WebhookSubscriptionTopicProductListingsAdd WebhookSubscriptionTopic = "PRODUCT_LISTINGS_ADD"
	// The webhook topic for `product_listings/remove` events.
	WebhookSubscriptionTopicProductListingsRemove WebhookSubscriptionTopic = "PRODUCT_LISTINGS_REMOVE"
	// The webhook topic for `product_listings/update` events.
	WebhookSubscriptionTopicProductListingsUpdate WebhookSubscriptionTopic = "PRODUCT_LISTINGS_UPDATE"
	// The webhook topic for `product_publications/create` events.
	WebhookSubscriptionTopicProductPublicationsCreate WebhookSubscriptionTopic = "PRODUCT_PUBLICATIONS_CREATE"
	// The webhook topic for `product_publications/delete` events.
	WebhookSubscriptionTopicProductPublicationsDelete WebhookSubscriptionTopic = "PRODUCT_PUBLICATIONS_DELETE"
	// The webhook topic for `product_publications/update` events.
	WebhookSubscriptionTopicProductPublicationsUpdate WebhookSubscriptionTopic = "PRODUCT_PUBLICATIONS_UPDATE"
	// The webhook topic for `products/create` events.
	WebhookSubscriptionTopicProductsCreate WebhookSubscriptionTopic = "PRODUCTS_CREATE"
	// The webhook topic for `products/delete` events.
	WebhookSubscriptionTopicProductsDelete WebhookSubscriptionTopic = "PRODUCTS_DELETE"
	// The webhook topic for `products/update` events.
	WebhookSubscriptionTopicProductsUpdate WebhookSubscriptionTopic = "PRODUCTS_UPDATE"
	// The webhook topic for `refunds/create` events.
	WebhookSubscriptionTopicRefundsCreate WebhookSubscriptionTopic = "REFUNDS_CREATE"
	// The webhook topic for `shipping_addresses/create` events.
	WebhookSubscriptionTopicShippingAddressesCreate WebhookSubscriptionTopic = "SHIPPING_ADDRESSES_CREATE"
	// The webhook topic for `shipping_addresses/update` events.
	WebhookSubscriptionTopicShippingAddressesUpdate WebhookSubscriptionTopic = "SHIPPING_ADDRESSES_UPDATE"
	// The webhook topic for `shop/update` events.
	WebhookSubscriptionTopicShopUpdate WebhookSubscriptionTopic = "SHOP_UPDATE"
	// The webhook topic for `tax_services/create` events.
	WebhookSubscriptionTopicTaxServicesCreate WebhookSubscriptionTopic = "TAX_SERVICES_CREATE"
	// The webhook topic for `tax_services/update` events.
	WebhookSubscriptionTopicTaxServicesUpdate WebhookSubscriptionTopic = "TAX_SERVICES_UPDATE"
	// The webhook topic for `themes/create` events.
	WebhookSubscriptionTopicThemesCreate WebhookSubscriptionTopic = "THEMES_CREATE"
	// The webhook topic for `themes/delete` events.
	WebhookSubscriptionTopicThemesDelete WebhookSubscriptionTopic = "THEMES_DELETE"
	// The webhook topic for `themes/publish` events.
	WebhookSubscriptionTopicThemesPublish WebhookSubscriptionTopic = "THEMES_PUBLISH"
	// The webhook topic for `themes/update` events.
	WebhookSubscriptionTopicThemesUpdate WebhookSubscriptionTopic = "THEMES_UPDATE"
	// The webhook topic for `variants/in_stock` events.
	WebhookSubscriptionTopicVariantsInStock WebhookSubscriptionTopic = "VARIANTS_IN_STOCK"
	// The webhook topic for `variants/out_of_stock` events.
	WebhookSubscriptionTopicVariantsOutOfStock WebhookSubscriptionTopic = "VARIANTS_OUT_OF_STOCK"
	// The webhook topic for `inventory_levels/connect` events.
	WebhookSubscriptionTopicInventoryLevelsConnect WebhookSubscriptionTopic = "INVENTORY_LEVELS_CONNECT"
	// The webhook topic for `inventory_levels/update` events.
	WebhookSubscriptionTopicInventoryLevelsUpdate WebhookSubscriptionTopic = "INVENTORY_LEVELS_UPDATE"
	// The webhook topic for `inventory_levels/disconnect` events.
	WebhookSubscriptionTopicInventoryLevelsDisconnect WebhookSubscriptionTopic = "INVENTORY_LEVELS_DISCONNECT"
	// The webhook topic for `attribution/risk` events.
	WebhookSubscriptionTopicAttributionRisk WebhookSubscriptionTopic = "ATTRIBUTION_RISK"
	// The webhook topic for `inventory_items/create` events.
	WebhookSubscriptionTopicInventoryItemsCreate WebhookSubscriptionTopic = "INVENTORY_ITEMS_CREATE"
	// The webhook topic for `inventory_items/update` events.
	WebhookSubscriptionTopicInventoryItemsUpdate WebhookSubscriptionTopic = "INVENTORY_ITEMS_UPDATE"
	// The webhook topic for `inventory_items/delete` events.
	WebhookSubscriptionTopicInventoryItemsDelete WebhookSubscriptionTopic = "INVENTORY_ITEMS_DELETE"
	// The webhook topic for `locations/create` events.
	WebhookSubscriptionTopicLocationsCreate WebhookSubscriptionTopic = "LOCATIONS_CREATE"
	// The webhook topic for `locations/update` events.
	WebhookSubscriptionTopicLocationsUpdate WebhookSubscriptionTopic = "LOCATIONS_UPDATE"
	// The webhook topic for `locations/delete` events.
	WebhookSubscriptionTopicLocationsDelete WebhookSubscriptionTopic = "LOCATIONS_DELETE"
	// The webhook topic for `tender_transactions/create` events.
	WebhookSubscriptionTopicTenderTransactionsCreate WebhookSubscriptionTopic = "TENDER_TRANSACTIONS_CREATE"
	// The webhook topic for `app_purchases_one_time/update` events.
	WebhookSubscriptionTopicAppPurchasesOneTimeUpdate WebhookSubscriptionTopic = "APP_PURCHASES_ONE_TIME_UPDATE"
	// The webhook topic for `app_subscriptions/update` events.
	WebhookSubscriptionTopicAppSubscriptionsUpdate WebhookSubscriptionTopic = "APP_SUBSCRIPTIONS_UPDATE"
	// The webhook topic for `locales/create` events.
	WebhookSubscriptionTopicLocalesCreate WebhookSubscriptionTopic = "LOCALES_CREATE"
	// The webhook topic for `locales/update` events.
	WebhookSubscriptionTopicLocalesUpdate WebhookSubscriptionTopic = "LOCALES_UPDATE"
	// The webhook topic for `domains/create` events.
	WebhookSubscriptionTopicDomainsCreate WebhookSubscriptionTopic = "DOMAINS_CREATE"
	// The webhook topic for `domains/update` events.
	WebhookSubscriptionTopicDomainsUpdate WebhookSubscriptionTopic = "DOMAINS_UPDATE"
	// The webhook topic for `domains/destroy` events.
	WebhookSubscriptionTopicDomainsDestroy WebhookSubscriptionTopic = "DOMAINS_DESTROY"
	// The webhook topic for `subscription_contracts/create` events.
	WebhookSubscriptionTopicSubscriptionContractsCreate WebhookSubscriptionTopic = "SUBSCRIPTION_CONTRACTS_CREATE"
	// The webhook topic for `subscription_contracts/update` events.
	WebhookSubscriptionTopicSubscriptionContractsUpdate WebhookSubscriptionTopic = "SUBSCRIPTION_CONTRACTS_UPDATE"
	// The webhook topic for `profiles/create` events.
	WebhookSubscriptionTopicProfilesCreate WebhookSubscriptionTopic = "PROFILES_CREATE"
	// The webhook topic for `profiles/update` events.
	WebhookSubscriptionTopicProfilesUpdate WebhookSubscriptionTopic = "PROFILES_UPDATE"
	// The webhook topic for `profiles/delete` events.
	WebhookSubscriptionTopicProfilesDelete WebhookSubscriptionTopic = "PROFILES_DELETE"
	// The webhook topic for `subscription_billing_attempts/success` events.
	WebhookSubscriptionTopicSubscriptionBillingAttemptsSuccess WebhookSubscriptionTopic = "SUBSCRIPTION_BILLING_ATTEMPTS_SUCCESS"
	// The webhook topic for `subscription_billing_attempts/failure` events.
	WebhookSubscriptionTopicSubscriptionBillingAttemptsFailure WebhookSubscriptionTopic = "SUBSCRIPTION_BILLING_ATTEMPTS_FAILURE"
)

var AllWebhookSubscriptionTopic = []WebhookSubscriptionTopic{
	WebhookSubscriptionTopicAppUninstalled,
	WebhookSubscriptionTopicCartsCreate,
	WebhookSubscriptionTopicCartsUpdate,
	WebhookSubscriptionTopicChannelsDelete,
	WebhookSubscriptionTopicCheckoutsCreate,
	WebhookSubscriptionTopicCheckoutsDelete,
	WebhookSubscriptionTopicCheckoutsUpdate,
	WebhookSubscriptionTopicCustomerPaymentMethodsCreate,
	WebhookSubscriptionTopicCustomerPaymentMethodsUpdate,
	WebhookSubscriptionTopicCustomerPaymentMethodsRevoke,
	WebhookSubscriptionTopicCollectionListingsAdd,
	WebhookSubscriptionTopicCollectionListingsRemove,
	WebhookSubscriptionTopicCollectionListingsUpdate,
	WebhookSubscriptionTopicCollectionPublicationsCreate,
	WebhookSubscriptionTopicCollectionPublicationsDelete,
	WebhookSubscriptionTopicCollectionPublicationsUpdate,
	WebhookSubscriptionTopicCollectionsCreate,
	WebhookSubscriptionTopicCollectionsDelete,
	WebhookSubscriptionTopicCollectionsUpdate,
	WebhookSubscriptionTopicCustomerGroupsCreate,
	WebhookSubscriptionTopicCustomerGroupsDelete,
	WebhookSubscriptionTopicCustomerGroupsUpdate,
	WebhookSubscriptionTopicCustomersCreate,
	WebhookSubscriptionTopicCustomersDelete,
	WebhookSubscriptionTopicCustomersDisable,
	WebhookSubscriptionTopicCustomersEnable,
	WebhookSubscriptionTopicCustomersUpdate,
	WebhookSubscriptionTopicDisputesCreate,
	WebhookSubscriptionTopicDisputesUpdate,
	WebhookSubscriptionTopicDraftOrdersCreate,
	WebhookSubscriptionTopicDraftOrdersDelete,
	WebhookSubscriptionTopicDraftOrdersUpdate,
	WebhookSubscriptionTopicFulfillmentEventsCreate,
	WebhookSubscriptionTopicFulfillmentEventsDelete,
	WebhookSubscriptionTopicFulfillmentsCreate,
	WebhookSubscriptionTopicFulfillmentsUpdate,
	WebhookSubscriptionTopicAttributedSessionsFirst,
	WebhookSubscriptionTopicAttributedSessionsLast,
	WebhookSubscriptionTopicOrderTransactionsCreate,
	WebhookSubscriptionTopicOrdersCancelled,
	WebhookSubscriptionTopicOrdersCreate,
	WebhookSubscriptionTopicOrdersDelete,
	WebhookSubscriptionTopicOrdersEdited,
	WebhookSubscriptionTopicOrdersFulfilled,
	WebhookSubscriptionTopicOrdersPaid,
	WebhookSubscriptionTopicOrdersPartiallyFulfilled,
	WebhookSubscriptionTopicOrdersUpdated,
	WebhookSubscriptionTopicProductListingsAdd,
	WebhookSubscriptionTopicProductListingsRemove,
	WebhookSubscriptionTopicProductListingsUpdate,
	WebhookSubscriptionTopicProductPublicationsCreate,
	WebhookSubscriptionTopicProductPublicationsDelete,
	WebhookSubscriptionTopicProductPublicationsUpdate,
	WebhookSubscriptionTopicProductsCreate,
	WebhookSubscriptionTopicProductsDelete,
	WebhookSubscriptionTopicProductsUpdate,
	WebhookSubscriptionTopicRefundsCreate,
	WebhookSubscriptionTopicShippingAddressesCreate,
	WebhookSubscriptionTopicShippingAddressesUpdate,
	WebhookSubscriptionTopicShopUpdate,
	WebhookSubscriptionTopicTaxServicesCreate,
	WebhookSubscriptionTopicTaxServicesUpdate,
	WebhookSubscriptionTopicThemesCreate,
	WebhookSubscriptionTopicThemesDelete,
	WebhookSubscriptionTopicThemesPublish,
	WebhookSubscriptionTopicThemesUpdate,
	WebhookSubscriptionTopicVariantsInStock,
	WebhookSubscriptionTopicVariantsOutOfStock,
	WebhookSubscriptionTopicInventoryLevelsConnect,
	WebhookSubscriptionTopicInventoryLevelsUpdate,
	WebhookSubscriptionTopicInventoryLevelsDisconnect,
	WebhookSubscriptionTopicAttributionRisk,
	WebhookSubscriptionTopicInventoryItemsCreate,
	WebhookSubscriptionTopicInventoryItemsUpdate,
	WebhookSubscriptionTopicInventoryItemsDelete,
	WebhookSubscriptionTopicLocationsCreate,
	WebhookSubscriptionTopicLocationsUpdate,
	WebhookSubscriptionTopicLocationsDelete,
	WebhookSubscriptionTopicTenderTransactionsCreate,
	WebhookSubscriptionTopicAppPurchasesOneTimeUpdate,
	WebhookSubscriptionTopicAppSubscriptionsUpdate,
	WebhookSubscriptionTopicLocalesCreate,
	WebhookSubscriptionTopicLocalesUpdate,
	WebhookSubscriptionTopicDomainsCreate,
	WebhookSubscriptionTopicDomainsUpdate,
	WebhookSubscriptionTopicDomainsDestroy,
	WebhookSubscriptionTopicSubscriptionContractsCreate,
	WebhookSubscriptionTopicSubscriptionContractsUpdate,
	WebhookSubscriptionTopicProfilesCreate,
	WebhookSubscriptionTopicProfilesUpdate,
	WebhookSubscriptionTopicProfilesDelete,
	WebhookSubscriptionTopicSubscriptionBillingAttemptsSuccess,
	WebhookSubscriptionTopicSubscriptionBillingAttemptsFailure,
}

func (e WebhookSubscriptionTopic) IsValid() bool {
	switch e {
	case WebhookSubscriptionTopicAppUninstalled, WebhookSubscriptionTopicCartsCreate, WebhookSubscriptionTopicCartsUpdate, WebhookSubscriptionTopicChannelsDelete, WebhookSubscriptionTopicCheckoutsCreate, WebhookSubscriptionTopicCheckoutsDelete, WebhookSubscriptionTopicCheckoutsUpdate, WebhookSubscriptionTopicCustomerPaymentMethodsCreate, WebhookSubscriptionTopicCustomerPaymentMethodsUpdate, WebhookSubscriptionTopicCustomerPaymentMethodsRevoke, WebhookSubscriptionTopicCollectionListingsAdd, WebhookSubscriptionTopicCollectionListingsRemove, WebhookSubscriptionTopicCollectionListingsUpdate, WebhookSubscriptionTopicCollectionPublicationsCreate, WebhookSubscriptionTopicCollectionPublicationsDelete, WebhookSubscriptionTopicCollectionPublicationsUpdate, WebhookSubscriptionTopicCollectionsCreate, WebhookSubscriptionTopicCollectionsDelete, WebhookSubscriptionTopicCollectionsUpdate, WebhookSubscriptionTopicCustomerGroupsCreate, WebhookSubscriptionTopicCustomerGroupsDelete, WebhookSubscriptionTopicCustomerGroupsUpdate, WebhookSubscriptionTopicCustomersCreate, WebhookSubscriptionTopicCustomersDelete, WebhookSubscriptionTopicCustomersDisable, WebhookSubscriptionTopicCustomersEnable, WebhookSubscriptionTopicCustomersUpdate, WebhookSubscriptionTopicDisputesCreate, WebhookSubscriptionTopicDisputesUpdate, WebhookSubscriptionTopicDraftOrdersCreate, WebhookSubscriptionTopicDraftOrdersDelete, WebhookSubscriptionTopicDraftOrdersUpdate, WebhookSubscriptionTopicFulfillmentEventsCreate, WebhookSubscriptionTopicFulfillmentEventsDelete, WebhookSubscriptionTopicFulfillmentsCreate, WebhookSubscriptionTopicFulfillmentsUpdate, WebhookSubscriptionTopicAttributedSessionsFirst, WebhookSubscriptionTopicAttributedSessionsLast, WebhookSubscriptionTopicOrderTransactionsCreate, WebhookSubscriptionTopicOrdersCancelled, WebhookSubscriptionTopicOrdersCreate, WebhookSubscriptionTopicOrdersDelete, WebhookSubscriptionTopicOrdersEdited, WebhookSubscriptionTopicOrdersFulfilled, WebhookSubscriptionTopicOrdersPaid, WebhookSubscriptionTopicOrdersPartiallyFulfilled, WebhookSubscriptionTopicOrdersUpdated, WebhookSubscriptionTopicProductListingsAdd, WebhookSubscriptionTopicProductListingsRemove, WebhookSubscriptionTopicProductListingsUpdate, WebhookSubscriptionTopicProductPublicationsCreate, WebhookSubscriptionTopicProductPublicationsDelete, WebhookSubscriptionTopicProductPublicationsUpdate, WebhookSubscriptionTopicProductsCreate, WebhookSubscriptionTopicProductsDelete, WebhookSubscriptionTopicProductsUpdate, WebhookSubscriptionTopicRefundsCreate, WebhookSubscriptionTopicShippingAddressesCreate, WebhookSubscriptionTopicShippingAddressesUpdate, WebhookSubscriptionTopicShopUpdate, WebhookSubscriptionTopicTaxServicesCreate, WebhookSubscriptionTopicTaxServicesUpdate, WebhookSubscriptionTopicThemesCreate, WebhookSubscriptionTopicThemesDelete, WebhookSubscriptionTopicThemesPublish, WebhookSubscriptionTopicThemesUpdate, WebhookSubscriptionTopicVariantsInStock, WebhookSubscriptionTopicVariantsOutOfStock, WebhookSubscriptionTopicInventoryLevelsConnect, WebhookSubscriptionTopicInventoryLevelsUpdate, WebhookSubscriptionTopicInventoryLevelsDisconnect, WebhookSubscriptionTopicAttributionRisk, WebhookSubscriptionTopicInventoryItemsCreate, WebhookSubscriptionTopicInventoryItemsUpdate, WebhookSubscriptionTopicInventoryItemsDelete, WebhookSubscriptionTopicLocationsCreate, WebhookSubscriptionTopicLocationsUpdate, WebhookSubscriptionTopicLocationsDelete, WebhookSubscriptionTopicTenderTransactionsCreate, WebhookSubscriptionTopicAppPurchasesOneTimeUpdate, WebhookSubscriptionTopicAppSubscriptionsUpdate, WebhookSubscriptionTopicLocalesCreate, WebhookSubscriptionTopicLocalesUpdate, WebhookSubscriptionTopicDomainsCreate, WebhookSubscriptionTopicDomainsUpdate, WebhookSubscriptionTopicDomainsDestroy, WebhookSubscriptionTopicSubscriptionContractsCreate, WebhookSubscriptionTopicSubscriptionContractsUpdate, WebhookSubscriptionTopicProfilesCreate, WebhookSubscriptionTopicProfilesUpdate, WebhookSubscriptionTopicProfilesDelete, WebhookSubscriptionTopicSubscriptionBillingAttemptsSuccess, WebhookSubscriptionTopicSubscriptionBillingAttemptsFailure:
		return true
	}
	return false
}

func (e WebhookSubscriptionTopic) String() string {
	return string(e)
}

func (e *WebhookSubscriptionTopic) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WebhookSubscriptionTopic(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WebhookSubscriptionTopic", str)
	}
	return nil
}

func (e WebhookSubscriptionTopic) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Units of measurement for weight.
type WeightUnit string

const (
	// 1 kilogram equals 1000 grams.
	WeightUnitKilograms WeightUnit = "KILOGRAMS"
	// Metric system unit of mass.
	WeightUnitGrams WeightUnit = "GRAMS"
	// 1 pound equals 16 ounces.
	WeightUnitPounds WeightUnit = "POUNDS"
	// Imperial system unit of mass.
	WeightUnitOunces WeightUnit = "OUNCES"
)

var AllWeightUnit = []WeightUnit{
	WeightUnitKilograms,
	WeightUnitGrams,
	WeightUnitPounds,
	WeightUnitOunces,
}

func (e WeightUnit) IsValid() bool {
	switch e {
	case WeightUnitKilograms, WeightUnitGrams, WeightUnitPounds, WeightUnitOunces:
		return true
	}
	return false
}

func (e WeightUnit) String() string {
	return string(e)
}

func (e *WeightUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WeightUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WeightUnit", str)
	}
	return nil
}

func (e WeightUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
